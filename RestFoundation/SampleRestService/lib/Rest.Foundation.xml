<?xml version="1.0"?>
<doc>
  <assembly>
    <name>Rest.Foundation</name>
  </assembly>
  <members>
    <member name="T:RestFoundation.Behaviors.IServiceBehavior">
      <summary>
            Defines a service behavior.
            </summary>
    </member>
    <member name="M:RestFoundation.Behaviors.IServiceBehavior.AppliesTo(RestFoundation.IServiceContext,RestFoundation.Behaviors.MethodAppliesContext)">
      <summary>
            Returns a value indicating whether to apply the behavior to the provided method of the specified
            service type.
            </summary>
      <param name="serviceContext">The service context.</param>
      <param name="methodContext">The "method applies" context.</param>
      <returns>true to apply the behavior; false to bypass.</returns>
    </member>
    <member name="M:RestFoundation.Behaviors.IServiceBehavior.OnMethodExecuting(RestFoundation.IServiceContext,RestFoundation.Behaviors.MethodExecutingContext)">
      <summary>
            Called before a service method is executed.
            </summary>
      <param name="serviceContext">The service context.</param>
      <param name="behaviorContext">The "method executing" behavior context.</param>
      <returns>A service method action.</returns>
    </member>
    <member name="M:RestFoundation.Behaviors.IServiceBehavior.OnMethodExecuted(RestFoundation.IServiceContext,RestFoundation.Behaviors.MethodExecutedContext)">
      <summary>
            Called after a service method is executed.
            </summary>
      <param name="serviceContext">The service context.</param>
      <param name="behaviorContext">The "method executed" behavior context.</param>
    </member>
    <member name="T:RestFoundation.Behaviors.ServiceBehavior">
      <summary>
            The base service behavior class.
            This class cannot be instantiated.
            </summary>
    </member>
    <member name="M:RestFoundation.Behaviors.ServiceBehavior.AppliesTo(RestFoundation.IServiceContext,RestFoundation.Behaviors.MethodAppliesContext)">
      <summary>
            Returns a value indicating whether to apply the behavior to the provided method of the specified
            service type.
            </summary>
      <param name="serviceContext">The service context.</param>
      <param name="methodContext">The "method applies" context.</param>
      <returns>true to apply the behavior; false to bypass.</returns>
    </member>
    <member name="M:RestFoundation.Behaviors.ServiceBehavior.OnMethodExecuting(RestFoundation.IServiceContext,RestFoundation.Behaviors.MethodExecutingContext)">
      <summary>
            Called before a service method is executed.
            </summary>
      <param name="serviceContext">The service context.</param>
      <param name="behaviorContext">The "method executing" behavior context.</param>
      <returns>A service method action.</returns>
    </member>
    <member name="M:RestFoundation.Behaviors.ServiceBehavior.OnMethodExecuted(RestFoundation.IServiceContext,RestFoundation.Behaviors.MethodExecutedContext)">
      <summary>
            Called after a service method is executed.
            </summary>
      <param name="serviceContext">The service context.</param>
      <param name="behaviorContext">The "method executed" behavior context.</param>
    </member>
    <member name="T:RestFoundation.Behaviors.ISecureServiceBehavior">
      <summary>
            Defines a secure service behavior.
            </summary>
    </member>
    <member name="M:RestFoundation.Behaviors.ISecureServiceBehavior.OnMethodAuthorizing(RestFoundation.IServiceContext,RestFoundation.Behaviors.MethodAuthorizingContext)">
      <summary>
            Called during the authorization process before a service method or behavior is executed.
            </summary>
      <param name="serviceContext">The service context.</param>
      <param name="behaviorContext">The "method authorizing" behavior context.</param>
    </member>
    <member name="T:RestFoundation.Behaviors.SecureServiceBehavior">
      <summary>
            The base secure service behavior class. It is highly recommended to inherit this class
            instead of implementing the <see cref="T:RestFoundation.Behaviors.ISecureServiceBehavior" /> interface to avoid
            output caching security problems.
            This class cannot be instantiated.
            </summary>
    </member>
    <member name="M:RestFoundation.Behaviors.SecureServiceBehavior.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Behaviors.SecureServiceBehavior" /> class.
            </summary>
    </member>
    <member name="M:RestFoundation.Behaviors.SecureServiceBehavior.OnMethodAuthorizing(RestFoundation.IServiceContext,RestFoundation.Behaviors.MethodAuthorizingContext)">
      <summary>
            Called during the authorization process before a service method or behavior is executed.
            </summary>
      <param name="serviceContext">The service context.</param>
      <param name="behaviorContext">The "method authorizing" behavior context.</param>
      <returns>A service method action.</returns>
    </member>
    <member name="M:RestFoundation.Behaviors.SecureServiceBehavior.SetStatus(System.Net.HttpStatusCode,System.String)">
      <summary>
            Sets an HTTP status code and description in case of a security exception.
            </summary>
      <param name="statusCode">The status code.</param>
      <param name="description">The status description.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">If the status code is less than 400.</exception>
    </member>
    <member name="M:RestFoundation.Behaviors.SecureServiceBehavior.SetStatusCode(System.Net.HttpStatusCode)">
      <summary>
            Sets an HTTP status code in case of a security exception.
            </summary>
      <param name="statusCode">The status code.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">If the status code is less than 400.</exception>
    </member>
    <member name="M:RestFoundation.Behaviors.SecureServiceBehavior.SetStatusDescription(System.String)">
      <summary>
            Sets an HTTP status description in case of a security exception.
            </summary>
      <param name="description">The status description.</param>
    </member>
    <member name="T:RestFoundation.Behaviors.AjaxOnlyBehavior">
      <summary>
            Represents a secure behavior for a service or a service method that rejects responses
            not generated using AJAX. A non-AJAX HTTP request will set a 404 (Not Found) HTTP
            status code.
            </summary>
    </member>
    <member name="M:RestFoundation.Behaviors.AjaxOnlyBehavior.OnMethodAuthorizing(RestFoundation.IServiceContext,RestFoundation.Behaviors.MethodAuthorizingContext)">
      <summary>
            Called during the authorization process before a service method or behavior is executed.
            </summary>
      <param name="serviceContext">The service context.</param>
      <param name="behaviorContext">The "method authorizing" behavior context.</param>
      <returns>A service method action.</returns>
    </member>
    <member name="T:RestFoundation.Behaviors.ServiceMethodBehaviorAttribute">
      <summary>
            Represents a service method behavior defined on a service contract.
            This class cannot be instantiated.
            </summary>
    </member>
    <member name="M:RestFoundation.Behaviors.ServiceMethodBehaviorAttribute.AppliesTo(RestFoundation.IServiceContext,RestFoundation.Behaviors.MethodAppliesContext)">
      <summary>
            Returns a value indicating whether to apply the behavior to the provided method of the specified
            service type.
            </summary>
      <param name="serviceContext">The service context.</param>
      <param name="methodContext">The "method applies" context.</param>
      <returns>true to apply the behavior; false to bypass.</returns>
    </member>
    <member name="M:RestFoundation.Behaviors.ServiceMethodBehaviorAttribute.OnMethodAuthorizing(RestFoundation.IServiceContext,RestFoundation.Behaviors.MethodAuthorizingContext)">
      <summary>
            Called during the authorization process before a service method or behavior is executed.
            </summary>
      <param name="serviceContext">The service context.</param>
      <param name="behaviorContext">The "method authorizing" behavior context.</param>
      <returns>A service method action.</returns>
    </member>
    <member name="M:RestFoundation.Behaviors.ServiceMethodBehaviorAttribute.OnMethodExecuting(RestFoundation.IServiceContext,RestFoundation.Behaviors.MethodExecutingContext)">
      <summary>
            Called before a service method is executed.
            </summary>
      <param name="serviceContext">The service context.</param>
      <param name="behaviorContext">The "method executing" behavior context.</param>
      <returns>A service method action.</returns>
    </member>
    <member name="M:RestFoundation.Behaviors.ServiceMethodBehaviorAttribute.OnMethodExecuted(RestFoundation.IServiceContext,RestFoundation.Behaviors.MethodExecutedContext)">
      <summary>
            Called after a service method is executed.
            </summary>
      <param name="serviceContext">The service context.</param>
      <param name="behaviorContext">The "method executed" behavior context.</param>
    </member>
    <member name="P:RestFoundation.Behaviors.ServiceMethodBehaviorAttribute.Order">
      <summary>
            Represents an order to execute service behavior attributes.
            </summary>
    </member>
    <member name="P:RestFoundation.Behaviors.ServiceMethodBehaviorAttribute.StatusCode">
      <summary>
            Gets the HTTP status code in case of a security exception.
            </summary>
    </member>
    <member name="P:RestFoundation.Behaviors.ServiceMethodBehaviorAttribute.StatusDescription">
      <summary>
            Gets the HTTP status description in case of a security exception.
            </summary>
    </member>
    <member name="T:RestFoundation.Behaviors.AjaxOnlyAttribute">
      <summary>
            Represents a service method that can only be called using AJAX.
            HTTP connection will set a 404 (Not Found) HTTP status code if the service method
            was not called using AJAX.
            </summary>
    </member>
    <member name="M:RestFoundation.Behaviors.AjaxOnlyAttribute.OnMethodAuthorizing(RestFoundation.IServiceContext,RestFoundation.Behaviors.MethodAuthorizingContext)">
      <summary>
            Called during the authorization process before a service method or behavior is executed.
            </summary>
      <param name="serviceContext">The service context.</param>
      <param name="behaviorContext">The "method authorizing" behavior context.</param>
      <returns>A service method action.</returns>
    </member>
    <member name="P:RestFoundation.Behaviors.AjaxOnlyAttribute.StatusCode">
      <summary>
            Gets the HTTP status code in case of a security exception.
            </summary>
    </member>
    <member name="P:RestFoundation.Behaviors.AjaxOnlyAttribute.StatusDescription">
      <summary>
            Gets the HTTP status description in case of a security exception.
            </summary>
    </member>
    <member name="T:RestFoundation.Behaviors.OutputCacheAttribute">
      <summary>
            Represents a service method with a specific HTTP caching behavior.
            </summary>
    </member>
    <member name="M:RestFoundation.Behaviors.OutputCacheAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Behaviors.OutputCacheAttribute" /> class.
            </summary>
    </member>
    <member name="M:RestFoundation.Behaviors.OutputCacheAttribute.OnMethodExecuted(RestFoundation.IServiceContext,RestFoundation.Behaviors.MethodExecutedContext)">
      <summary>
            Called after a service method is executed.
            </summary>
      <param name="serviceContext">The service context.</param>
      <param name="behaviorContext">The "method executed" behavior context.</param>
    </member>
    <member name="P:RestFoundation.Behaviors.OutputCacheAttribute.DurationInSeconds">
      <summary>
            Gets or sets the amount of time that a cache entry is to remain in the output cache.
            </summary>
    </member>
    <member name="P:RestFoundation.Behaviors.OutputCacheAttribute.Location">
      <summary>
            Gets or sets a value that determines the location of the cache entry.
            </summary>
    </member>
    <member name="P:RestFoundation.Behaviors.OutputCacheAttribute.NoStore">
      <summary>
            Gets or sets a value indicating whether HTTP cache-control: no-store directive is set.
            </summary>
    </member>
    <member name="P:RestFoundation.Behaviors.OutputCacheAttribute.VaryByContentEncoding">
      <summary>
            Gets or sets a comma delimited set of character sets (content encodings) used to vary the cache entry.
            </summary>
    </member>
    <member name="P:RestFoundation.Behaviors.OutputCacheAttribute.VaryByCustom">
      <summary>
            Gets or sets a comma delimited set of custom strings used to vary the cache entry.
            </summary>
    </member>
    <member name="P:RestFoundation.Behaviors.OutputCacheAttribute.VaryByHeader">
      <summary>
            Gets or sets a comma delimited set of HTTP header names associated with the request used to vary the cache entry.
            </summary>
    </member>
    <member name="P:RestFoundation.Behaviors.OutputCacheAttribute.VaryByParam">
      <summary>
            Gets or sets a comma delimited set of query string or form POST parameters used to vary the cache entry.
            </summary>
    </member>
    <member name="T:RestFoundation.Behaviors.Attributes.AsyncTimeoutAttribute">
      <summary>
            Represents service method execution and result processing timeouts.
            </summary>
    </member>
    <member name="M:RestFoundation.Behaviors.Attributes.AsyncTimeoutAttribute.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Behaviors.Attributes.AsyncTimeoutAttribute" /> class.
            </summary>
      <param name="timeoutInSeconds">
            A timeout for an asynchronous task returned by the service method in seconds.
            Set the value to <see cref="F:System.TimeSpan.Zero" /> for an infinite timeout.
            </param>
    </member>
    <member name="P:RestFoundation.Behaviors.Attributes.AsyncTimeoutAttribute.TimeoutInSeconds">
      <summary>
            Gets the service method execution timeout value in seconds.
            </summary>
    </member>
    <member name="T:RestFoundation.Behaviors.Attributes.ThrottlingAttribute">
      <summary>
            Represents a bandwidth throttling behavior for a service method.
            </summary>
    </member>
    <member name="M:RestFoundation.Behaviors.Attributes.ThrottlingAttribute.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Behaviors.Attributes.ThrottlingAttribute" /> class.
            </summary>
      <param name="delayInMilliseconds">
            The number of milliseconds allowed between the calls for a user.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            If the delay is a non-positive number.
            </exception>
    </member>
    <member name="M:RestFoundation.Behaviors.Attributes.ThrottlingAttribute.OnMethodAuthorizing(RestFoundation.IServiceContext,RestFoundation.Behaviors.MethodAuthorizingContext)">
      <summary>
            Called during the authorization process before a service method or behavior is executed.
            </summary>
      <param name="serviceContext">The service context.</param>
      <param name="behaviorContext">The "method authorizing" behavior context.</param>
      <returns>A service method action.</returns>
    </member>
    <member name="P:RestFoundation.Behaviors.Attributes.ThrottlingAttribute.StatusCode">
      <summary>
            Gets the HTTP status code in case of a security exception.
            </summary>
    </member>
    <member name="P:RestFoundation.Behaviors.Attributes.ThrottlingAttribute.StatusDescription">
      <summary>
            Gets the HTTP status description in case of a security exception.
            </summary>
    </member>
    <member name="P:RestFoundation.Behaviors.Attributes.ThrottlingAttribute.DelayInMilliseconds">
      <summary>
            Gets the number of milliseconds allowed between the calls for a user.
            </summary>
    </member>
    <member name="T:RestFoundation.Behaviors.Attributes.ValidateResourceAttribute">
      <summary>
            Represents a service method that creates and returns a fault collection if the resource validation
            failed before the method execution.
            </summary>
    </member>
    <member name="M:RestFoundation.Behaviors.Attributes.ValidateResourceAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Behaviors.Attributes.ValidateResourceAttribute" /> class.
            </summary>
    </member>
    <member name="M:RestFoundation.Behaviors.Attributes.ValidateResourceAttribute.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Behaviors.Attributes.ValidateResourceAttribute" /> class.
            </summary>
      <param name="throwOnNullResource">
            A value indicating whether there should be a fault created if the resource is null.
            </param>
    </member>
    <member name="M:RestFoundation.Behaviors.Attributes.ValidateResourceAttribute.OnMethodExecuting(RestFoundation.IServiceContext,RestFoundation.Behaviors.MethodExecutingContext)">
      <summary>
            Called before a service method is executed.
            </summary>
      <param name="serviceContext">The service context.</param>
      <param name="behaviorContext">The "method executing" behavior context.</param>
      <returns>A service method action.</returns>
    </member>
    <member name="P:RestFoundation.Behaviors.Attributes.ValidateResourceAttribute.ThrowOnNullResource">
      <summary>
            Gets a value indicating whether a null resource is allowed.
            </summary>
    </member>
    <member name="T:RestFoundation.Behaviors.BehaviorContext">
      <summary>
            The base class for a behavior context.
            This class cannot be instantiated.
            </summary>
    </member>
    <member name="M:RestFoundation.Behaviors.BehaviorContext.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Behaviors.BehaviorContext" /> class.
            </summary>
    </member>
    <member name="M:RestFoundation.Behaviors.BehaviorContext.#ctor(System.Object,System.Reflection.MethodInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Behaviors.BehaviorContext" /> class.
            </summary>
      <param name="service">The service instance.</param>
      <param name="method">The service method.</param>
    </member>
    <member name="M:RestFoundation.Behaviors.BehaviorContext.GetServiceContractType">
      <summary>
            Gets the service contract type.
            </summary>
      <returns>The service contract type.</returns>
    </member>
    <member name="M:RestFoundation.Behaviors.BehaviorContext.GetServiceType">
      <summary>
            Get the service type.
            </summary>
      <returns>The service type.</returns>
    </member>
    <member name="M:RestFoundation.Behaviors.BehaviorContext.GetMethodName">
      <summary>
            Gets the service method name.
            </summary>
      <returns>The service method name.</returns>
    </member>
    <member name="M:RestFoundation.Behaviors.BehaviorContext.GetSupportedHttpMethods">
      <summary>
            Gets supported HTTP methods by the service method.
            </summary>
      <returns>A sequence of supported HTTP methods.</returns>
    </member>
    <member name="M:RestFoundation.Behaviors.BehaviorContext.GetUrlTemplate">
      <summary>
            Gets the URL template for the service method.
            </summary>
      <returns>The URL template.</returns>
    </member>
    <member name="P:RestFoundation.Behaviors.BehaviorContext.Service">
      <summary>
            Gets the service instance.
            </summary>
    </member>
    <member name="P:RestFoundation.Behaviors.BehaviorContext.Method">
      <summary>
            Gets the service method.
            </summary>
    </member>
    <member name="T:RestFoundation.Behaviors.MethodAppliesContext">
      <summary>
            Contains associated objects for the "method applies" behavior.
            </summary>
    </member>
    <member name="M:RestFoundation.Behaviors.MethodAppliesContext.#ctor(System.Object,System.Reflection.MethodInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Behaviors.MethodAppliesContext" /> class.
            </summary>
      <param name="service">The service instance.</param>
      <param name="method">The service method.</param>
    </member>
    <member name="M:RestFoundation.Behaviors.MethodAppliesContext.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Behaviors.MethodAppliesContext" /> class.
            </summary>
    </member>
    <member name="T:RestFoundation.Behaviors.MethodAuthorizingContext">
      <summary>
            Contains associated objects for the "method authorizing" behavior.
            </summary>
    </member>
    <member name="M:RestFoundation.Behaviors.MethodAuthorizingContext.#ctor(System.Object,System.Reflection.MethodInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Behaviors.MethodAuthorizingContext" /> class.
            </summary>
      <param name="service">The service instance.</param>
      <param name="method">The service method.</param>
    </member>
    <member name="M:RestFoundation.Behaviors.MethodAuthorizingContext.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Behaviors.MethodAuthorizingContext" /> class.
            </summary>
    </member>
    <member name="T:RestFoundation.Behaviors.MethodExecutedContext">
      <summary>
            Contains associated objects for the "method executed" behavior.
            </summary>
    </member>
    <member name="M:RestFoundation.Behaviors.MethodExecutedContext.#ctor(System.Object,System.Reflection.MethodInfo,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Behaviors.MethodExecutedContext" /> class.
            </summary>
      <param name="service">The service instance.</param>
      <param name="method">The service method.</param>
      <param name="returnedObject">The object returned by the service method.</param>
    </member>
    <member name="M:RestFoundation.Behaviors.MethodExecutedContext.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Behaviors.MethodExecutedContext" /> class.
            </summary>
    </member>
    <member name="P:RestFoundation.Behaviors.MethodExecutedContext.ReturnedObject">
      <summary>
            Gets the object returned by the service method.
            </summary>
    </member>
    <member name="T:RestFoundation.Behaviors.MethodExecutingContext">
      <summary>
            Contains associated objects for the "method executing" behavior.
            </summary>
    </member>
    <member name="M:RestFoundation.Behaviors.MethodExecutingContext.#ctor(System.Object,System.Reflection.MethodInfo,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Behaviors.MethodExecutingContext" /> class.
            </summary>
      <param name="service">The service instance.</param>
      <param name="method">The service method.</param>
      <param name="resource">The resource for the service method.</param>
    </member>
    <member name="M:RestFoundation.Behaviors.MethodExecutingContext.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Behaviors.MethodExecutingContext" /> class.
            </summary>
    </member>
    <member name="P:RestFoundation.Behaviors.MethodExecutingContext.Resource">
      <summary>
            Gets the resource object to be passed into the service method.
            </summary>
    </member>
    <member name="T:RestFoundation.Behaviors.HttpsOnlyAttribute">
      <summary>
            Represents a service method that can only be called over HTTPS/SSL.
            HTTP connection will set a 403 (Forbidden) HTTP status code if the connection is not secure.
            </summary>
    </member>
    <member name="M:RestFoundation.Behaviors.HttpsOnlyAttribute.OnMethodAuthorizing(RestFoundation.IServiceContext,RestFoundation.Behaviors.MethodAuthorizingContext)">
      <summary>
            Called during the authorization process before a service method or behavior is executed.
            </summary>
      <param name="serviceContext">The service context.</param>
      <param name="behaviorContext">The "method authorizing" behavior context.</param>
      <returns>A service method action.</returns>
    </member>
    <member name="P:RestFoundation.Behaviors.HttpsOnlyAttribute.StatusCode">
      <summary>
            Gets the HTTP status code in case of a security exception.
            </summary>
    </member>
    <member name="P:RestFoundation.Behaviors.HttpsOnlyAttribute.StatusDescription">
      <summary>
            Gets the HTTP status description in case of a security exception.
            </summary>
    </member>
    <member name="P:RestFoundation.Behaviors.HttpsOnlyAttribute.EnableLoadBalancerSupport">
      <summary>
            Gets or sets a value indicating whether the load balancer support for forwarding HTTPS traffic
            over HTTP channel is allowed.
            </summary>
    </member>
    <member name="T:RestFoundation.Behaviors.NoCacheAttribute">
      <summary>
            Represents a service method that prevents HTTP caching.
            </summary>
    </member>
    <member name="M:RestFoundation.Behaviors.NoCacheAttribute.OnMethodExecuted(RestFoundation.IServiceContext,RestFoundation.Behaviors.MethodExecutedContext)">
      <summary>
            Called after a service method is executed.
            </summary>
      <param name="serviceContext">The service context.</param>
      <param name="behaviorContext">The "method executed" behavior context.</param>
    </member>
    <member name="T:RestFoundation.Behaviors.ThrottlingBehavior">
      <summary>
            Represents a bandwidth throttling behavior for a service.
            </summary>
    </member>
    <member name="M:RestFoundation.Behaviors.ThrottlingBehavior.#ctor(System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Behaviors.ThrottlingBehavior" /> class.
            </summary>
      <param name="delayInMilliseconds">
            The number of milliseconds allowed between the calls for a user.
            </param>
      <exception cref="T:System.ArgumentOutOfRangeException">
            If the delay is a non-positive number.
            </exception>
    </member>
    <member name="M:RestFoundation.Behaviors.ThrottlingBehavior.OnMethodAuthorizing(RestFoundation.IServiceContext,RestFoundation.Behaviors.MethodAuthorizingContext)">
      <summary>
            Called during the authorization process before a service method or behavior is executed.
            </summary>
      <param name="serviceContext">The service context.</param>
      <param name="behaviorContext">The "method authorizing" behavior context.</param>
      <returns>A service method action.</returns>
    </member>
    <member name="T:RestFoundation.CachePriority">
      <summary>
            Represents a cache item priority.
            </summary>
    </member>
    <member name="F:RestFoundation.CachePriority.Normal">
      <summary>
            The default priority.
            </summary>
    </member>
    <member name="F:RestFoundation.CachePriority.Low">
      <summary>
            Low priority. Low priority items are removed from cache first in
            low memory situations.
            </summary>
    </member>
    <member name="F:RestFoundation.CachePriority.High">
      <summary>
            High priority. High priority items are retained the longest in
            low memory situations.
            </summary>
    </member>
    <member name="T:RestFoundation.Client.IRestClient">
      <summary>
            Defines a REST HTTP client.
            </summary>
    </member>
    <member name="M:RestFoundation.Client.IRestClient.GetAsync(System.Uri)">
      <summary>
            Executes an HTTP request to the provided URL using the GET HTTP method.
            </summary>
      <param name="url">The URL.</param>
      <returns>A task resulting in an output resource without a body.</returns>
      <exception cref="T:System.Web.HttpException">If an HTTP-level exception occurred.</exception>
      <exception cref="T:System.Net.WebException">If a non-HTTP level exception occurred.</exception>
      <exception cref="T:System.Net.ProtocolViolationException">If an unexpected protocol exception occurred.</exception>
      <exception cref="T:System.Security.SecurityException">If a security exception occurred.</exception>
    </member>
    <member name="M:RestFoundation.Client.IRestClient.GetAsync(System.Uri,System.Net.WebHeaderCollection)">
      <summary>
            Executes an HTTP request to the provided URL using the GET HTTP method.
            </summary>
      <param name="url">The URL.</param>
      <param name="headers">A collection of HTTP headers to pass to the request.</param>
      <returns>A task resulting in an output resource without a body.</returns>
      <exception cref="T:System.Web.HttpException">If an HTTP-level exception occurred.</exception>
      <exception cref="T:System.Net.WebException">If a non-HTTP level exception occurred.</exception>
      <exception cref="T:System.Net.ProtocolViolationException">If an unexpected protocol exception occurred.</exception>
      <exception cref="T:System.Security.SecurityException">If a security exception occurred.</exception>
    </member>
    <member name="M:RestFoundation.Client.IRestClient.GetAsync``1(System.Uri,RestFoundation.Client.RestResourceType)">
      <summary>
            Executes an HTTP request to the provided URL and outputs an expected resource of the specified type using the GET HTTP method.
            </summary>
      <typeparam name="TOutput">The output resource object type.</typeparam>
      <param name="url">The URL.</param>
      <param name="outputType">The output resource type.</param>
      <returns>A task resulting in an output resource.</returns>
      <exception cref="T:System.Web.HttpException">If an HTTP-level exception occurred.</exception>
      <exception cref="T:System.Net.WebException">If a non-HTTP level exception occurred.</exception>
      <exception cref="T:System.Net.ProtocolViolationException">If an unexpected protocol exception occurred.</exception>
      <exception cref="T:System.Security.SecurityException">If a security exception occurred.</exception>
      <exception cref="T:System.InvalidOperationException">If a resource object is not serializable.</exception>
    </member>
    <member name="M:RestFoundation.Client.IRestClient.GetAsync``1(System.Uri,RestFoundation.Client.RestResourceType,System.Net.WebHeaderCollection)">
      <summary>
            Executes an HTTP request to the provided URL and outputs an expected resource of the specified type using the GET HTTP method.
            </summary>
      <typeparam name="TOutput">The output resource object type.</typeparam>
      <param name="url">The URL.</param>
      <param name="outputType">The output resource type.</param>
      <param name="headers">A collection of HTTP headers to pass to the request.</param>
      <returns>A task resulting in an output resource.</returns>
      <exception cref="T:System.Web.HttpException">If an HTTP-level exception occurred.</exception>
      <exception cref="T:System.Net.WebException">If a non-HTTP level exception occurred.</exception>
      <exception cref="T:System.Net.ProtocolViolationException">If an unexpected protocol exception occurred.</exception>
      <exception cref="T:System.Security.SecurityException">If a security exception occurred.</exception>
      <exception cref="T:System.InvalidOperationException">If a resource object is not serializable.</exception>
    </member>
    <member name="M:RestFoundation.Client.IRestClient.GetAsync``1(System.Uri,RestFoundation.Client.RestResourceType,System.Net.WebHeaderCollection,System.String)">
      <summary>
            Executes an HTTP request to the provided URL and outputs an expected resource of the specified type using the GET HTTP method.
            </summary>
      <typeparam name="TOutput">The output resource object type.</typeparam>
      <param name="url">The URL.</param>
      <param name="outputType">The output resource type.</param>
      <param name="headers">A collection of HTTP headers to pass to the request.</param>
      <param name="xmlNamespace">An optional XML namespace.</param>
      <returns>A task resulting in an output resource.</returns>
      <exception cref="T:System.Web.HttpException">If an HTTP-level exception occurred.</exception>
      <exception cref="T:System.Net.WebException">If a non-HTTP level exception occurred.</exception>
      <exception cref="T:System.Net.ProtocolViolationException">If an unexpected protocol exception occurred.</exception>
      <exception cref="T:System.Security.SecurityException">If a security exception occurred.</exception>
      <exception cref="T:System.InvalidOperationException">If a resource object is not serializable.</exception>
    </member>
    <member name="M:RestFoundation.Client.IRestClient.HeadAsync(System.Uri)">
      <summary>
            Executes an HTTP request to the provided URL using the HEAD HTTP method.
            </summary>
      <param name="url">The URL.</param>
      <returns>A task resulting in an output resource without a body.</returns>
      <exception cref="T:System.Web.HttpException">If an HTTP-level exception occurred.</exception>
      <exception cref="T:System.Net.WebException">If a non-HTTP level exception occurred.</exception>
      <exception cref="T:System.Net.ProtocolViolationException">If an unexpected protocol exception occurred.</exception>
      <exception cref="T:System.Security.SecurityException">If a security exception occurred.</exception>
    </member>
    <member name="M:RestFoundation.Client.IRestClient.HeadAsync(System.Uri,System.Net.WebHeaderCollection)">
      <summary>
            Executes an HTTP request to the provided URL using the HEAD HTTP method.
            </summary>
      <param name="url">The URL.</param>
      <param name="headers">A collection of HTTP headers to pass to the request.</param>
      <returns>A task resulting in an output resource without a body.</returns>
      <exception cref="T:System.Web.HttpException">If an HTTP-level exception occurred.</exception>
      <exception cref="T:System.Net.WebException">If a non-HTTP level exception occurred.</exception>
      <exception cref="T:System.Net.ProtocolViolationException">If an unexpected protocol exception occurred.</exception>
      <exception cref="T:System.Security.SecurityException">If a security exception occurred.</exception>
    </member>
    <member name="M:RestFoundation.Client.IRestClient.HeadAsync(System.Uri,RestFoundation.Client.RestResourceType)">
      <summary>
            Executes an HTTP request to the provided URL using the HEAD HTTP method.
            </summary>
      <param name="url">The URL.</param>
      <param name="outputType">The output resource type.</param>
      <returns>A task resulting in an output resource without a body.</returns>
      <exception cref="T:System.Web.HttpException">If an HTTP-level exception occurred.</exception>
      <exception cref="T:System.Net.WebException">If a non-HTTP level exception occurred.</exception>
      <exception cref="T:System.Net.ProtocolViolationException">If an unexpected protocol exception occurred.</exception>
      <exception cref="T:System.Security.SecurityException">If a security exception occurred.</exception>
    </member>
    <member name="M:RestFoundation.Client.IRestClient.HeadAsync(System.Uri,RestFoundation.Client.RestResourceType,System.Net.WebHeaderCollection)">
      <summary>
            Executes an HTTP request to the provided URL using the HEAD HTTP method.
            </summary>
      <param name="url">The URL.</param>
      <param name="outputType">The output resource type.</param>
      <param name="headers">A collection of HTTP headers to pass to the request.</param>
      <returns>A task resulting in an output resource without a body.</returns>
      <exception cref="T:System.Web.HttpException">If an HTTP-level exception occurred.</exception>
      <exception cref="T:System.Net.WebException">If a non-HTTP level exception occurred.</exception>
      <exception cref="T:System.Net.ProtocolViolationException">If an unexpected protocol exception occurred.</exception>
      <exception cref="T:System.Security.SecurityException">If a security exception occurred.</exception>
    </member>
    <member name="M:RestFoundation.Client.IRestClient.HeadAsync(System.Uri,RestFoundation.Client.RestResourceType,System.Net.WebHeaderCollection,System.String)">
      <summary>
            Executes an HTTP request to the provided URL using the HEAD HTTP method.
            </summary>
      <param name="url">The URL.</param>
      <param name="outputType">The output resource type.</param>
      <param name="headers">A collection of HTTP headers to pass to the request.</param>
      <param name="xmlNamespace">An optional XML namespace.</param>
      <returns>A task resulting in an output resource without a body.</returns>
      <exception cref="T:System.Web.HttpException">If an HTTP-level exception occurred.</exception>
      <exception cref="T:System.Net.WebException">If a non-HTTP level exception occurred.</exception>
      <exception cref="T:System.Net.ProtocolViolationException">If an unexpected protocol exception occurred.</exception>
      <exception cref="T:System.Security.SecurityException">If a security exception occurred.</exception>
    </member>
    <member name="M:RestFoundation.Client.IRestClient.PostAsync``2(System.Uri,RestFoundation.Client.RestResource{``0})">
      <summary>
            Executes an HTTP request to the provided URL and outputs an expected resource of the specified type using the POST HTTP method.
            </summary>
      <typeparam name="TInput">The input resource object type.</typeparam>
      <typeparam name="TOutput">The output resource object type.</typeparam>
      <param name="url">The URL.</param>
      <param name="resource">The input resource.</param>
      <returns>A task resulting in an output resource.</returns>
      <exception cref="T:System.Web.HttpException">If an HTTP-level exception occurred.</exception>
      <exception cref="T:System.Net.WebException">If a non-HTTP level exception occurred.</exception>
      <exception cref="T:System.Net.ProtocolViolationException">If an unexpected protocol exception occurred.</exception>
      <exception cref="T:System.Security.SecurityException">If a security exception occurred.</exception>
      <exception cref="T:System.InvalidOperationException">If a resource object is not serializable.</exception>
      <exception cref="T:System.ArgumentException">If the resource body is null.</exception>
    </member>
    <member name="M:RestFoundation.Client.IRestClient.PostAsync``2(System.Uri,RestFoundation.Client.RestResource{``0},RestFoundation.Client.RestResourceType)">
      <summary>
            Executes an HTTP request to the provided URL and outputs an expected resource of the specified type using the POST HTTP method.
            </summary>
      <typeparam name="TInput">The input resource object type.</typeparam>
      <typeparam name="TOutput">The output resource object type.</typeparam>
      <param name="url">The URL.</param>
      <param name="resource">The input resource.</param>
      <param name="outputType">The output resource type.</param>
      <returns>A task resulting in an output resource.</returns>
      <exception cref="T:System.Web.HttpException">If an HTTP-level exception occurred.</exception>
      <exception cref="T:System.Net.WebException">If a non-HTTP level exception occurred.</exception>
      <exception cref="T:System.Net.ProtocolViolationException">If an unexpected protocol exception occurred.</exception>
      <exception cref="T:System.Security.SecurityException">If a security exception occurred.</exception>
      <exception cref="T:System.InvalidOperationException">If a resource object is not serializable.</exception>
      <exception cref="T:System.ArgumentException">If the resource body is null.</exception>
    </member>
    <member name="M:RestFoundation.Client.IRestClient.PutAsync``2(System.Uri,RestFoundation.Client.RestResource{``0})">
      <summary>
            Executes an HTTP request to the provided URL and outputs an expected resource of the specified type using the PUT HTTP method.
            </summary>
      <typeparam name="TInput">The input resource object type.</typeparam>
      <typeparam name="TOutput">The output resource object type.</typeparam>
      <param name="url">The URL.</param>
      <param name="resource">The input resource.</param>
      <returns>A task resulting in an output resource.</returns>
      <exception cref="T:System.Web.HttpException">If an HTTP-level exception occurred.</exception>
      <exception cref="T:System.Net.WebException">If a non-HTTP level exception occurred.</exception>
      <exception cref="T:System.Net.ProtocolViolationException">If an unexpected protocol exception occurred.</exception>
      <exception cref="T:System.Security.SecurityException">If a security exception occurred.</exception>
      <exception cref="T:System.InvalidOperationException">If a resource object is not serializable.</exception>
      <exception cref="T:System.ArgumentException">If the resource body is null.</exception>
    </member>
    <member name="M:RestFoundation.Client.IRestClient.PutAsync``2(System.Uri,RestFoundation.Client.RestResource{``0},RestFoundation.Client.RestResourceType)">
      <summary>
            Executes an HTTP request to the provided URL and outputs an expected resource of the specified type using the PUT HTTP method.
            </summary>
      <typeparam name="TInput">The input resource object type.</typeparam>
      <typeparam name="TOutput">The output resource object type.</typeparam>
      <param name="url">The URL.</param>
      <param name="resource">The input resource.</param>
      <param name="outputType">The output resource type.</param>
      <returns>A task resulting in an output resource.</returns>
      <exception cref="T:System.Web.HttpException">If an HTTP-level exception occurred.</exception>
      <exception cref="T:System.Net.WebException">If a non-HTTP level exception occurred.</exception>
      <exception cref="T:System.Net.ProtocolViolationException">If an unexpected protocol exception occurred.</exception>
      <exception cref="T:System.Security.SecurityException">If a security exception occurred.</exception>
      <exception cref="T:System.InvalidOperationException">If a resource object is not serializable.</exception>
      <exception cref="T:System.ArgumentException">If the resource body is null.</exception>
    </member>
    <member name="M:RestFoundation.Client.IRestClient.PatchAsync``2(System.Uri,RestFoundation.Client.RestResource{``0})">
      <summary>
            Executes an HTTP request to the provided URL and outputs an expected resource of the specified type using the PATCH HTTP method.
            </summary>
      <typeparam name="TInput">The input resource object type.</typeparam>
      <typeparam name="TOutput">The output resource object type.</typeparam>
      <param name="url">The URL.</param>
      <param name="resource">The input resource.</param>
      <returns>A task resulting in an output resource.</returns>
      <exception cref="T:System.Web.HttpException">If an HTTP-level exception occurred.</exception>
      <exception cref="T:System.Net.WebException">If a non-HTTP level exception occurred.</exception>
      <exception cref="T:System.Net.ProtocolViolationException">If an unexpected protocol exception occurred.</exception>
      <exception cref="T:System.Security.SecurityException">If a security exception occurred.</exception>
      <exception cref="T:System.InvalidOperationException">If a resource object is not serializable.</exception>
      <exception cref="T:System.ArgumentException">If the resource body is null.</exception>
    </member>
    <member name="M:RestFoundation.Client.IRestClient.PatchAsync``2(System.Uri,RestFoundation.Client.RestResource{``0},RestFoundation.Client.RestResourceType)">
      <summary>
            Executes an HTTP request to the provided URL and outputs an expected resource of the specified type using the PATCH HTTP method.
            </summary>
      <typeparam name="TInput">The input resource object type.</typeparam>
      <typeparam name="TOutput">The output resource object type.</typeparam>
      <param name="url">The URL.</param>
      <param name="resource">The input resource.</param>
      <param name="outputType">The output resource type.</param>
      <returns>A task resulting in an output resource.</returns>
      <exception cref="T:System.Web.HttpException">If an HTTP-level exception occurred.</exception>
      <exception cref="T:System.Net.WebException">If a non-HTTP level exception occurred.</exception>
      <exception cref="T:System.Net.ProtocolViolationException">If an unexpected protocol exception occurred.</exception>
      <exception cref="T:System.Security.SecurityException">If a security exception occurred.</exception>
      <exception cref="T:System.InvalidOperationException">If a resource object is not serializable.</exception>
      <exception cref="T:System.ArgumentException">If the resource body is null.</exception>
    </member>
    <member name="M:RestFoundation.Client.IRestClient.DeleteAsync(System.Uri)">
      <summary>
            Executes an HTTP request to the provided URL using the DELETE HTTP method.
            </summary>
      <param name="url">The URL.</param>
      <returns>A task resulting in an output resource without a body.</returns>
      <exception cref="T:System.Web.HttpException">If an HTTP-level exception occurred.</exception>
      <exception cref="T:System.Net.WebException">If a non-HTTP level exception occurred.</exception>
      <exception cref="T:System.Net.ProtocolViolationException">If an unexpected protocol exception occurred.</exception>
      <exception cref="T:System.Security.SecurityException">If a security exception occurred.</exception>
    </member>
    <member name="M:RestFoundation.Client.IRestClient.DeleteAsync(System.Uri,System.Net.WebHeaderCollection)">
      <summary>
            Executes an HTTP request to the provided URL using the DELETE HTTP method.
            </summary>
      <param name="url">The URL.</param>
      <param name="headers">A collection of HTTP headers to pass to the request.</param>
      <returns>A task resulting in an output resource without a body.</returns>
      <exception cref="T:System.Web.HttpException">If an HTTP-level exception occurred.</exception>
      <exception cref="T:System.Net.WebException">If a non-HTTP level exception occurred.</exception>
      <exception cref="T:System.Net.ProtocolViolationException">If an unexpected protocol exception occurred.</exception>
      <exception cref="T:System.Security.SecurityException">If a security exception occurred.</exception>
    </member>
    <member name="M:RestFoundation.Client.IRestClient.OptionsAsync(System.Uri)">
      <summary>
            Executes an HTTP request to the provided URL using the OPTIONS HTTP method.
            </summary>
      <param name="url">The URL.</param>
      <returns>A task resulting in a list of allowed HTTP methods.</returns>
      <exception cref="T:System.Web.HttpException">If an HTTP-level exception occurred.</exception>
      <exception cref="T:System.Net.WebException">If a non-HTTP level exception occurred.</exception>
      <exception cref="T:System.Net.ProtocolViolationException">If an unexpected protocol exception occurred.</exception>
      <exception cref="T:System.Security.SecurityException">If a security exception occurred.</exception>
    </member>
    <member name="P:RestFoundation.Client.IRestClient.PerformRedirects">
      <summary>
            Gets or sets a value indicating whether the request should perform redirects.
            </summary>
    </member>
    <member name="P:RestFoundation.Client.IRestClient.AllowCookies">
      <summary>
            Gets or sets a value indicating whether the request should allow cookies.
            </summary>
    </member>
    <member name="P:RestFoundation.Client.IRestClient.ProxyUrl">
      <summary>
            Gets or sets a proxy URL for inspecting HTTP requests and responses.
            </summary>
    </member>
    <member name="P:RestFoundation.Client.IRestClient.SupportsEncoding">
      <summary>
            Gets or sets a value indicating whether the client should support HTTP encoding.
            GZIP and Deflate compression algorithms are currently supported.
            </summary>
    </member>
    <member name="P:RestFoundation.Client.IRestClient.UseDefaultCredentials">
      <summary>
            Gets or sets a value indicating whether to use default authentication credentials.
            If set to to true, the <see cref="P:RestFoundation.Client.IRestClient.Credentials" /> and the <see cref="P:RestFoundation.Client.IRestClient.AuthenticationType" />
            properties will be ignored.
            </summary>
    </member>
    <member name="P:RestFoundation.Client.IRestClient.AuthenticationType">
      <summary>
            Gets or sets the authentication type.
            </summary>
    </member>
    <member name="P:RestFoundation.Client.IRestClient.Credentials">
      <summary>
            Gets or sets authentication credentials.
            </summary>
    </member>
    <member name="P:RestFoundation.Client.IRestClient.AllowSelfSignedCertificates">
      <summary>
            Gets or sets a value indicating whether self-signed certificates are allowed.
            </summary>
    </member>
    <member name="T:RestFoundation.Collections.Specialized.LinkCollection">
      <summary>
            A collection of Link header values.
            </summary>
    </member>
    <member name="M:RestFoundation.Collections.Specialized.LinkCollection.#ctor(System.Collections.Generic.IList{System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Collections.Specialized.LinkCollection" /> class.
            </summary>
      <param name="linkValues">A list of Link header values.</param>
    </member>
    <member name="M:RestFoundation.Collections.Specialized.LinkCollection.ToArray">
      <summary>
            Returns an array of <see cref="T:RestFoundation.Link" /> objects representing the Link header values.
            </summary>
      <returns>An array of <see cref="T:RestFoundation.Link" /> objects.</returns>
    </member>
    <member name="M:RestFoundation.Collections.Specialized.LinkCollection.ToList">
      <summary>
            Returns a list <see cref="T:RestFoundation.Link" /> objects representing the Link header values.
            </summary>
      <returns>A list of <see cref="T:RestFoundation.Link" /> objects.</returns>
    </member>
    <member name="M:RestFoundation.Collections.Specialized.LinkCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="T:RestFoundation.Configuration.DependencyBuilder">
      <summary>
            Represents a dependency builder for the default service locator.
            </summary>
    </member>
    <member name="M:RestFoundation.Configuration.DependencyBuilder.AllowPropertyInjection(System.Func{System.Type,System.Boolean})">
      <summary>
            Enables property injection for the types that match the predicate. The predicate should include
            contract and implementation classes.
            </summary>
      <remarks>
            Use the <code>type =&gt; true</code> delegate to allow property injection to all types. This is not
            recommended since it can make the classes brittle if new public properties are defined.
            </remarks>
      <param name="typePredicate">The type predicate.</param>
      <returns>The dependency builder.</returns>
    </member>
    <member name="M:RestFoundation.Configuration.DependencyBuilder.Register``2">
      <summary>
            Registers a service implementation for its contract with the per-instance lifetime.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <typeparam name="TImplementation">The service implementation type.</typeparam>
      <returns>The dependency builder.</returns>
      <exception cref="T:RestFoundation.ServiceLocation.ServiceActivationException">If there is a problem registering the service.</exception>
    </member>
    <member name="M:RestFoundation.Configuration.DependencyBuilder.Register``2(RestFoundation.InstanceLifetime)">
      <summary>
            Registers a service implementation for its contract with the provided lifetime.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <typeparam name="TImplementation">The service implementation type.</typeparam>
      <param name="lifetime">The instance lifetime.</param>
      <returns>The dependency builder.</returns>
      <exception cref="T:RestFoundation.ServiceLocation.ServiceActivationException">If there is a problem registering the service.</exception>
    </member>
    <member name="M:RestFoundation.Configuration.DependencyBuilder.Register(System.Type,System.Type)">
      <summary>
            Registers a service implementation for its contract with the per-instance lifetime.
            </summary>
      <param name="contractType">The service contract type.</param>
      <param name="implementationType">The service implementation type.</param>
      <returns>The dependency builder.</returns>
      <exception cref="T:RestFoundation.ServiceLocation.ServiceActivationException">If there is a problem registering the service.</exception>
    </member>
    <member name="M:RestFoundation.Configuration.DependencyBuilder.Register(System.Type,System.Type,RestFoundation.InstanceLifetime)">
      <summary>
            Registers a service implementation for its contract with the provided lifetime.
            </summary>
      <param name="contractType">The service contract type.</param>
      <param name="implementationType">The service implementation type.</param>
      <param name="lifetime">The instance lifetime.</param>
      <returns>The dependency builder.</returns>
      <exception cref="T:RestFoundation.ServiceLocation.ServiceActivationException">If there is a problem registering the service.</exception>
    </member>
    <member name="M:RestFoundation.Configuration.DependencyBuilder.Register``1(``0)">
      <summary>
            Registers a specific service implementation instance to its contract with the per-instance lifetime.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <param name="instance">The service instance.</param>
      <returns>The dependency builder.</returns>
      <exception cref="T:RestFoundation.ServiceLocation.ServiceActivationException">If there is a problem registering the service.</exception>
    </member>
    <member name="M:RestFoundation.Configuration.DependencyBuilder.Register(System.Type,System.Object)">
      <summary>
            Registers a specific service implementation instance to its contract with the per-instance lifetime.
            </summary>
      <param name="contractType">The service contract type.</param>
      <param name="instance">The service instance.</param>
      <returns>The dependency builder.</returns>
      <exception cref="T:RestFoundation.ServiceLocation.ServiceActivationException">If there is a problem registering the service.</exception>
    </member>
    <member name="M:RestFoundation.Configuration.DependencyBuilder.ScanAssemblies(System.Reflection.Assembly[])">
      <summary>
            Scans the provided assemblies and registers the inner service implementations to their contracts.
            </summary>
      <param name="assemblies">An array of assemblies to scan.</param>
      <returns>The dependency builder.</returns>
      <exception cref="T:RestFoundation.ServiceLocation.ServiceActivationException">If there is a problem registering the service.</exception>
    </member>
    <member name="M:RestFoundation.Configuration.DependencyBuilder.ScanAssemblies(System.Reflection.Assembly[],System.Func{System.Type,System.Boolean})">
      <summary>
            Scans the provided assemblies and registers the inner service implementations to their contracts.
            The registration predicate must account for both, service contracts and implementations.
            </summary>
      <param name="assemblies">An array of assemblies to scan.</param>
      <param name="registrationPredicate">The registration predicate.</param>
      <returns>The dependency builder.</returns>
      <exception cref="T:RestFoundation.ServiceLocation.ServiceActivationException">If there is a problem registering the service.</exception>
    </member>
    <member name="M:RestFoundation.Configuration.DependencyBuilder.ScanAssemblies(System.String[])">
      <summary>
            Scans assemblies with the provided names and registers the inner service implementations to their contracts.
            </summary>
      <param name="assemblyNames">An array of assembly names to scan.</param>
      <returns>The dependency builder.</returns>
      <exception cref="T:RestFoundation.ServiceLocation.ServiceActivationException">If there is a problem registering the service.</exception>
      <exception cref="T:System.IO.FileNotFoundException">An assembly specified in <paramref name="assemblyNames" /> is not found.</exception>
      <exception cref="T:System.BadImageFormatException">An assembly specified in <paramref name="assemblyNames" /> is not a valid assembly.</exception>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain.</exception>
      <exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences.</exception>
    </member>
    <member name="M:RestFoundation.Configuration.DependencyBuilder.ScanAssemblies(System.String[],System.Func{System.Type,System.Boolean})">
      <summary>
            Scans assemblies with the provided names and registers the inner service implementations to their contracts.
            The registration predicate must account for both, service contracts and implementations.
            </summary>
      <param name="assemblyNames">An array of assembly names to scan.</param>
      <param name="registrationPredicate">The registration predicate.</param>
      <returns>The dependency builder.</returns>
      <exception cref="T:RestFoundation.ServiceLocation.ServiceActivationException">If there is a problem registering the service.</exception>
      <exception cref="T:System.IO.FileNotFoundException">An assembly specified in <paramref name="assemblyNames" /> is not found.</exception>
      <exception cref="T:System.BadImageFormatException">An assembly specified in <paramref name="assemblyNames" /> is not a valid assembly.</exception>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain.</exception>
      <exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences.</exception>
    </member>
    <member name="T:RestFoundation.Configuration.FaultDetail">
      <summary>
            Defines the detail of information returned in the fault collection object during an
            unhandled service exception.
            </summary>
    </member>
    <member name="F:RestFoundation.Configuration.FaultDetail.MessageOnly">
      <summary>
            Only the exception message is returned.
            </summary>
    </member>
    <member name="F:RestFoundation.Configuration.FaultDetail.DetailedInDebugMode">
      <summary>
            The exception message and the stack trace are returned in the debug mode.
            Only the exception message is returned in the release mode.
            This is the default setting.
            </summary>
    </member>
    <member name="F:RestFoundation.Configuration.FaultDetail.Detailed">
      <summary>
            The exception message and the stack trace are always returned.
            </summary>
    </member>
    <member name="T:RestFoundation.Context.HttpResponseExtensions">
      <summary>
            Contains <see cref="T:RestFoundation.IHttpResponse" /> extensions.
            </summary>
    </member>
    <member name="M:RestFoundation.Context.HttpResponseExtensions.CreateCancellationToken(RestFoundation.IHttpResponse)">
      <summary>
            Creates a <see cref="T:System.Threading.CancellationToken" /> for the HTTP response. If the response
            already has an associated <see cref="T:System.Threading.CancellationTokenSource" />, the existing
            <see cref="T:System.Threading.CancellationToken" /> will be returned.
            </summary>
      <param name="response">The <see cref="T:RestFoundation.IHttpResponse" /> instance.</param>
      <returns>The associated cancellation token.</returns>
    </member>
    <member name="M:RestFoundation.Context.HttpResponseExtensions.GetCancellationToken(RestFoundation.IHttpResponse)">
      <summary>
            Returns a <see cref="T:System.Threading.CancellationToken" /> associated with the HTTP response.
            </summary>
      <param name="response">The <see cref="T:RestFoundation.IHttpResponse" /> instance.</param>
      <returns>The associated cancellation token.</returns>
    </member>
    <member name="T:RestFoundation.Formatters.SupportedMediaTypeAttribute">
      <summary>
            Represents a supported media type for a media type formatter.
            </summary>
    </member>
    <member name="M:RestFoundation.Formatters.SupportedMediaTypeAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Formatters.SupportedMediaTypeAttribute" /> class.
            </summary>
      <param name="mediaType">The media type.</param>
    </member>
    <member name="P:RestFoundation.Formatters.SupportedMediaTypeAttribute.MediaType">
      <summary>
            Gets the media type.
            </summary>
    </member>
    <member name="P:RestFoundation.Formatters.SupportedMediaTypeAttribute.Priority">
      <summary>
            Gets or sets the priority value to resolve media types that match wildcards specified
            in the Accept HTTP header. Matching media types with the highest priority will be used.
            </summary>
    </member>
    <member name="T:RestFoundation.ILogWriter">
      <summary>
            Defines a log writer for the services.
            </summary>
    </member>
    <member name="M:RestFoundation.ILogWriter.WriteDebug(System.String)">
      <summary>
            Writes a debug message into the log buffer.
            The implementation should add a line break at the end of the message.
            </summary>
      <param name="debug">The debug message.</param>
      <returns>The log writer instance.</returns>
    </member>
    <member name="M:RestFoundation.ILogWriter.WriteError(System.String)">
      <summary>
            Writes an error message into the log buffer.
            The implementation should add a line break at the end of the message.
            </summary>
      <param name="error">The error message.</param>
      <returns>The log writer instance.</returns>
    </member>
    <member name="M:RestFoundation.ILogWriter.WriteInfo(System.String)">
      <summary>
            Writes an information message into the log buffer.
            The implementation should add a line break at the end of the message.
            </summary>
      <param name="info">The information message.</param>
      <returns>The log writer instance.</returns>
    </member>
    <member name="M:RestFoundation.ILogWriter.WriteWarning(System.String)">
      <summary>
            Writes a warning message into the log buffer.
            The implementation should add a line break at the end of the message.
            </summary>
      <param name="warning">The warning message.</param>
      <returns>The log writer instance.</returns>
    </member>
    <member name="M:RestFoundation.ILogWriter.Flush">
      <summary>
            Flushes the log buffer.
            </summary>
    </member>
    <member name="M:RestFoundation.ILogWriter.FlushAsync">
      <summary>
            Flushes the log buffer asynchronously. The synchronous <see cref="M:RestFoundation.ILogWriter.Flush" />
            method must also be implemented for the REST Foundation HTTP module to work correctly.
            </summary>
      <returns>The task that flashes the log buffer.</returns>
      <exception cref="T:System.NotSupportedException">
            If the logger's <see cref="P:RestFoundation.ILogWriter.SupportsAsyncFlush" /> property is set to false.
            </exception>
    </member>
    <member name="P:RestFoundation.ILogWriter.LogGeneratedInfo">
      <summary>
            Gets a value indicating whether to log messages automatically generated
            by the REST foundation.
            </summary>
    </member>
    <member name="P:RestFoundation.ILogWriter.SupportsAsyncFlush">
      <summary>
            Gets a value indicating whether the log writer supports the <see cref="M:RestFoundation.ILogWriter.FlushAsync" />
            operation.
            </summary>
    </member>
    <member name="T:RestFoundation.InstanceLifetime">
      <summary>
            Defines a dependency instance lifetime for the default service locator.
            </summary>
    </member>
    <member name="F:RestFoundation.InstanceLifetime.PerInstance">
      <summary>
            A new instance is created every time the dependency is requested.
            </summary>
    </member>
    <member name="F:RestFoundation.InstanceLifetime.PerHttpContext">
      <summary>
            A single instance is created per HTTP context.
            </summary>
    </member>
    <member name="F:RestFoundation.InstanceLifetime.Singleton">
      <summary>
            A single instance is used every time the dependency is requested.
            </summary>
    </member>
    <member name="T:RestFoundation.IServiceFactory">
      <summary>
            Defines a service factory.
            </summary>
    </member>
    <member name="M:RestFoundation.IServiceFactory.Create(System.Type)">
      <summary>
            Creates a service implementation instance.
            </summary>
      <param name="serviceContractType">A service contract type.</param>
      <returns>The created service instance.</returns>
    </member>
    <member name="T:RestFoundation.Configuration.JsonFormatterSettings">
      <summary>
            Contains settings used by JSON formatters and results.
            </summary>
    </member>
    <member name="M:RestFoundation.Configuration.JsonFormatterSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Configuration.JsonFormatterSettings" /> class.
            </summary>
    </member>
    <member name="P:RestFoundation.Configuration.JsonFormatterSettings.MaxDepth">
      <summary>
            Gets or sets an optional maximum depth of the object graph.
            </summary>
    </member>
    <member name="P:RestFoundation.Configuration.JsonFormatterSettings.IncludeNullValues">
      <summary>
            Gets or sets a value indicating that properties with null values must be serialized.
            This property is set to false by default.
            </summary>
    </member>
    <member name="P:RestFoundation.Configuration.JsonFormatterSettings.LowerPropertiesForAjax">
      <summary>
            Gets or sets a value indicating that properties should be in lower case for AJAX
            requests.
            </summary>
    </member>
    <member name="P:RestFoundation.Configuration.JsonFormatterSettings.UseLocalTimeZone">
      <summary>
            Gets or sets a value indicating that dates must be serialized in the local server
            timezone instead of UTC. This property is set to true by default.
            </summary>
    </member>
    <member name="P:RestFoundation.Configuration.JsonFormatterSettings.UseMicrosoftStyleDates">
      <summary>
            Gets or sets a value indicating that dates must be serialized in Microsoft format
            instead of the ISO 8601 format. This property is set to false by default.
            </summary>
    </member>
    <member name="P:RestFoundation.Configuration.JsonFormatterSettings.WrapContentResponse">
      <summary>
            Gets or sets a value indicating whether to wrap a JSON response.
            </summary>
    </member>
    <member name="T:RestFoundation.LinkRelationValues">
      <summary>
            Defines most commonly used link "rel" element values.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.About">
      <summary>
            Refers to a resource that is the subject of the link's context.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.Alternate">
      <summary>
            Refers to a substitute for this context.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.Appendix">
      <summary>
            Refers to an appendix.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.Archives">
      <summary>
            Refers to a collection of records, documents, or other materials of historical interest.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.Author">
      <summary>
            Refers to the context's author.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.Bookmark">
      <summary>
            Gives a permanent link to use for bookmarking purposes.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.Canonical">
      <summary>
            Designates the preferred version of a resource (the URI and its contents).
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.Collection">
      <summary>
            The target URI points to a resource which represents the collection resource for the context URI.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.Contents">
      <summary>
            Refers to a table of contents.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.Copyright">
      <summary>
            Refers to a copyright statement that applies to the link's context.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.Current">
      <summary>
            Refers to a resource containing the most recent item(s) in a collection of resources.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.DescribedBy">
      <summary>
            Refers to a resource providing information about the link's context.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.Describes">
      <summary>
            The relationship A 'describes' B asserts that resource A provides a description of resource B.
            There are no constraints on the format or representation of either A or B, neither are there any
            further constraints on either resource.
            This link relation type is intended to be the inverse of the already existing 'describedby' relation
            type, thus allowing links to be established from the describing resource to the described resource.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.Edit">
      <summary>
            Refers to a resource that can be used to edit the link's context.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.First">
      <summary>
            An URI that refers to the furthest preceding resource in a series of resources.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.Glossary">
      <summary>
            Refers to a glossary of terms.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.Help">
      <summary>
            Refers to context-sensitive help.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.Icon">
      <summary>
            Refers to an icon representing the link's context.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.Index">
      <summary>
            Refers to an index.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.Item">
      <summary>
            The target URI points to a resource that is a member of the collection represented by the context URI.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.Last">
      <summary>
            An IRI that refers to the furthest following resource in a series of resources.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.LatestVersion">
      <summary>
            Points to a resource containing the latest (e.g., current) version of the context.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.License">
      <summary>
            Refers to a license associated with this context.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.Monitor">
      <summary>
            Refers to a resource that can be used to monitor changes in an HTTP resource.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.Next">
      <summary>
            Indicates that the link's context is a part of a series, and that the next in the series is the link target.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.NextArchive">
      <summary>
            Refers to the immediately following archive resource.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.NoFollow">
      <summary>
            Indicates that the context’s original author or publisher does not endorse the link target.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.NoReferrer">
      <summary>
            Indicates that no referrer information is to be leaked when following the link.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.Payment">
      <summary>
            Indicates a resource where payment is accepted.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.PreFetch">
      <summary>
            Indicates that the link target should be preemptively cached.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.Preview">
      <summary>
            Refers to a resource that provides a preview of the link's context.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.Previous">
      <summary>
            Indicates that the link's context is a part of a series, and that the previous in the series is the link target.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.PreviousArchive">
      <summary>
            Refers to the immediately preceding archive resource.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.PrivacyPolicy">
      <summary>
            Refers to a Privacy Policy associated with the link's context.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.Profile">
      <summary>
            Identifying that a resource representation conforms to a certain profile, without affecting the non-profile
            semantics of the resource representation.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.Related">
      <summary>
            Identifies a related resource.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.Search">
      <summary>
            Refers to a resource that can be used to search through the link's context and related resources.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.Section">
      <summary>
            Refers to a section in a collection of resources.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.Self">
      <summary>
            Conveys an identifier for the link's context.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.Service">
      <summary>
            Indicates a URI that can be used to retrieve a service document.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.Start">
      <summary>
            Refers to the first resource in a collection of resources.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.StyleSheet">
      <summary>
            Refers to a stylesheet.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.SubSection">
      <summary>
            Refers to a resource serving as a subsection in a collection of resources.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.Tag">
      <summary>
            Gives a tag (identified by the given address) that applies to the current document.   
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.TermsOfService">
      <summary>
            Refers to the Terms of Service associated with the link's context.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.Type">
      <summary>
            Refers to a resource identifying the abstract semantic type the link's context is considered to be an instance of.
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.Up">
      <summary>
            Refers to a parent document in a hierarchy of documents.   
            </summary>
    </member>
    <member name="F:RestFoundation.LinkRelationValues.Via">
      <summary>
            Identifies a resource that is the source of the information in the link's context.   
            </summary>
    </member>
    <member name="T:RestFoundation.LogWriterExtensions">
      <summary>
            Contains <see cref="T:RestFoundation.ILogWriter" /> extensions.
            </summary>
    </member>
    <member name="M:RestFoundation.LogWriterExtensions.WriteDebugIf(RestFoundation.ILogWriter,System.Boolean,System.String)">
      <summary>
            Writes a debug message into the log buffer if the provided <paramref name="condition" />
            evaluates to true.
            </summary>
      <param name="writer">The log writer.</param>
      <param name="condition">The condition to evaluate.</param>
      <param name="debug">The debug message.</param>
      <returns>The log writer instance.</returns>
    </member>
    <member name="M:RestFoundation.LogWriterExtensions.WriteErrorIf(RestFoundation.ILogWriter,System.Boolean,System.String)">
      <summary>
            Writes an error message into the log buffer if the provided <paramref name="condition" />
            evaluates to true.
            </summary>
      <param name="writer">The log writer.</param>
      <param name="condition">The condition to evaluate.</param>
      <param name="error">The error message.</param>
      <returns>The log writer instance.</returns>
    </member>
    <member name="M:RestFoundation.LogWriterExtensions.WriteInfoIf(RestFoundation.ILogWriter,System.Boolean,System.String)">
      <summary>
            Writes an info message into the log buffer if the provided <paramref name="condition" />
            evaluates to true.
            </summary>
      <param name="writer">The log writer.</param>
      <param name="condition">The condition to evaluate.</param>
      <param name="info">The info message.</param>
      <returns>The log writer instance.</returns>
    </member>
    <member name="M:RestFoundation.LogWriterExtensions.WriteWarningIf(RestFoundation.ILogWriter,System.Boolean,System.String)">
      <summary>
            Writes a warning message into the log buffer if the provided <paramref name="condition" />
            evaluates to true.
            </summary>
      <param name="writer">The log writer.</param>
      <param name="condition">The condition to evaluate.</param>
      <param name="warning">The warning message.</param>
      <returns>The log writer instance.</returns>
    </member>
    <member name="M:RestFoundation.LogWriterExtensions.WriteDebugFormat(RestFoundation.ILogWriter,System.String,System.Object[])">
      <summary>
            Writes a debug message generated from the <paramref name="format" /> string and the provided arguments.
            </summary>
      <param name="writer">The log writer.</param>
      <param name="format">The format string.</param>
      <param name="args">The format arguments.</param>
      <returns>The log writer instance.</returns>
      <exception cref="T:System.FormatException">
            If the <paramref name="format" /> string does not match the arguments.
            </exception>
    </member>
    <member name="M:RestFoundation.LogWriterExtensions.WriteDebugFormat(RestFoundation.ILogWriter,System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Writes a debug message generated from the <paramref name="format" /> string and the provided arguments.
            </summary>
      <param name="writer">The log writer.</param>
      <param name="provider">The format provider.</param>
      <param name="format">The format string.</param>
      <param name="args">The format arguments.</param>
      <returns>The log writer instance.</returns>
      <exception cref="T:System.FormatException">
            If the <paramref name="format" /> string does not match the arguments.
            </exception>
    </member>
    <member name="M:RestFoundation.LogWriterExtensions.WriteErrorFormat(RestFoundation.ILogWriter,System.String,System.Object[])">
      <summary>
            Writes an error message generated from the <paramref name="format" /> string and the provided arguments.
            </summary>
      <param name="writer">The log writer.</param>
      <param name="format">The format string.</param>
      <param name="args">The format arguments.</param>
      <returns>The log writer instance.</returns>
      <exception cref="T:System.FormatException">
            If the <paramref name="format" /> string does not match the arguments.
            </exception>
    </member>
    <member name="M:RestFoundation.LogWriterExtensions.WriteErrorFormat(RestFoundation.ILogWriter,System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Writes an error message generated from the <paramref name="format" /> string and the provided arguments.
            </summary>
      <param name="writer">The log writer.</param>
      <param name="provider">The format provider.</param>
      <param name="format">The format string.</param>
      <param name="args">The format arguments.</param>
      <returns>The log writer instance.</returns>
      <exception cref="T:System.FormatException">
            If the <paramref name="format" /> string does not match the arguments.
            </exception>
    </member>
    <member name="M:RestFoundation.LogWriterExtensions.WriteInfoFormat(RestFoundation.ILogWriter,System.String,System.Object[])">
      <summary>
            Writes an info message generated from the <paramref name="format" /> string and the provided arguments.
            </summary>
      <param name="writer">The log writer.</param>
      <param name="format">The format string.</param>
      <param name="args">The format arguments.</param>
      <returns>The log writer instance.</returns>
      <exception cref="T:System.FormatException">
            If the <paramref name="format" /> string does not match the arguments.
            </exception>
    </member>
    <member name="M:RestFoundation.LogWriterExtensions.WriteInfoFormat(RestFoundation.ILogWriter,System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Writes an info message generated from the <paramref name="format" /> string and the provided arguments.
            </summary>
      <param name="writer">The log writer.</param>
      <param name="provider">The format provider.</param>
      <param name="format">The format string.</param>
      <param name="args">The format arguments.</param>
      <returns>The log writer instance.</returns>
      <exception cref="T:System.FormatException">
            If the <paramref name="format" /> string does not match the arguments.
            </exception>
    </member>
    <member name="M:RestFoundation.LogWriterExtensions.WriteWarningFormat(RestFoundation.ILogWriter,System.String,System.Object[])">
      <summary>
            Writes a warning message generated from the <paramref name="format" /> string and the provided arguments.
            </summary>
      <param name="writer">The log writer.</param>
      <param name="format">The format string.</param>
      <param name="args">The format arguments.</param>
      <returns>The log writer instance.</returns>
      <exception cref="T:System.FormatException">
            If the <paramref name="format" /> string does not match the arguments.
            </exception>
    </member>
    <member name="M:RestFoundation.LogWriterExtensions.WriteWarningFormat(RestFoundation.ILogWriter,System.IFormatProvider,System.String,System.Object[])">
      <summary>
            Writes a warning message generated from the <paramref name="format" /> string and the provided arguments.
            </summary>
      <param name="writer">The log writer.</param>
      <param name="provider">The format provider.</param>
      <param name="format">The format string.</param>
      <param name="args">The format arguments.</param>
      <returns>The log writer instance.</returns>
      <exception cref="T:System.FormatException">
            If the <paramref name="format" /> string does not match the arguments.
            </exception>
    </member>
    <member name="T:RestFoundation.ParameterConstraints">
      <summary>
            Contains common parameter constaints.
            </summary>
    </member>
    <member name="F:RestFoundation.ParameterConstraints.AnyInteger">
      <summary>
            Represents any integer number up to 7 digits.
            </summary>
    </member>
    <member name="F:RestFoundation.ParameterConstraints.UnsignedInteger">
      <summary>
            Represents a non-negative integer number up to 7 digits.
            </summary>
    </member>
    <member name="F:RestFoundation.ParameterConstraints.AnyNumber">
      <summary>
            Represents any decimal/floating point number.
            </summary>
    </member>
    <member name="F:RestFoundation.ParameterConstraints.UnsignedNumber">
      <summary>
            Represents a non-negative decimal/floating point number.
            </summary>
    </member>
    <member name="F:RestFoundation.ParameterConstraints.Boolean">
      <summary>
            Represents a boolean true/false value.
            </summary>
    </member>
    <member name="F:RestFoundation.ParameterConstraints.Guid">
      <summary>
            Represents a GUID value.
            </summary>
    </member>
    <member name="T:RestFoundation.Results.IODataProvider">
      <summary>
            Defines an OData provider for <see cref="T:System.Linq.IQueryable`1" /> collection
            results.
            </summary>
    </member>
    <member name="M:RestFoundation.Results.IODataProvider.PerformQuery(System.Linq.IQueryable,System.Collections.Specialized.NameValueCollection)">
      <summary>
            Performs a query on a collection and returns the resulting collection of
            objects.
            </summary>
      <param name="collection">The collection to perform the query on.</param>
      <param name="queryString">
            A <see cref="T:System.Collections.Specialized.NameValueCollection" /> containing the HTTP request query string parameters.
            </param>
      <returns>The resulting collection.</returns>
    </member>
    <member name="T:RestFoundation.Results.IResult">
      <summary>
            Defines a service method result.
            </summary>
    </member>
    <member name="M:RestFoundation.Results.IResult.Execute(RestFoundation.IServiceContext)">
      <summary>
            Executes the result against the provided service context.
            </summary>
      <param name="context">The service context.</param>
    </member>
    <member name="T:RestFoundation.Results.IResultAsync">
      <summary>
            Defines an asynchronous service method result.
            </summary>
    </member>
    <member name="M:RestFoundation.Results.IResultAsync.Execute(RestFoundation.IServiceContext)">
      <summary>
            Executes the result against the provided service synchronously.
            Asynchronous method should throw a <see cref="T:System.NotSupportedException" /> and implement
            the <see cref="M:RestFoundation.Results.IResultAsync.ExecuteAsync(RestFoundation.IServiceContext)" /> method instead.
            </summary>
      <param name="context">The service context.</param>
      <exception cref="T:System.NotSupportedException">
            When called from a service method result that implements the <see cref="T:RestFoundation.Results.IResultAsync" />
            interface.
            </exception>
    </member>
    <member name="M:RestFoundation.Results.IResultAsync.ExecuteAsync(RestFoundation.IServiceContext)">
      <summary>
            Executes the result against the provided service context asynchronously.
            </summary>
      <param name="context">The service context.</param>
      <returns>A task executing the result.</returns>
    </member>
    <member name="T:RestFoundation.Results.ResponseResult">
      <summary>
            Represents a result with a custom response action.
            </summary>
    </member>
    <member name="M:RestFoundation.Results.ResponseResult.#ctor(System.Action{RestFoundation.IServiceContext})">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Results.ResponseResult" /> class.
            </summary>
      <param name="responseAction">The response action.</param>
    </member>
    <member name="M:RestFoundation.Results.ResponseResult.Execute(RestFoundation.IServiceContext)">
      <summary>
            Executes the result against the provided service context.
            </summary>
      <param name="context">The service context.</param>
    </member>
    <member name="T:RestFoundation.RouteHash">
      <summary>
            Represents a route value dictionary in a hash format.
            </summary>
    </member>
    <member name="M:RestFoundation.RouteHash.#ctor(System.Func{System.Object,System.Object}[])">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.RouteHash" /> class.
            </summary>
      <param name="values">A sequence of key-value pairs represented by lambda expressions.</param>
    </member>
    <member name="M:RestFoundation.RouteHash.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.RouteHash" /> class.
            </summary>
      <param name="valueDictionary">A dictionary of route values.</param>
    </member>
    <member name="T:RestFoundation.Runtime.ConsoleLogWriter">
      <summary>
            Represents a log writer that writes messages into the <see cref="T:System.Console" /> output.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.ConsoleLogWriter.WriteDebug(System.String)">
      <summary>
            Writes a debug message into the log buffer.
            </summary>
      <param name="debug">A debug message.</param>
      <returns>The log writer instance.</returns>
    </member>
    <member name="M:RestFoundation.Runtime.ConsoleLogWriter.WriteError(System.String)">
      <summary>
            Writes an error message into the log buffer.
            </summary>
      <param name="error">An error message.</param>
      <returns>The log writer instance.</returns>
    </member>
    <member name="M:RestFoundation.Runtime.ConsoleLogWriter.WriteInfo(System.String)">
      <summary>
            Writes an information message into the log buffer.
            </summary>
      <param name="info">An information message.</param>
      <returns>The log writer instance.</returns>
    </member>
    <member name="M:RestFoundation.Runtime.ConsoleLogWriter.WriteWarning(System.String)">
      <summary>
            Writes a warning message into the log buffer.
            The implementation should add a line break at the end of the message.
            </summary>
      <param name="warning">A warning message.</param>
      <returns>The log writer instance.</returns>
    </member>
    <member name="M:RestFoundation.Runtime.ConsoleLogWriter.Flush">
      <summary>
            Flushes the log buffer.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.ConsoleLogWriter.FlushAsync">
      <summary>
            Flushes the log buffer asynchronously.
            </summary>
      <returns>The task that flashes the log buffer.</returns>
      <exception cref="T:System.NotSupportedException">
            If the logger's <see cref="P:RestFoundation.ILogWriter.SupportsAsyncFlush" /> property is set to false.
            </exception>
    </member>
    <member name="P:RestFoundation.Runtime.ConsoleLogWriter.LogGeneratedInfo">
      <summary>
            Gets a value indicating whether to log messages automatically generated
            by the REST foundation.
            </summary>
    </member>
    <member name="P:RestFoundation.Runtime.ConsoleLogWriter.SupportsAsyncFlush">
      <summary>
            Gets a value indicating whether the log writer supports the <see cref="M:RestFoundation.ILogWriter.FlushAsync" />
            operation.
            </summary>
    </member>
    <member name="T:RestFoundation.Runtime.DebugLogWriter">
      <summary>
            Represents a log writer that writes messages into the <see cref="T:System.Diagnostics.Debug" /> output.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.DebugLogWriter.WriteDebug(System.String)">
      <summary>
            Writes a debug message into the log buffer.
            </summary>
      <param name="debug">A debug message.</param>
      <returns>The log writer instance.</returns>
    </member>
    <member name="M:RestFoundation.Runtime.DebugLogWriter.WriteError(System.String)">
      <summary>
            Writes an error message into the log buffer.
            </summary>
      <param name="error">An error message.</param>
      <returns>The log writer instance.</returns>
    </member>
    <member name="M:RestFoundation.Runtime.DebugLogWriter.WriteInfo(System.String)">
      <summary>
            Writes an information message into the log buffer.
            </summary>
      <param name="info">An information message.</param>
      <returns>The log writer instance.</returns>
    </member>
    <member name="M:RestFoundation.Runtime.DebugLogWriter.WriteWarning(System.String)">
      <summary>
            Writes a warning message into the log buffer.
            The implementation should add a line break at the end of the message.
            </summary>
      <param name="warning">A warning message.</param>
      <returns>The log writer instance.</returns>
    </member>
    <member name="M:RestFoundation.Runtime.DebugLogWriter.Flush">
      <summary>
            Flushes the log buffer.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.DebugLogWriter.FlushAsync">
      <summary>
            Flushes the log buffer asynchronously.
            </summary>
      <returns>The task that flashes the log buffer.</returns>
      <exception cref="T:System.NotSupportedException">
            If the logger's <see cref="P:RestFoundation.ILogWriter.SupportsAsyncFlush" /> property is set to false.
            </exception>
    </member>
    <member name="P:RestFoundation.Runtime.DebugLogWriter.LogGeneratedInfo">
      <summary>
            Gets a value indicating whether to log messages automatically generated
            by the REST foundation.
            </summary>
    </member>
    <member name="P:RestFoundation.Runtime.DebugLogWriter.SupportsAsyncFlush">
      <summary>
            Gets a value indicating whether the log writer supports the <see cref="M:RestFoundation.ILogWriter.FlushAsync" />
            operation.
            </summary>
    </member>
    <member name="T:RestFoundation.Runtime.DefaultODataProvider">
      <summary>
            Represents the default OData provider for <see cref="T:System.Linq.IQueryable`T" /> collection
            results.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.DefaultODataProvider.PerformQuery(System.Linq.IQueryable,System.Collections.Specialized.NameValueCollection)">
      <summary>
            Performs a query on a collection and returns the resulting collection of
            objects.
            </summary>
      <param name="collection">The collection to perform the query on.</param>
      <param name="queryString">
            A <see cref="T:System.Collections.Specialized.NameValueCollection" /> containing the HTTP request query string parameters.
            </param>
      <returns>The resulting collection.</returns>
    </member>
    <member name="T:RestFoundation.Runtime.Fault">
      <summary>
            Represents a general or a resource fault.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.Fault.GetSchema">
      <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface, you should return
            null (Nothing in Visual Basic) from this method, and instead, if specifying a custom schema is required, apply the
            <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" /> to the class.
            </summary>
      <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object that is produced
            by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> method and consumed
            by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" /> method.
            </returns>
    </member>
    <member name="M:RestFoundation.Runtime.Fault.ReadXml(System.Xml.XmlReader)">
      <summary>
            Generates an object from its XML representation.
            </summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is deserialized.</param>
    </member>
    <member name="M:RestFoundation.Runtime.Fault.WriteXml(System.Xml.XmlWriter)">
      <summary>
            Converts an object into its XML representation.
            </summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is serialized.</param>
    </member>
    <member name="P:RestFoundation.Runtime.Fault.PropertyName">
      <summary>
            Gets or sets the property name.
            </summary>
    </member>
    <member name="P:RestFoundation.Runtime.Fault.Message">
      <summary>
            Gets or sets the fault message.
            </summary>
    </member>
    <member name="P:RestFoundation.Runtime.Fault.Detail">
      <summary>
            Gets or sets the fault details.
            </summary>
    </member>
    <member name="T:RestFoundation.Runtime.FaultCollection">
      <summary>
            Represents a fault collection.
            </summary>
    </member>
    <member name="P:RestFoundation.Runtime.FaultCollection.General">
      <summary>
            Gets or sets an array of general faults.
            </summary>
    </member>
    <member name="P:RestFoundation.Runtime.FaultCollection.Resource">
      <summary>
            Gets or sets an array of resource faults.
            </summary>
    </member>
    <member name="T:RestFoundation.Runtime.Handlers.IServiceContextHandler">
      <summary>
            Defines a service context dependent handler.
            </summary>
    </member>
    <member name="P:RestFoundation.Runtime.Handlers.IServiceContextHandler.Context">
      <summary>
            Gets the service context.
            </summary>
    </member>
    <member name="T:RestFoundation.Runtime.Handlers.IRestServiceHandler">
      <summary>
            Defines a REST service handler.
            </summary>
    </member>
    <member name="P:RestFoundation.Runtime.Handlers.IRestServiceHandler.ServiceContractTypeName">
      <summary>
            Gets a fully qualified name of the interface type defining the service contract.
            </summary>
    </member>
    <member name="P:RestFoundation.Runtime.Handlers.IRestServiceHandler.ServiceUrl">
      <summary>
            Gets the service URL.
            </summary>
    </member>
    <member name="P:RestFoundation.Runtime.Handlers.IRestServiceHandler.UrlTemplate">
      <summary>
            Gets a relative URL template.
            </summary>
    </member>
    <member name="P:RestFoundation.Runtime.Handlers.IRestServiceHandler.ServiceAsyncTimeout">
      <summary>
            Gets or sets a value representing a timeout for an asynchronous task returned by a
            service method. Setting the value to <see cref="F:System.TimeSpan.Zero" /> indicates no timeout.
            </summary>
    </member>
    <member name="T:RestFoundation.Runtime.Handlers.RestServiceHandler">
      <summary>
            Represents a REST service handler implementation.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.Handlers.RestServiceHandler.#ctor(RestFoundation.IServiceContext,RestFoundation.IServiceMethodLocator,RestFoundation.IServiceMethodInvoker)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Runtime.Handlers.RestServiceHandler" /> class.
            </summary>
      <param name="serviceContext">The service context.</param>
      <param name="methodLocator">The service method locator.</param>
      <param name="methodInvoker">The service method invoker.</param>
    </member>
    <member name="M:RestFoundation.Runtime.Handlers.RestServiceHandler.GetHttpHandler(System.Web.Routing.RequestContext)">
      <summary>
            Provides the object that processes the request.
            </summary>
      <returns>
            An object that processes the request.
            </returns>
      <param name="requestContext">An object that encapsulates information about the request.</param>
    </member>
    <member name="M:RestFoundation.Runtime.Handlers.RestServiceHandler.ProcessRequestAsync(System.Web.HttpContext)">
      <summary>
            When overridden in a derived class, provides code that handles an asynchronous task.
            </summary>
      <returns>The asynchronous task.</returns>
      <param name="context">The HTTP context.</param>
    </member>
    <member name="P:RestFoundation.Runtime.Handlers.RestServiceHandler.Context">
      <summary>
            Gets the service context.
            </summary>
    </member>
    <member name="P:RestFoundation.Runtime.Handlers.RestServiceHandler.ServiceContractTypeName">
      <summary>
            Gets a fully qualified name of the interface type defining the service contract.
            </summary>
    </member>
    <member name="P:RestFoundation.Runtime.Handlers.RestServiceHandler.ServiceUrl">
      <summary>
            Gets the service URL.
            </summary>
    </member>
    <member name="P:RestFoundation.Runtime.Handlers.RestServiceHandler.UrlTemplate">
      <summary>
            Gets a relative URL template.
            </summary>
    </member>
    <member name="P:RestFoundation.Runtime.Handlers.RestServiceHandler.ServiceAsyncTimeout">
      <summary>
            Gets or sets a value representing a timeout for an asynchronous task returned by a
            service method. Setting the value to <see cref="F:System.TimeSpan.Zero" /> indicates no timeout.
            </summary>
    </member>
    <member name="T:RestFoundation.Link">
      <summary>
            Represents a Link HTTP header value.
            </summary>
    </member>
    <member name="M:RestFoundation.Link.#ctor(System.Uri,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Link" /> class.
            </summary>
      <param name="href">An absolute or relative URL.</param>
      <param name="rel">A relation value.</param>
    </member>
    <member name="M:RestFoundation.Link.#ctor(System.Uri,System.String,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Link" /> class.
            </summary>
      <param name="href">An absolute or relative URL.</param>
      <param name="rel">A relation value.</param>
      <param name="anchor">An optional URL anchor.</param>
      <param name="title">An optional title value.</param>
    </member>
    <member name="M:RestFoundation.Link.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Link" /> class.
            </summary>
    </member>
    <member name="M:RestFoundation.Link.GetAdditionalParameter(System.String)">
      <summary>
            Gets additional an additional parameter specified in the Link header.
            </summary>
      <param name="name">The parameter name.</param>
      <returns>The parameter value.</returns>
    </member>
    <member name="M:RestFoundation.Link.Equals(RestFoundation.Link)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:RestFoundation.Link.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            true if the specified object  is equal to the current object; otherwise, false.
            </returns>
      <param name="obj">The object to compare with the current object. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:RestFoundation.Link.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:RestFoundation.Link.ToString">
      <summary>
            Returns the fully qualified type name of this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> containing a fully qualified type name.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:RestFoundation.Link.Href">
      <summary>
            Gets or sets the link URL.
            </summary>
    </member>
    <member name="P:RestFoundation.Link.Rel">
      <summary>
            Gets the link relation to the resource.
            </summary>
    </member>
    <member name="P:RestFoundation.Link.Anchor">
      <summary>
            Gets the URL anchor.
            </summary>
    </member>
    <member name="P:RestFoundation.Link.Title">
      <summary>
            Gets the link title.
            </summary>
    </member>
    <member name="T:RestFoundation.ResourceState">
      <summary>
            Represents the resource state for service methods.
            </summary>
    </member>
    <member name="M:RestFoundation.ResourceState.#ctor(System.Collections.Generic.IReadOnlyCollection{RestFoundation.Validation.ValidationError})">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.ResourceState" /> class.
            </summary>
      <param name="errors">
            A read-only collection of the validation errors associated with the resource.
            </param>
    </member>
    <member name="M:RestFoundation.ResourceState.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="P:RestFoundation.ResourceState.Count">
      <summary>
            Gets the number of elements contained in the <see cref="T:RestFoundation.ResourceState" />.
            </summary>
    </member>
    <member name="P:RestFoundation.ResourceState.IsValid">
      <summary>
            Gets a value indicating whether the resource state is valid (has no errors).
            </summary>
    </member>
    <member name="T:RestFoundation.Configuration.RestOptions">
      <summary>
            Represents the REST Foundation configuration options.
            </summary>
    </member>
    <member name="M:RestFoundation.Configuration.RestOptions.ConfigureServiceHelpAndProxy(System.Action{RestFoundation.Configuration.ProxyConfiguration})">
      <summary>
            Calls the provided service proxy configuration object to set up service help and proxy UI for the services.
            </summary>
      <param name="configuration">The service help and proxy configuration.</param>
      <returns>The configuration options object.</returns>
    </member>
    <member name="M:RestFoundation.Configuration.RestOptions.EnableJsonPSupport">
      <summary>
            Adds media type formatters for the JSONP support.
            </summary>
      <returns>The configuration options object.</returns>
    </member>
    <member name="M:RestFoundation.Configuration.RestOptions.WithDefaultMediaType(System.String,System.Boolean)">
      <summary>
            Sets the default media type in case the Accept HTTP header is not provided or should
            be ignored.
            </summary>
      <param name="mediaType">The media type.</param>
      <param name="forceDefaultMediaType">
            Set to true to always use the provided media type regardless of the Accept HTTP header value;
            otherwise set to false.
            </param>
      <returns>The configuration options object.</returns>
    </member>
    <member name="M:RestFoundation.Configuration.RestOptions.OutputEnumerableAsChunked(System.Boolean)">
      <summary>
            Sets a value indicating whether <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection
            results should be output as chunked HTTP requests. The default value is true.
            </summary>
      <param name="enumerableAsChunked">
            true if collections should be output as chunked HTTP requests; otherwise false.
            </param>
      <returns>The configuration options object.</returns>
    </member>
    <member name="M:RestFoundation.Configuration.RestOptions.WithFaultDetail(RestFoundation.Configuration.FaultDetail)">
      <summary>
            Sets the detail of information being returned in the fault collection object during an unhandled service
            exception.
            </summary>
      <param name="detail">The detail of fault information.</param>
      <returns>The configuration options object.</returns>
    </member>
    <member name="M:RestFoundation.Configuration.RestOptions.WithGlobalBehaviors(System.Action{RestFoundation.Configuration.GlobalBehaviorBuilder})">
      <summary>
            Calls the provided global behavior builder delegate to set or remove behaviors global to all services.
            </summary>
      <param name="builder">The builder.</param>
      <returns>The configuration options object.</returns>
    </member>
    <member name="M:RestFoundation.Configuration.RestOptions.WithGlobalExceptionHandler(RestFoundation.IServiceExceptionHandler)">
      <summary>
            Sets the exception handler global to all services.
            </summary>
      <param name="exceptionHandler">The exception handler.</param>
      <returns>The configuration options object.</returns>
    </member>
    <member name="M:RestFoundation.Configuration.RestOptions.WithIndexFileName(System.String)">
      <summary>
            Sets the default page file name. The file must be in the root folder and only the file name must be
            provided.
            </summary>
      <param name="filename">The file name.</param>
      <returns>The configuration options object.</returns>
      <exception cref="T:System.ArgumentException">
            If the file has an unsupported extension or a file path had been provided in addition to the name.
            </exception>
    </member>
    <member name="M:RestFoundation.Configuration.RestOptions.WithMediaTypeFormatters(System.Action{RestFoundation.Configuration.MediaTypeFormatterBuilder})">
      <summary>
            Calls the provided media type formatter builder delegate to set or remove formatters.
            </summary>
      <param name="builder">The builder.</param>
      <returns>The configuration options object.</returns>
    </member>
    <member name="M:RestFoundation.Configuration.RestOptions.WithResponseHeader(System.String,System.String)">
      <summary>
            Adds the provided header to all HTTP responses.
            </summary>
      <param name="headerName">The header name.</param>
      <param name="headerValue">The header value.</param>
      <returns>The configuration options object.</returns>
    </member>
    <member name="M:RestFoundation.Configuration.RestOptions.WithResponseHeaders(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>
            Adds the provided response headers to all HTTP responses.
            </summary>
      <param name="responseHeaders">A dictionary of header names and values.</param>
      <returns>The configuration options object.</returns>
    </member>
    <member name="M:RestFoundation.Configuration.RestOptions.WithTypeBinders(System.Action{RestFoundation.Configuration.TypeBinderBuilder})">
      <summary>
            Calls the provided type binder builder delegate to set or remove type binders.
            </summary>
      <param name="builder">The builder.</param>
      <returns>The configuration options object.</returns>
    </member>
    <member name="M:RestFoundation.Configuration.RestOptions.WithUrls(System.Action{RestFoundation.Configuration.UrlBuilder})">
      <summary>
            Calls the provided URL builder delegate to set up URL routes to services and web form pages.
            </summary>
      <param name="builder">The builder.</param>
      <returns>The configuration options object.</returns>
    </member>
    <member name="M:RestFoundation.Configuration.RestOptions.WithJsonFormatterSettings(RestFoundation.Configuration.JsonFormatterSettings)">
      <summary>
            Sets custom JSON formatter and result settings.
            </summary>
      <param name="settings">The JSON formatter settings.</param>
      <returns>The configuration options object.</returns>
    </member>
    <member name="M:RestFoundation.Configuration.RestOptions.WithXmlFormatterSettings(RestFoundation.Configuration.XmlFormatterSettings)">
      <summary>
            Sets custom XML formatter and result settings.
            </summary>
      <param name="settings">The XML formatter settings.</param>
      <returns>The configuration options object.</returns>
    </member>
    <member name="M:RestFoundation.Configuration.RestOptions.DoNotRemoveWebServerHeaders">
      <summary>
            Retains the HTTP response headers generated by the IIS server and ASP .NET framework.
            It is not recommended to retain these headers because they expose the technology
            the services are implemented in to the user.
            </summary>
      <returns>The configuration options object.</returns>
    </member>
    <member name="M:RestFoundation.Configuration.RestOptions.OnBeginRequest(System.Action{RestFoundation.IServiceContext})">
      <summary>
            Sets an action to execute when a REST service request begins.
            </summary>
      <param name="action">The action delegate.</param>
      <returns>The configuration options object.</returns>
    </member>
    <member name="M:RestFoundation.Configuration.RestOptions.OnEndRequest(System.Action{RestFoundation.IServiceContext})">
      <summary>
            Sets an action to execute when a REST service request ends.
            </summary>
      <param name="action">The action delegate.</param>
      <returns>The configuration options object.</returns>
    </member>
    <member name="M:RestFoundation.Configuration.RestOptions.OnException(System.Action{RestFoundation.IServiceContext,System.Exception})">
      <summary>
            Sets an action to execute when a REST service method throws an exception.
            </summary>
      <param name="action">The action delegate.</param>
      <returns>The configuration options object.</returns>
    </member>
    <member name="P:RestFoundation.Configuration.RestOptions.ServiceProxyHttpsOnly">
      <summary>
            Gets a value indicating whether the service proxy must be accessed through the HTTPS protocol only.
            </summary>
    </member>
    <member name="P:RestFoundation.Configuration.RestOptions.ServiceProxyAuthorizationManager">
      <summary>
            Gets the service proxy authorization manager instance.
            </summary>
    </member>
    <member name="P:RestFoundation.Configuration.RestOptions.ServiceDescription">
      <summary>
            Gets the service description.
            </summary>
    </member>
    <member name="T:RestFoundation.Resources.Global">
      <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.ResourceManager">
      <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.Culture">
      <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.AlreadyConfigured">
      <summary>
              Looks up a localized string similar to REST Foundation has already been configured..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.AlreadyInitializedHttpContext">
      <summary>
              Looks up a localized string similar to HTTP context has already been initialized..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.AlreadyMapped">
      <summary>
              Looks up a localized string similar to The relative URL '{0}' has already been mapped..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.ConfigurationNotInitialized">
      <summary>
              Looks up a localized string similar to REST Foundation configuration has not been initialized. Make sure to add a call to one of the Initialize methods of the RestFoundation.Rest.Configuration object on the application start..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.ConstraintMismatchedRouteParameter">
      <summary>
              Looks up a localized string similar to Route parameter '{0}' with value '{1}' does not match the constraint pattern '{2}'..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.DependencyRegistrationError">
      <summary>
              Looks up a localized string similar to There was a problem registering a service: {0}.
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.DependencyResolutionError">
      <summary>
              Looks up a localized string similar to There was a problem resolving a service: {0}.
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.DisallowedHttpMethod">
      <summary>
              Looks up a localized string similar to HTTP method is not allowed..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.DisallowedMediaTypeParameters">
      <summary>
              Looks up a localized string similar to Media type parameters are not allowed..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.DuplicateAuthenticationBehavior">
      <summary>
              Looks up a localized string similar to Only a single authentication behavior can be associated with a service method. That includes global behaviors..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.DuplicateGlobalBehaviors">
      <summary>
              Looks up a localized string similar to Multiple global service behaviors of the same type are not allowed..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.DuplicateRouteBehaviors">
      <summary>
              Looks up a localized string similar to Multiple service behaviors of the same type are not allowed for the same route..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.EmptyFileName">
      <summary>
              Looks up a localized string similar to File name cannot be empty..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.EmptyHttpHeader">
      <summary>
              Looks up a localized string similar to HTTP headers cannot be empty or have white-space in the name..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.FailedRequest">
      <summary>
              Looks up a localized string similar to HTTP request failed to process..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.FailedRouteInvokedSuccessfully">
      <summary>
              Looks up a localized string similar to REST Foundation service route was invoked successfully when it should have failed..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.FailedRouteWithInvalidExceptionMessage">
      <summary>
              Looks up a localized string similar to REST Foundation service route invocation failed with the exception message "{0}". Exception message "{1}" was expected..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.FileNameContainsPath">
      <summary>
              Looks up a localized string similar to Only a file name can be specified. Relative or absolute paths/URLs are not supported..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.Forbidden">
      <summary>
              Looks up a localized string similar to Forbidden.
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.HttpsRequiredStatusDescription">
      <summary>
              Looks up a localized string similar to HTTPS required.
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InternalServerError">
      <summary>
              Looks up a localized string similar to Internal Server Error.
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidAcceptHeaderFormat">
      <summary>
              Looks up a localized string similar to One of the Accept* HTTP headers has an invalid format..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidAcceptHeaderValue">
      <summary>
              Looks up a localized string similar to Invalid '{0}' header value to parse..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidArgumentValue">
      <summary>
              Looks up a localized string similar to The argument contains invalid elements..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidAsyncTimeout">
      <summary>
              Looks up a localized string similar to Invalid service async timeout value provided..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidBrewOperation">
      <summary>
              Looks up a localized string similar to I'm a teapot.
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidCatchAllUrlTemplate">
      <summary>
              Looks up a localized string similar to URL templates cannot contain catch-all parameters. Template: '{0}'.
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidConnectionTimeout">
      <summary>
              Looks up a localized string similar to Connection timeout is invalid..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidFilePathOrUrl">
      <summary>
              Looks up a localized string similar to No valid file path/URL provided..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidHashKey">
      <summary>
              Looks up a localized string similar to Invalid hash key provided..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidHttpMethodForResource">
      <summary>
              Looks up a localized string similar to A resource cannot be set for the current HTTP method..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidIAsyncResultReturned">
      <summary>
              Looks up a localized string similar to An unsupported asynchronous result was returned from the service method. Only objects of Task and Task&lt;T&gt; types are supported. Nested generic tasks are not supported..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidIndexFileException">
      <summary>
              Looks up a localized string similar to Index files can only have .html or .htm extensions..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidJsonPCallback">
      <summary>
              Looks up a localized string similar to Invalid JSONP callback method provided..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidKey">
      <summary>
              Looks up a localized string similar to Invalid key provided..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidMethodInvocationTaskState">
      <summary>
              Looks up a localized string similar to The task returned by the IServiceMethodInvoker must be in the 'Created' state. It cannot be started..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidMethodParameterName">
      <summary>
              Looks up a localized string similar to Invalid method parameter name provided..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidNamedRoute">
      <summary>
              Looks up a localized string similar to Invalid route '{0}' specified..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidODataParameters">
      <summary>
              Looks up a localized string similar to Invalid OData parameters provided..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidPortNumber">
      <summary>
              Looks up a localized string similar to Port must be greater than 0..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidProxyMetadataType">
      <summary>
              Looks up a localized string similar to The type '{0}' is not a valid proxy metadata type..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidResourceBody">
      <summary>
              Looks up a localized string similar to Invalid resource body provided..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidResourceExampleType">
      <summary>
              Looks up a localized string similar to A resource example type must be a class implementing the RestFoundation.ServiceProxy.IResourceExample interface..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidResultContentFormat">
      <summary>
              Looks up a localized string similar to Invalid content result format provided..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidServiceContract">
      <summary>
              Looks up a localized string similar to Service contract type must be an interface or a concrete class that defines its own contract..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidServiceContractType">
      <summary>
              Looks up a localized string similar to Type '{0}' is not a service contract..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidServiceImplementation">
      <summary>
              Looks up a localized string similar to A service implementation that defines its own contract must be non-abstract and marked with the 'ServiceContract' attribute..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidServiceMethod">
      <summary>
              Looks up a localized string similar to No valid service method provided..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidServiceMethodArgument">
      <summary>
              Looks up a localized string similar to There was a problem validating service method argument '{0}'..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidServiceMethodExpression">
      <summary>
              Looks up a localized string similar to Invalid or mismatched service method lambda expression provided..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidServiceName">
      <summary>
              Looks up a localized string similar to Invalid relative service URL name '{0}' provided. It can only contain letters, digits, underscores and dashes..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidServiceProxyRelativeUrl">
      <summary>
              Looks up a localized string similar to Service help/proxy relative URL can only contain letters and numbers with optional dashes in between. Relative URL '{0}' does not meet those requirements..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidServiceUrlOrMethodExpression">
      <summary>
              Looks up a localized string similar to Invalid service URL or method lambda expression provided..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidSocketTimeout">
      <summary>
              Looks up a localized string similar to Socket timeout is invalid..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidUploadedFileType">
      <summary>
              Looks up a localized string similar to The resource type must be IUploadedFile or a collection that implements IEnumerable&lt;IUploadedFile&gt;..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidUpperBoundAddress">
      <summary>
              Looks up a localized string similar to The upper bound address is from a different family than the lower bound address..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidVirtualUrl">
      <summary>
              Looks up a localized string similar to Virtual URL must start with ~/.
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.InvalidWebResponse">
      <summary>
              Looks up a localized string similar to Invalid web response provided..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.ManuallyDefinedOptionsHttpMethod">
      <summary>
              Looks up a localized string similar to HTTP method OPTIONS cannot be manually defined on a service method..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.MismatchedServiceMethod">
      <summary>
              Looks up a localized string similar to No matching service type or service method was found..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.MismatchedServiceMethodExpression">
      <summary>
              Looks up a localized string similar to Service method delegate value of the argument '{0}' does not match the corresponding route value: {1} != {2}..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.MismatchedServiceMethodRoute">
      <summary>
              Looks up a localized string similar to Provided service method delegate does not match the route..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.MismatchedUrl">
      <summary>
              Looks up a localized string similar to URL '{0}' does not match any routes..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.MissingAmbiguousServiceUrl">
      <summary>
              Looks up a localized string similar to An ambiguous route match was found for the service method. A specific 'serviceUrl' parameter must be specified..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.MissingAuthorizationManager">
      <summary>
              Looks up a localized string similar to No authorization manager could be found..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.MissingCssResource">
      <summary>
              Looks up a localized string similar to CSS resource not found..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.MissingCurrentServiceMethod">
      <summary>
              Looks up a localized string similar to No current service method has been set..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.MissingDefaultConstructor">
      <summary>
              Looks up a localized string similar to Created type does not have a default constructor..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.MissingDescription">
      <summary>
              Looks up a localized string similar to No description provided.
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.MissingHttpContext">
      <summary>
              Looks up a localized string similar to No HTTP context was found..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.MissingJavaScriptResource">
      <summary>
              Looks up a localized string similar to JavaScript resource not found..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.MissingOrInvalidAcceptType">
      <summary>
              Looks up a localized string similar to No supported media type was provided in the Accept header..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.MissingOrInvalidContentType">
      <summary>
              Looks up a localized string similar to No supported media type was provided in the Content-Type header..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.MissingPropertyDefinition">
      <summary>
              Looks up a localized string similar to Properties must have at least 1 property definition..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.MissingRestHttpModule">
      <summary>
              Looks up a localized string similar to No REST HTTP module detected. Make sure to add a reference to the RestFoundation.RestHttpModule HTTP module in the Web.config file..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.MissingRouteData">
      <summary>
              Looks up a localized string similar to No route data found..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.MissingRouteHandler">
      <summary>
              Looks up a localized string similar to No route handler was passed to the service method invoker..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.MissingServiceContext">
      <summary>
              Looks up a localized string similar to No service context was passed to the service method invoker..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.MissingSupportedMediaTypeForFormatter">
      <summary>
              Looks up a localized string similar to No supported media types are defined for the media type formatter of type '{0}'..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.MultipleTypeBindersPerParameter">
      <summary>
              Looks up a localized string similar to Parameter '{0}' of the method '{1}' in the service contract of type '{2}' is decorated with multiple type binder attributes..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.NoContent">
      <summary>
              Looks up a localized string similar to No Content.
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.NonAcceptedContentCharset">
      <summary>
              Looks up a localized string similar to No accepted charset was provided in the Accept-Charset header..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.NonAcceptedContentLanguage">
      <summary>
              Looks up a localized string similar to The accepted language provided in the Accept-Language header is not supported..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.NonAcceptedMediaType">
      <summary>
              Looks up a localized string similar to Resulting media type is not accepted by the client.
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.NonErrorHttpStatusCode">
      <summary>
              Looks up a localized string similar to The HTTP status code is not an error code..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.NonGenericResultCollections">
      <summary>
              Looks up a localized string similar to Non-generic collections cannot be returned as service method results. Return typed arrays (recommended) or generic collections instead..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.NonStringOutputType">
      <summary>
              Looks up a localized string similar to The output type is not a string..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.NoResourceProvided">
      <summary>
              Looks up a localized string similar to No resource provided.
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.NotFound">
      <summary>
              Looks up a localized string similar to Not Found.
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.NotImplemented">
      <summary>
              Looks up a localized string similar to Not Implemented.
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.NullOrInvalidAcceptedName">
      <summary>
              Looks up a localized string similar to An accepted name cannot be null or contain a wildcard..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.NullResourceBody">
      <summary>
              Looks up a localized string similar to Resource body cannot be null..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.OK">
      <summary>
              Looks up a localized string similar to OK.
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.OvercomplicatedMethodArgument">
      <summary>
              Looks up a localized string similar to Method argument '{0}' has a value that is to complex to process. It must be a simple constant or variable value..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.PartialContent">
      <summary>
              Looks up a localized string similar to Partial Content.
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.ProxyAlreadyInitialized">
      <summary>
              Looks up a localized string similar to Service proxy UI is already enabled..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.ResourceValidationFailed">
      <summary>
              Looks up a localized string similar to Validation Failed.
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.ServiceCallEnded">
      <summary>
              Looks up a localized string similar to -- SERVICE CALL ENDED --.
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.ServiceCallStarted">
      <summary>
              Looks up a localized string similar to -- SERVICE CALL STARTED --.
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.ServiceTimedOut">
      <summary>
              Looks up a localized string similar to Service timed out.
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.ServiceUnavailable">
      <summary>
              Looks up a localized string similar to Service is not available.
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.SuccessfulOperation">
      <summary>
              Looks up a localized string similar to Operation is successful.
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.TooManyRequests">
      <summary>
              Looks up a localized string similar to Too many requests.
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.UnableToCreateServiceType">
      <summary>
              Looks up a localized string similar to Service with contract of type '{0}' could not be created..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.UnableToInitializeCache">
      <summary>
              Looks up a localized string similar to Cache could not be initialized..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.UnableToLoadIndexPage">
      <summary>
              Looks up a localized string similar to Index page file could not be loaded. Make sure the specified index file is available and not locked..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.Unauthorized">
      <summary>
              Looks up a localized string similar to Unauthorized.
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.UndefinedHttpMethodsForServiceMethod">
      <summary>
              Looks up a localized string similar to Method '{0}' of the service contract type '{1}' does not have any HTTP methods defined in the UrlAttribute declaration..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.UndefinedServiceMethodUrl">
      <summary>
              Looks up a localized string similar to Service with contract of type '{0}' could not match the URL with a method..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.UndeterminedServiceContract">
      <summary>
              Looks up a localized string similar to Service contract of type '{0}' could not be determined..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.UndeterminedUriHostName">
      <summary>
              Looks up a localized string similar to Could not determine the URI host name..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.UnmappedResourceType">
      <summary>
              Looks up a localized string similar to HTTP resource type provided has not been mapped..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.UnregisteredLogWriter">
      <summary>
              Looks up a localized string similar to No log writer has been registered..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.UnsatisfiableRequestedRange">
      <summary>
              Looks up a localized string similar to Range not satisfiable..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.UnsealedBehaviorAttributeClass">
      <summary>
              Looks up a localized string similar to Service method behavior attribute class '{0}' should be sealed for performance benefits..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.UnsupportedContentCharset">
      <summary>
              Looks up a localized string similar to The content charset provided is not supported..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.UnsupportedContentLanguage">
      <summary>
              Looks up a localized string similar to The content language provided is not supported..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.UnsupportedFormData">
      <summary>
              Looks up a localized string similar to The current service method does not support HTTP body form data..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.UnsupportedFromHeaderBinderParameter">
      <summary>
              Looks up a localized string similar to Array parameters are not supported by the FromHeader type binder..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.UnsupportedHttpMethod">
      <summary>
              Looks up a localized string similar to HTTP Method '{0}' is not supported..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.UnsupportedLogWriterAsyncFlush">
      <summary>
              Looks up a localized string similar to The current log writer does not support asynchronous flushes..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.UnsupportedMediaType">
      <summary>
              Looks up a localized string similar to Media type is not supported.
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.UnsupportedObjectTypeForOData">
      <summary>
              Looks up a localized string similar to OData operations are not supported for anonymous objects..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.UnsupportedOperation">
      <summary>
              Looks up a localized string similar to Unsupported operation.
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.UnsupportedRequestedFormat">
      <summary>
              Looks up a localized string similar to The service is configured not to list its contents in the requested format..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.UnsupportedSyncExecutionForAsyncResult">
      <summary>
              Looks up a localized string similar to Asyncronous service method results must be executed by calling the ExecuteAsync(context) method..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.ValidationFailed">
      <summary>
              Looks up a localized string similar to Validation for '{0}' failed..
            </summary>
    </member>
    <member name="P:RestFoundation.Resources.Global.ValidationRequestFailed">
      <summary>
              Looks up a localized string similar to A potentially dangerous value was found in the HTTP request..
            </summary>
    </member>
    <member name="T:RestFoundation.ServiceLocation.IServiceLocator">
      <summary>
            Defines a service locator to retrieve services from an IoC container.
            </summary>
    </member>
    <member name="M:RestFoundation.ServiceLocation.IServiceLocator.GetService``1">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <typeparam name="T">A type of service object to get.</typeparam>
      <returns>
            A service object of type <typeparamref name="T" />.-or- null if there is no service object
            of type <typeparamref name="T" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:RestFoundation.ServiceLocation.IServiceLocator.GetServices(System.Type)">
      <summary>
            Gets all the service objects of the specified type.
            </summary>
      <param name="serviceType">An object that specifies the type of service objects to get.</param>
      <returns>
            A sequence of service objects of type <paramref name="serviceType" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:RestFoundation.ServiceLocation.IServiceLocator.GetServices``1">
      <summary>
            Gets all the service objects of the specified type.
            </summary>
      <typeparam name="T">A type of service objects to get.</typeparam>
      <returns>
            A sequence of service objects of type <typeparamref name="T" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:RestFoundation.Runtime.DefaultServiceLocator">
      <summary>
            Represents a service locator that abstracts the default Rest Foundation container.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.DefaultServiceLocator.GetService(System.Type)">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <returns>
            A service object of type <paramref name="serviceType" />.-or- null if there is no service object of type <paramref name="serviceType" />.
            </returns>
      <param name="serviceType">An object that specifies the type of service object to get.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:RestFoundation.Runtime.DefaultServiceLocator.GetService``1">
      <summary>
            Gets the service object of the specified type.
            </summary>
      <typeparam name="T">A type of service object to get.</typeparam>
      <returns>
            A service object of type <typeparamref name="T" />.-or- null if there is no service object
            of type <typeparamref name="T" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:RestFoundation.Runtime.DefaultServiceLocator.GetServices(System.Type)">
      <summary>
            Gets all the service objects of the specified type.
            </summary>
      <param name="serviceType">An object that specifies the type of service objects to get.</param>
      <returns>
            A sequence of service objects of type <paramref name="serviceType" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:RestFoundation.Runtime.DefaultServiceLocator.GetServices``1">
      <summary>
            Gets all the service objects of the specified type.
            </summary>
      <typeparam name="T">A type of service objects to get.</typeparam>
      <returns>
            A sequence of service objects of type <typeparamref name="T" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:RestFoundation.Runtime.DefaultServiceLocator.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:RestFoundation.ServiceProxy.ProxyResponseData">
      <summary>
            Represents data from a Service Proxy response.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyResponseData.Data">
      <summary>
            Gets or sets the response data.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyResponseData.Code">
      <summary>
            Gets or sets the response code.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyResponseData.ProtocolVersion">
      <summary>
            Gets or sets the HTTP protocol version.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyResponseData.Duration">
      <summary>
            Gets or sets the service execution duration.
            </summary>
    </member>
    <member name="T:RestFoundation.ServiceProxy.ProxySession">
      <summary>
            Represents a service proxy session data.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxySession.ServiceUrl">
      <summary>
            Gets or sets the base service URL.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxySession.OperationUrl">
      <summary>
            Gets or sets the relative endpoint URL.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxySession.Format">
      <summary>
            Gets or sets the resource format.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxySession.Method">
      <summary>
            Gets or sets the HTTP verb.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxySession.Headers">
      <summary>
            Gets or sets the headers associated with the service operation.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxySession.Body">
      <summary>
            Gets or sets the resource body.
            </summary>
    </member>
    <member name="T:RestFoundation.ServiceProxy.ProxyUrlHelper">
      <summary>
            Represents a service proxy helper that generates URLs from name route names.
            </summary>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyUrlHelper.GetByRouteName(System.Web.HttpResponse,System.String)">
      <summary>
            Gets the URL represented by the named route.
            </summary>
      <param name="response">The HTTP context response.</param>
      <param name="routeName">The route name.</param>
      <returns>The generated URL.</returns>
    </member>
    <member name="T:RestFoundation.ServiceProxy.ProxyJsonConvert">
      <summary>
            Represents an JSON object converter.
            </summary>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyJsonConvert.SerializeObject(System.Object,System.Boolean,System.Boolean)">
      <summary>
            Converts an object into JSON with the provided formatting options.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="isFormatted">
            A <see cref="T:System.Boolean" /> indicating whether the serialized object is formatted for output.
            </param>
      <param name="isResponse">
            A <see cref="T:System.Boolean" /> indicating whether the serialized object is generated as a service response.
            </param>
      <returns>The <see cref="T:System.String" /> value containing the serialized object.</returns>
    </member>
    <member name="T:RestFoundation.Runtime.NullLogWriter">
      <summary>
            Represents a dummy log writer that ignores messages.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.NullLogWriter.WriteDebug(System.String)">
      <summary>
            Writes a debug message into the log buffer.
            </summary>
      <param name="debug">A debug message.</param>
      <returns>The log writer instance.</returns>
    </member>
    <member name="M:RestFoundation.Runtime.NullLogWriter.WriteError(System.String)">
      <summary>
            Writes an error message into the log buffer.
            </summary>
      <param name="error">An error message.</param>
      <returns>The log writer instance.</returns>
    </member>
    <member name="M:RestFoundation.Runtime.NullLogWriter.WriteInfo(System.String)">
      <summary>
            Writes an information message into the log buffer.
            </summary>
      <param name="info">An information message.</param>
      <returns>The log writer instance.</returns>
    </member>
    <member name="M:RestFoundation.Runtime.NullLogWriter.WriteWarning(System.String)">
      <summary>
            Writes a warning message into the log buffer.
            The implementation should add a line break at the end of the message.
            </summary>
      <param name="warning">A warning message.</param>
      <returns>The log writer instance.</returns>
    </member>
    <member name="M:RestFoundation.Runtime.NullLogWriter.Flush">
      <summary>
            Flushes the log buffer.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.NullLogWriter.FlushAsync">
      <summary>
            Flushes the log buffer asynchronously.
            </summary>
      <returns>The task that flashes the log buffer.</returns>
      <exception cref="T:System.NotSupportedException">
            If the logger's <see cref="P:RestFoundation.ILogWriter.SupportsAsyncFlush" /> property is set to false.
            </exception>
    </member>
    <member name="P:RestFoundation.Runtime.NullLogWriter.LogGeneratedInfo">
      <summary>
            Gets a value indicating whether to log messages automatically generated
            by the REST foundation.
            </summary>
    </member>
    <member name="P:RestFoundation.Runtime.NullLogWriter.SupportsAsyncFlush">
      <summary>
            Gets a value indicating whether the log writer supports the <see cref="M:RestFoundation.ILogWriter.FlushAsync" />
            operation.
            </summary>
    </member>
    <member name="T:RestFoundation.Runtime.ServiceFactory">
      <summary>
            Represents the default service factory.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.ServiceFactory.Create(System.Type)">
      <summary>
            Creates a service implementation instance.
            </summary>
      <param name="serviceContractType">A service contract type.</param>
      <returns>The created service instance.</returns>
    </member>
    <member name="T:RestFoundation.ServiceContractAttribute">
      <summary>
            Represents a REST service implementation that defines its own contract.
            </summary>
    </member>
    <member name="T:RestFoundation.ExceptionAction">
      <summary>
            Defines an action in case of a service method exception.
            </summary>
    </member>
    <member name="F:RestFoundation.ExceptionAction.BubbleUp">
      <summary>
            Bubble up the exception.
            </summary>
    </member>
    <member name="F:RestFoundation.ExceptionAction.Handle">
      <summary>
            Handle the exception and stop executing the method.
            </summary>
    </member>
    <member name="T:RestFoundation.Behaviors.AuthorizationBehavior">
      <summary>
            Represents a role based authorization behavior for a service or a service method.
            </summary>
    </member>
    <member name="M:RestFoundation.Behaviors.AuthorizationBehavior.#ctor(System.String[])">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Behaviors.AuthorizationBehavior" /> class.
            </summary>
      <param name="roles">An array of authorized roles.</param>
    </member>
    <member name="M:RestFoundation.Behaviors.AuthorizationBehavior.#ctor(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Behaviors.AuthorizationBehavior" /> class.
            </summary>
      <param name="roles">A sequence of authorized roles.</param>
    </member>
    <member name="M:RestFoundation.Behaviors.AuthorizationBehavior.OnMethodAuthorizing(RestFoundation.IServiceContext,RestFoundation.Behaviors.MethodAuthorizingContext)">
      <summary>
            Called during the authorization process before a service method or behavior is executed.
            </summary>
      <param name="serviceContext">The service context.</param>
      <param name="behaviorContext">The "method authorizing" behavior context.</param>
      <returns>A service method action.</returns>
    </member>
    <member name="T:RestFoundation.Behaviors.BehaviorMethodAction">
      <summary>
            Defines an action before a service method gets executed.
            </summary>
    </member>
    <member name="F:RestFoundation.Behaviors.BehaviorMethodAction.Execute">
      <summary>
            Continue executing the method.
            </summary>
    </member>
    <member name="F:RestFoundation.Behaviors.BehaviorMethodAction.Stop">
      <summary>
            Stop executing the method.
            </summary>
    </member>
    <member name="T:RestFoundation.Formatters.IMediaTypeFormatter">
      <summary>
            Defines a formatter responsible for serializing and deserializing strongly typed objects
            based on the HTTP message body data and associated the media type.
            </summary>
    </member>
    <member name="M:RestFoundation.Formatters.IMediaTypeFormatter.FormatRequest(RestFoundation.IServiceContext,System.Type)">
      <summary>
            Deserializes HTTP message body data into an object instance of the provided type.
            </summary>
      <param name="context">The service context.</param>
      <param name="objectType">The object type.</param>
      <returns>The deserialized object.</returns>
      <exception cref="T:RestFoundation.Runtime.HttpResponseException">
            If the object could not be deserialized.
            </exception>
    </member>
    <member name="M:RestFoundation.Formatters.IMediaTypeFormatter.FormatResponse(RestFoundation.IServiceContext,System.Type,System.Object,System.String)">
      <summary>
            Serializes the object instance into the HTTP response stream using the accepted media type.
            </summary>
      <param name="context">The service context.</param>
      <param name="methodReturnType">The method return type.</param>
      <param name="obj">The object to serialize.</param>
      <param name="preferredMediaType">The preferred media type.</param>
      <returns>A service method result containing the serialized object representation.</returns>
      <exception cref="T:RestFoundation.Runtime.HttpResponseException">
            If the object could not be serialized.
            </exception>
    </member>
    <member name="T:RestFoundation.Formatters.BlockFormatter">
      <summary>
            Represents a media type formatter to block globally supported media types for specific routes.
            </summary>
    </member>
    <member name="M:RestFoundation.Formatters.BlockFormatter.FormatRequest(RestFoundation.IServiceContext,System.Type)">
      <summary>
            Deserializes HTTP message body data into an object instance of the provided type.
            </summary>
      <param name="context">The service context.</param>
      <param name="objectType">The object type.</param>
      <returns>The deserialized object.</returns>
      <exception cref="T:RestFoundation.Runtime.HttpResponseException">
            If the object could not be serialized.
            </exception>
    </member>
    <member name="M:RestFoundation.Formatters.BlockFormatter.FormatResponse(RestFoundation.IServiceContext,System.Type,System.Object,System.String)">
      <summary>
            Serializes the object instance into the HTTP response stream using the accepted media type.
            </summary>
      <param name="context">The service context.</param>
      <param name="methodReturnType">The method return type.</param>
      <param name="obj">The object to serialize.</param>
      <param name="preferredMediaType">The preferred media type.</param>
      <returns>A service method result containing the serialized object representation.</returns>
      <exception cref="T:RestFoundation.Runtime.HttpResponseException">
            If the object could not be serialized.
            </exception>
    </member>
    <member name="T:RestFoundation.Formatters.JsonPFormatter">
      <summary>
            Represents a JSONP media type formatter.
            </summary>
    </member>
    <member name="M:RestFoundation.Formatters.JsonPFormatter.FormatRequest(RestFoundation.IServiceContext,System.Type)">
      <summary>
            Deserializes HTTP message body data into an object instance of the provided type.
            </summary>
      <param name="context">The service context.</param>
      <param name="objectType">The object type.</param>
      <returns>The deserialized object.</returns>
      <exception cref="T:RestFoundation.Runtime.HttpResponseException">If the object cannot be deserialized.</exception>
    </member>
    <member name="M:RestFoundation.Formatters.JsonPFormatter.FormatResponse(RestFoundation.IServiceContext,System.Type,System.Object,System.String)">
      <summary>
            Serializes the object instance into the HTTP response stream using the accepted media type.
            </summary>
      <param name="context">The service context.</param>
      <param name="methodReturnType">The method return type.</param>
      <param name="obj">The object to serialize.</param>
      <param name="preferredMediaType">The preferred media type.</param>
      <returns>A service method result containing the serialized object representation.</returns>
      <exception cref="T:RestFoundation.Runtime.HttpResponseException">If the object could not be serialized.</exception>
    </member>
    <member name="T:RestFoundation.Behaviors.IAuthenticationBehavior">
      <summary>
            Defines a special case of a <see cref="T:RestFoundation.Behaviors.ISecureServiceBehavior" /> that must be invoked
            before any other behaviors. Only a single <see cref="T:RestFoundation.Behaviors.IAuthenticationBehavior" /> can be
            associated with a service method.
            </summary>
    </member>
    <member name="T:RestFoundation.IContentNegotiator">
      <summary>
            Defines a content negotiator that determines an accepted media type from
            the current HTTP request headers or query string data.
            </summary>
    </member>
    <member name="M:RestFoundation.IContentNegotiator.GetPreferredMediaType(RestFoundation.IHttpRequest)">
      <summary>
            Gets the preferred accepted media type from the provided HTTP request.
            </summary>
      <param name="request">The HTTP request.</param>
      <returns>A <see cref="T:System.String" /> containing the preferred media type.</returns>
    </member>
    <member name="M:RestFoundation.IContentNegotiator.IsBrowserRequest(RestFoundation.IHttpRequest)">
      <summary>
            Returns a <see cref="T:System.Boolean" /> value indicating whether the HTTP request
            came from a web browser directly.
            </summary>
      <param name="request">The HTTP request.</param>
      <returns>
            true if the HTTP request came from a web browser; otherwise, false.
            </returns>
    </member>
    <member name="T:RestFoundation.IServiceExceptionHandler">
      <summary>
            Defines a service exception handler.
            </summary>
    </member>
    <member name="M:RestFoundation.IServiceExceptionHandler.Handle(RestFoundation.IServiceContext,System.Object,System.Reflection.MethodInfo,System.Exception)">
      <summary>
            Called if an exception occurs during the service method execution.
            This method does not catch <see cref="T:RestFoundation.Runtime.HttpResponseException" /> exceptions because they are
            designed to set response status codes and stop the request.
            </summary>
      <param name="context">The service context.</param>
      <param name="service">The service object.</param>
      <param name="method">The service method.</param>
      <param name="ex">The exception.</param>
      <returns>A service method exception action.</returns>
    </member>
    <member name="T:RestFoundation.IServiceMethodLocator">
      <summary>
            Defines a service method locator.
            </summary>
    </member>
    <member name="M:RestFoundation.IServiceMethodLocator.Locate(RestFoundation.Runtime.Handlers.IRestServiceHandler)">
      <summary>
            Locates the service method associated with the provided REST handler and returns the associated data.
            </summary>
      <param name="handler">A REST handler associated with HTTP request.</param>
      <returns>The service method data.</returns>
    </member>
    <member name="T:RestFoundation.Results.FileResultBase">
      <summary>
            Represents a base file result.
            This class cannot be instantiated.
            </summary>
    </member>
    <member name="M:RestFoundation.Results.FileResultBase.Execute(RestFoundation.IServiceContext)">
      <summary>
            Executes the result against the provided service synchronously.
            Asynchronous method should throw a <see cref="T:System.NotSupportedException" /> and implement
            the <see cref="M:RestFoundation.Results.IResultAsync.ExecuteAsync(RestFoundation.IServiceContext)" /> method instead.
            </summary>
      <param name="context">The service context.</param>
      <exception cref="T:System.NotSupportedException">
            When called from a service method result that implements the <see cref="T:RestFoundation.Results.IResultAsync" />
            interface.
            </exception>
    </member>
    <member name="M:RestFoundation.Results.FileResultBase.ExecuteAsync(RestFoundation.IServiceContext)">
      <summary>
            Executes the result against the provided service context asynchronously.
            </summary>
      <param name="context">The service context.</param>
      <returns>A task executing the result.</returns>
    </member>
    <member name="M:RestFoundation.Results.FileResultBase.GetFile(RestFoundation.IServiceContext)">
      <summary>
            Gets the <see cref="T:System.IO.FileInfo" /> instance using the service context.
            </summary>
      <param name="context">The service context.</param>
      <returns>The file info instance.</returns>
    </member>
    <member name="P:RestFoundation.Results.FileResultBase.ContentType">
      <summary>
            Gets or sets the content type.
            </summary>
    </member>
    <member name="P:RestFoundation.Results.FileResultBase.ContentDisposition">
      <summary>
            Gets or sets the Content-Disposition HTTP response header value.
            </summary>
    </member>
    <member name="T:RestFoundation.Results.JsonPResult">
      <summary>
            Represents a JSONP result.
            </summary>
    </member>
    <member name="M:RestFoundation.Results.JsonPResult.Execute(RestFoundation.IServiceContext)">
      <summary>
            Executes the result against the provided service context.
            </summary>
      <param name="context">The service context.</param>
    </member>
    <member name="P:RestFoundation.Results.JsonPResult.Content">
      <summary>
            Gets or sets the object to serialize to JSONP/JavaScript function.
            </summary>
    </member>
    <member name="P:RestFoundation.Results.JsonPResult.ContentType">
      <summary>
            Gets or sets the content type. The "application/javascript" content type is used by default.
            </summary>
    </member>
    <member name="P:RestFoundation.Results.JsonPResult.Callback">
      <summary>
            Gets or sets the callback function name. The "jsonpCallback" name is used
            if no value is set to this property.
            </summary>
    </member>
    <member name="T:RestFoundation.Results.RedirectType">
      <summary>
            Represents a redirect type.
            </summary>
    </member>
    <member name="F:RestFoundation.Results.RedirectType.Permanent">
      <summary>
            The resource was moved permanently. HTTP code: 301.
            </summary>
    </member>
    <member name="F:RestFoundation.Results.RedirectType.Found">
      <summary>
            The resource was found but a different URL should be used for the response.
            This is the standard redirect used by the browsers even though it contradicts
            the HTTP standard. HTTP code: 302.
            </summary>
    </member>
    <member name="F:RestFoundation.Results.RedirectType.SeeOther">
      <summary>
            The response to the request can be found at another URL. HTTP code: 303.
            </summary>
    </member>
    <member name="F:RestFoundation.Results.RedirectType.Temporary">
      <summary>
            The resource was moved temporarily. Future requests can still use the original URL.
            HTTP code: 307.
            </summary>
    </member>
    <member name="T:RestFoundation.Configuration.RouteBuilder">
      <summary>
            Represents a route builder for the specified relative URL.
            </summary>
    </member>
    <member name="M:RestFoundation.Configuration.RouteBuilder.WithAsyncTimeout(System.TimeSpan)">
      <summary>
            Sets a timeout for asynchronous tasks returned by the services for the mapped URL. The default value is
            <see cref="F:System.TimeSpan.Zero" /> representing no timeout.
            </summary>
      <param name="timeout">The timeout value.</param>
      <returns>The route builder.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">If a negative, non-infinite timeout is provided.</exception>
    </member>
    <member name="M:RestFoundation.Configuration.RouteBuilder.ToServiceContract(System.Type)">
      <summary>
            Maps the relative URL to a service contract.
            </summary>
      <param name="contractType">The service contract type./</param>
      <returns>The route configuration.</returns>
      <exception cref="T:System.ArgumentException">
            If the service contract type is not an interface or a concrete class that defines its own contract.
            </exception>
      <exception cref="T:System.InvalidOperationException">If the relative URL has already been mapped.</exception>
    </member>
    <member name="M:RestFoundation.Configuration.RouteBuilder.ToServiceContract``1">
      <summary>
            Maps the relative URL to a service contract.
            </summary>
      <typeparam name="T">The service contract type.</typeparam>
      <returns>The route configuration.</returns>
      <exception cref="T:System.ArgumentException">
            If the service contract type is not an interface or a concrete class that defines its own contract.
            </exception>
      <exception cref="T:System.InvalidOperationException">If the relative URL has already been mapped.</exception>
    </member>
    <member name="M:RestFoundation.Configuration.RouteBuilder.ToWebFormsPage(System.String)">
      <summary>
            Maps the relative URL to a web forms page.
            </summary>
      <param name="virtualPageUrl">A virtual URL to the ASPX file.</param>
    </member>
    <member name="T:RestFoundation.Runtime.ContentNegotiator">
      <summary>
            Represents the default content negotiator that determines an accepted media type from
            the current HTTP request headers or query string data.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.ContentNegotiator.GetPreferredMediaType(RestFoundation.IHttpRequest)">
      <summary>
            Gets the preferred accepted media type from the provided HTTP request.
            </summary>
      <param name="request">The HTTP request.</param>
      <returns>A <see cref="T:System.String" /> containing the preferred media type.</returns>
    </member>
    <member name="M:RestFoundation.Runtime.ContentNegotiator.IsBrowserRequest(RestFoundation.IHttpRequest)">
      <summary>
            Returns a <see cref="T:System.Boolean" /> value indicating whether the HTTP request
            came from a web browser directly.
            </summary>
      <param name="request">The HTTP request.</param>
      <returns>
            true if the HTTP request came from a web browser; otherwise, false.
            </returns>
    </member>
    <member name="T:RestFoundation.IServiceBehaviorInvoker">
      <summary>
            Defines a service behavior invoker.
            </summary>
    </member>
    <member name="M:RestFoundation.IServiceBehaviorInvoker.InvokeOnAuthorizingBehaviors(System.Collections.Generic.IList{RestFoundation.Behaviors.ISecureServiceBehavior},System.Object,System.Reflection.MethodInfo)">
      <summary>
            Invokes <see cref="T:RestFoundation.Behaviors.ISecureServiceBehavior" /> behaviors.
            </summary>
      <param name="behaviors">The list of behaviors.</param>
      <param name="service">The service instance.</param>
      <param name="method">The service method.</param>
    </member>
    <member name="M:RestFoundation.IServiceBehaviorInvoker.InvokeOnExecutingBehaviors(System.Collections.Generic.IList{RestFoundation.Behaviors.IServiceBehavior},System.Object,System.Reflection.MethodInfo,System.Object)">
      <summary>
            Invokes <see cref="T:RestFoundation.Behaviors.IServiceBehavior" /> behaviors before a service method is called.
            </summary>
      <param name="behaviors">The list of behaviors.</param>
      <param name="service">The service instance.</param>
      <param name="method">The service method.</param>
      <param name="resource">The input resource for the service method.</param>
      <returns>A service method action.</returns>
    </member>
    <member name="M:RestFoundation.IServiceBehaviorInvoker.InvokeOnExecutedBehaviors(System.Collections.Generic.IList{RestFoundation.Behaviors.IServiceBehavior},System.Object,System.Reflection.MethodInfo,System.Object)">
      <summary>
            Invokes <see cref="T:RestFoundation.Behaviors.IServiceBehavior" /> behaviors after a service method has been called.
            </summary>
      <param name="behaviors">The list of behaviors.</param>
      <param name="service">The service instance.</param>
      <param name="method">The service method.</param>
      <param name="returnedObj">The service method returned object.</param>
    </member>
    <member name="T:RestFoundation.Security.Credentials">
      <summary>
            Represents the credentials of an authenticated and authorized user.
            </summary>
    </member>
    <member name="M:RestFoundation.Security.Credentials.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Security.Credentials" /> class.
            </summary>
      <param name="userName">The user name.</param>
      <param name="password">The user password.</param>
      <param name="roles">A list of the user roles.</param>
    </member>
    <member name="M:RestFoundation.Security.Credentials.GetRoles">
      <summary>
            Returns a read only list of user roles.
            </summary>
      <returns>An array of user roles.</returns>
    </member>
    <member name="M:RestFoundation.Security.Credentials.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:RestFoundation.Security.Credentials" /> is equal to the current <see cref="T:RestFoundation.Security.Credentials" />.
            </summary>
      <returns>
            true if the specified <see cref="T:RestFoundation.Security.Credentials" /> is equal to the current <see cref="T:RestFoundation.Security.Credentials" />; otherwise, false.
            </returns>
      <param name="obj">The <see cref="T:RestFoundation.Security.Credentials" /> to compare with the current <see cref="T:RestFoundation.Security.Credentials" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:RestFoundation.Security.Credentials.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:RestFoundation.Security.Credentials.UserName">
      <summary>
            Gets the user name.
            </summary>
    </member>
    <member name="P:RestFoundation.Security.Credentials.Password">
      <summary>
            Gets the user password.
            </summary>
    </member>
    <member name="T:RestFoundation.Security.IPAddressCollection">
      <summary>
            Represents an IP address collection
            </summary>
    </member>
    <member name="M:RestFoundation.Security.IPAddressCollection.MoveNext">
      <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
      <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has
            passed the end of the collection.
            </returns>
    </member>
    <member name="M:RestFoundation.Security.IPAddressCollection.Reset">
      <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
    </member>
    <member name="M:RestFoundation.Security.IPAddressCollection.Dispose">
      <summary>
            Disposes the collection instance.
            </summary>
    </member>
    <member name="P:RestFoundation.Security.IPAddressCollection.Count">
      <summary>
            Gets a count of usable IP addresses.
            </summary>
    </member>
    <member name="P:RestFoundation.Security.IPAddressCollection.Current">
      <summary>
            Gets the current IP address in the collection.
            </summary>
    </member>
    <member name="P:RestFoundation.Security.IPAddressCollection.Item(System.Double)">
      <summary>
            Gets an IP address at the provided index.
            </summary>
      <param name="i">The index.</param>
      <returns>An IP address at the specified index.</returns>
    </member>
    <member name="T:RestFoundation.Security.IPAddressRange">
      <summary>
            Represents an IP address range.
            </summary>
    </member>
    <member name="M:RestFoundation.Security.IPAddressRange.#ctor(System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Security.IPAddressRange" /> class.
            </summary>
      <param name="address">
            A single IP address to become the lower and the upper range bound.
            </param>
    </member>
    <member name="M:RestFoundation.Security.IPAddressRange.#ctor(RestFoundation.Security.IPNetwork)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Security.IPAddressRange" /> class.
            </summary>
      <param name="cidr">
            An IP network that represents a starting IP and a subnet in a CIDR notation.
            </param>
    </member>
    <member name="M:RestFoundation.Security.IPAddressRange.#ctor(System.Net.IPAddress,System.Net.IPAddress)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Security.IPAddressRange" /> class.
            </summary>
      <param name="lower">An IP address to become the lower range bound.</param>
      <param name="upper">An IP address to become the upper range bound.</param>
    </member>
    <member name="M:RestFoundation.Security.IPAddressRange.GetConfiguredRanges(System.String)">
      <summary>
            Gets a sequence of configured IP ranges from the provided configuration file section.
            </summary>
      <param name="sectionName">A section name in the web.config/app.config file.</param>
      <returns>A sequence of IP ranges.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPAddressRange.IsInRange(System.String)">
      <summary>
            Returns a value indicating whether the IP address is in the current IP range.
            </summary>
      <param name="address">An IP address to check.</param>
      <returns>
            true if the provided address is in the current IP range; otherwise, false.
            </returns>
    </member>
    <member name="M:RestFoundation.Security.IPAddressRange.IsInRange(System.Net.IPAddress)">
      <summary>
            Returns a value indicating whether the IP address is in the current IP range.
            </summary>
      <param name="address">An IP address to check.</param>
      <returns>
            true if the provided address is in the current IP range; otherwise, false.
            </returns>
    </member>
    <member name="T:RestFoundation.Security.IPNetwork">
      <summary>
            Represents an IP network including a starting IP and a subnet.
            </summary>
      <remarks>
            Unlike the <see cref="T:RestFoundation.Security.IPAddressRange" /> class, currently this class only works with IPv4.
            Use an address range instead of CIDR notation in the configuration file for IPv6 addresses.
            </remarks>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.Parse(System.String,System.String)">
      <summary>
            Parses an IP address and a netmask into a <see cref="T:RestFoundation.Security.IPNetwork" /> object.
            </summary>
      <param name="ipaddress">The address.</param>
      <param name="netmask">The netmask.</param>
      <returns>A new <see cref="T:RestFoundation.Security.IPNetwork" /> instance.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.Parse(System.String,System.Byte)">
      <summary>
            Parses an IP address and a CIDR byte into a <see cref="T:RestFoundation.Security.IPNetwork" /> object.
            </summary>
      <param name="ipaddress">The address.</param>
      <param name="cidr">The CIDR byte.</param>
      <returns>A new <see cref="T:RestFoundation.Security.IPNetwork" /> instance.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.Parse(System.Net.IPAddress,System.Net.IPAddress)">
      <summary>
            Parses an IP address and a netmask into a <see cref="T:RestFoundation.Security.IPNetwork" /> object.
            </summary>
      <param name="ipaddress">The address.</param>
      <param name="netmask">The netmask.</param>
      <returns>A new <see cref="T:RestFoundation.Security.IPNetwork" /> instance.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.Parse(System.String)">
      <summary>
            Parses a network string in CIDR notation into a <see cref="T:RestFoundation.Security.IPNetwork" /> object.
            </summary>
      <param name="network">The network string.</param>
      <returns>A new <see cref="T:RestFoundation.Security.IPNetwork" /> instance.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.TryParse(System.String,System.String,RestFoundation.Security.IPNetwork@)">
      <summary>
            Tries to parse an IP address and a netmask into a <see cref="T:RestFoundation.Security.IPNetwork" /> object.
            </summary>
      <param name="ipaddress">The address.</param>
      <param name="netmask">The netmask.</param>
      <param name="ipnetwork">The network object.</param>
      <returns>true if the address was parsed successfully; otherwise, false.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.TryParse(System.String,System.Byte,RestFoundation.Security.IPNetwork@)">
      <summary>
            Tries to parse an IP address and a CIDR byte into a <see cref="T:RestFoundation.Security.IPNetwork" /> object.
            </summary>
      <param name="ipaddress">The address.</param>
      <param name="cidr">The CIDR byte.</param>
      <param name="ipnetwork">The network object.</param>
      <returns>true if the address was parsed successfully; otherwise, false.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.TryParse(System.String,RestFoundation.Security.IPNetwork@)">
      <summary>
            Tries to parse a network string in CIDR notation into a <see cref="T:RestFoundation.Security.IPNetwork" /> object.
            </summary>
      <param name="network">The network string.</param>
      <param name="ipnetwork">The network object.</param>
      <returns>true if the address was parsed successfully; otherwise, false.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.TryParse(System.Net.IPAddress,System.Net.IPAddress,RestFoundation.Security.IPNetwork@)">
      <summary>
            Tries to parse an IP address and a netmask into a <see cref="T:RestFoundation.Security.IPNetwork" /> object.
            </summary>
      <param name="ipaddress">The address.</param>
      <param name="netmask">The netmask.</param>
      <param name="ipnetwork">The network object.</param>
      <returns>true if the address was parsed successfully; otherwise, false.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.Supernet(RestFoundation.Security.IPNetwork[])">
      <summary>
            Gets the supernet for an array of networks.
            </summary>
      <param name="ipnetworks">An array of networks.</param>
      <returns>An array of super networks.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.TrySupernet(RestFoundation.Security.IPNetwork[],RestFoundation.Security.IPNetwork[]@)">
      <summary>
            Tries to get the supernet for an array of networks.
            </summary>
      <param name="ipnetworks">An array of networks.</param>
      <param name="supernet">An array of super networks.</param>
      <returns>true if the operation was performed successfully; otherwise, false.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.InternalSupernet(System.Boolean,RestFoundation.Security.IPNetwork[],RestFoundation.Security.IPNetwork[]@)">
      <summary>
            Tries to get the internal supernet for an array of networks.
            </summary>
      <param name="trySupernet">A value indicating whether to try to get the supernet.</param>
      <param name="ipnetworks">An array of networks.</param>
      <param name="supernet">An array of super networks.</param>
      <returns>true if the operation was performed successfully; otherwise, false.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.ToUint(System.Net.IPAddress)">
      <summary>
            Converts an IP address to an unsigned integer.
            </summary>
      <param name="ipaddress">The IP address.</param>
      <returns>The <see cref="T:System.UInt32" /> value.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.TryToUint(System.Net.IPAddress,System.Nullable{System.UInt32}@)">
      <summary>
            Tries to convert an IP address to an unsigned integer.
            </summary>
      <param name="ipaddress">The IP address.</param>
      <param name="uintIPAddress">The <see cref="T:System.UInt32" /> value.</param>
      <returns>true if the operation was performed successfully; otherwise, false.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.ToCidr(System.Net.IPAddress)">
      <summary>
            Gets the CIDR byte from a net mask.
            </summary>
      <param name="netmask">The net mask.</param>
      <returns>The CIDR byte.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.TryToCidr(System.Net.IPAddress,System.Nullable{System.Byte}@)">
      <summary>
            Tries to get the CIDR byte from a net mask.
            </summary>
      <param name="netmask">The net mask.</param>
      <param name="cidr">The CIDR byte.</param>
      <returns>true if the operation was performed successfully; otherwise, false.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.ToNetmask(System.Byte)">
      <summary>
            Gets the net mask from a CIDR byte.
            </summary>
      <param name="cidr">The CIDR byte.</param>
      <returns>The net mask.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.TryToNetmask(System.Byte,System.Net.IPAddress@)">
      <summary>
            Tries to get the net mask from a CIDR byte.
            </summary>
      <param name="cidr">The CIDR byte.</param>
      <param name="netmask">The net mask.</param>
      <returns>true if the operation was performed successfully; otherwise, false.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.BitsSet(System.Net.IPAddress)">
      <summary>
            Returns the number of bits set for a net mask.
            </summary>
      <param name="netmask">The net mask.</param>
      <returns>A number of bits set.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.ToUint(System.Byte)">
      <summary>
            Converts a CIDR byte to a unsigned integer notation.
            </summary>
      <param name="cidr">The CIDR byte.</param>
      <returns>The <see cref="T:System.UInt32" /> value.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.TryToUint(System.Byte,System.Nullable{System.UInt32}@)">
      <summary>
            Tries to convert a CIDR byte to a unsigned integer notation.
            </summary>
      <param name="cidr">The CIDR byte.</param>
      <param name="uintNetmask">The <see cref="T:System.UInt32" /> value.</param>
      <returns>true if the operation was performed successfully; otherwise, false.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.ValidNetmask(System.Net.IPAddress)">
      <summary>
            Returns whether the net mask is valid.
            </summary>
      <param name="netmask">The nest mask.</param>
      <returns>true if valid; otherwise false.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.ToIPAddress(System.UInt32)">
      <summary>
            Converts an unsigned integer IP address notation to an <see cref="T:System.Net.IPAddress" /> object.
            </summary>
      <param name="ipaddress">The <see cref="T:System.UInt32" /> containing the IP address.</param>
      <returns>The <see cref="T:System.Net.IPAddress" /> instance.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.Contains(RestFoundation.Security.IPNetwork,System.Net.IPAddress)">
      <summary>
            Returns whether the network contains the provided IP address.
            </summary>
      <param name="network">The network.</param>
      <param name="ipaddress">The IP address.</param>
      <returns>true if the network contains the IP address; otherwise, false.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.Contains(RestFoundation.Security.IPNetwork,RestFoundation.Security.IPNetwork)">
      <summary>
            Returns a value indicating whether the network contains the provided sub-network.
            </summary>
      <param name="network">The network.</param>
      <param name="network2">The sub-network.</param>
      <returns>true if the network contains the IP addresses in the sub-network; otherwise, false.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.Overlap(RestFoundation.Security.IPNetwork,RestFoundation.Security.IPNetwork)">
      <summary>
            Returns a value indicating whether there are overlapped IP addresses in the 2 networks provided.
            </summary>
      <param name="network">The first network.</param>
      <param name="network2">The second network.</param>
      <returns>true if there is overlap in addresses; otherwise, false.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.Subnet(RestFoundation.Security.IPNetwork,System.Byte)">
      <summary>
            Gets the subnet from the network and CIDR notation.
            </summary>
      <param name="network">The network.</param>
      <param name="cidr">The CIDR byte.</param>
      <returns>The subnet.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.TrySubnet(RestFoundation.Security.IPNetwork,System.Byte,RestFoundation.Security.IPNetworkCollection@)">
      <summary>
            Tries to get the subnet from the network and CIDR notation.
            </summary>
      <param name="network">The network.</param>
      <param name="cidr">The CIDR byte.</param>
      <param name="ipnetworkCollection">The subnet.</param>
      <returns>true if the subnet was calculated successfully; otherwise, false.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.Supernet(RestFoundation.Security.IPNetwork,RestFoundation.Security.IPNetwork)">
      <summary>
            Gets the supernet for the two networks.
            </summary>
      <param name="network1">The first network.</param>
      <param name="network2">The second network.</param>
      <returns>The supernet.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.TrySupernet(RestFoundation.Security.IPNetwork,RestFoundation.Security.IPNetwork,RestFoundation.Security.IPNetwork@)">
      <summary>
            Tries to get the supernet for the two networks.
            </summary>
      <param name="network1">The first network.</param>
      <param name="network2">The second network.</param>
      <param name="supernet">The supernet.</param>
      <returns>true if the supernet exists; otherwise, false.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.TryGuessCidr(System.String,System.Byte@)">
      <summary>
            Tries to guess CIDR byte from an IP notation.
            </summary>
      <param name="ip">A <see cref="T:System.String" /> IP notation.</param>
      <param name="cidr">The CIDR byte.</param>
      <returns>True if the CIDR was guessed correctly; otherwise, false.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.TryParseCidr(System.String,System.Nullable{System.Byte}@)">
      <summary>
            Tries to parse CIDR byte from string notation..
            </summary>
      <param name="sidr">A <see cref="T:System.String" /> CIDR notation.</param>
      <param name="cidr">The CIDR byte.</param>
      <returns>True if the CIDR was parsed correctly; otherwise, false.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.ListIPAddress(RestFoundation.Security.IPNetwork)">
      <summary>
            Lists all IP addresses for the network.
            </summary>
      <param name="ipnetwork">The network.</param>
      <returns>A collection of IP addresses.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.WideSubnet(System.String,System.String)">
      <summary>
            Returns a network that spans IP addresses from <paramref name="start" /> to <paramref name="end" />.
            </summary>
      <param name="start">The first IP address.</param>
      <param name="end">The last IP address.</param>
      <returns>The <see cref="T:RestFoundation.Security.IPNetwork" /> instance that spans the provided addresses.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.TryWideSubnet(RestFoundation.Security.IPNetwork[],RestFoundation.Security.IPNetwork@)">
      <summary>
            Tries to return a network that spans the provided networks.
            </summary>
      <param name="ipnetworks">An array of networks.</param>
      <param name="ipnetwork">The <see cref="T:RestFoundation.Security.IPNetwork" /> instance that spans the provided addresses.</param>
      <returns>true if wide subnet was calculated successfully; otherwise, false.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.WideSubnet(RestFoundation.Security.IPNetwork[])">
      <summary>
            Returns a wide subnet that spans the provided networks.
            </summary>
      <param name="ipnetworks">An array of networks.</param>
      <returns>The <see cref="T:RestFoundation.Security.IPNetwork" /> instance that spans the provided networks.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:RestFoundation.Security.IPNetwork" /> instances are considered equal.
            </summary>
      <param name="obj">The <see cref="T:RestFoundation.Security.IPNetwork" /> to compare with the current <see cref="T:RestFoundation.Security.IPNetwork" />.</param>
      <returns>true if the specified System.Object is equal to the current System.Object; otherwise, false.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.GetHashCode">
      <summary>
            Serves as a hash function for the <see cref="T:RestFoundation.Security.IPNetwork" /> type.
            </summary>
      <returns>A hash code for the current <see cref="T:RestFoundation.Security.IPNetwork" />.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:RestFoundation.Security.IPNetwork" />.
            </summary>
      <returns>A <see cref="T:System.String" /> that represents the current<see cref="T:RestFoundation.Security.IPNetwork" />.</returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetwork.CompareTo(RestFoundation.Security.IPNetwork)">
      <summary>
            Compares the current object with another object of the same type.
            </summary>
      <param name="other">An object to compare with this object.</param>
      <returns>
            A value that indicates the relative order of the objects being compared.
            The return value has the following meanings: Value Meaning Less than zero
            This object is less than the other parameter.Zero This object is equal to
            other. Greater than zero This object is greater than other.
            </returns>
    </member>
    <member name="P:RestFoundation.Security.IPNetwork.Broadcast">
      <summary>
            Gets a broadcast IP address.
            </summary>
    </member>
    <member name="P:RestFoundation.Security.IPNetwork.FirstUsable">
      <summary>
            Gets the first usable IP address.
            </summary>
    </member>
    <member name="P:RestFoundation.Security.IPNetwork.LastUsable">
      <summary>
            Gets the last usable IP address.
            </summary>
    </member>
    <member name="P:RestFoundation.Security.IPNetwork.Netmask">
      <summary>
            Gets the net mask.
            </summary>
    </member>
    <member name="P:RestFoundation.Security.IPNetwork.Network">
      <summary>
            Gets the network as an IP address.
            </summary>
    </member>
    <member name="P:RestFoundation.Security.IPNetwork.Cidr">
      <summary>
            Gets the CIDR byte.
            </summary>
    </member>
    <member name="P:RestFoundation.Security.IPNetwork.Usable">
      <summary>
            Gets a number of usable IP addresses.
            </summary>
    </member>
    <member name="T:RestFoundation.Security.IPNetworkCollection">
      <summary>
            Represents an IP network collection.
            </summary>
    </member>
    <member name="M:RestFoundation.Security.IPNetworkCollection.MoveNext">
      <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
      <returns>
            true if the enumerator was successfully advanced to the next element; false if the enumerator has
            passed the end of the collection.
            </returns>
    </member>
    <member name="M:RestFoundation.Security.IPNetworkCollection.Reset">
      <summary>
            Sets the enumerator to its initial position, which is before the first element in the collection.
            </summary>
    </member>
    <member name="M:RestFoundation.Security.IPNetworkCollection.Dispose">
      <summary>
            Disposes the collection instance.
            </summary>
    </member>
    <member name="P:RestFoundation.Security.IPNetworkCollection.Count">
      <summary>
            Gets a count of usable IP addresses.
            </summary>
    </member>
    <member name="P:RestFoundation.Security.IPNetworkCollection.Current">
      <summary>
            Gets the current IP network in the collection.
            </summary>
    </member>
    <member name="P:RestFoundation.Security.IPNetworkCollection.Item(System.Double)">
      <summary>
            Gets the current IP network in the collection.
            </summary>
      <param name="i">A collection index value.</param>
      <returns>The IP network value.</returns>
    </member>
    <member name="T:RestFoundation.Behaviors.AclBehavior">
      <summary>
            Represents an IP filtering secure behavior for a service or a service method.
            </summary>
    </member>
    <member name="M:RestFoundation.Behaviors.AclBehavior.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Behaviors.AclBehavior" /> class.
            </summary>
      <param name="nameValueSectionName">The Web.Config name-value section name containing the ACL list.</param>
    </member>
    <member name="M:RestFoundation.Behaviors.AclBehavior.OnMethodAuthorizing(RestFoundation.IServiceContext,RestFoundation.Behaviors.MethodAuthorizingContext)">
      <summary>
            Called during the authorization process before a service method or behavior is executed.
            </summary>
      <param name="serviceContext">The service context.</param>
      <param name="behaviorContext">The "method authorizing" behavior context.</param>
      <returns>A service method action.</returns>
    </member>
    <member name="T:RestFoundation.Behaviors.DigestAuthenticationBehavior">
      <summary>
            Represents a basic authentication secure behavior for a service or a service method.
            </summary>
    </member>
    <member name="T:RestFoundation.Behaviors.DigestAuthenticationBehavior.QualityOfProtection">
      <summary>
            Contains the quality of protection values for digest authentication.
            </summary>
    </member>
    <member name="M:RestFoundation.Behaviors.DigestAuthenticationBehavior.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Behaviors.DigestAuthenticationBehavior" /> class.
            </summary>
    </member>
    <member name="M:RestFoundation.Behaviors.DigestAuthenticationBehavior.#ctor(RestFoundation.Security.IAuthorizationManager)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Behaviors.DigestAuthenticationBehavior" /> class.
            </summary>
      <param name="authorizationManager">The authorization manager.</param>
    </member>
    <member name="M:RestFoundation.Behaviors.DigestAuthenticationBehavior.OnMethodAuthorizing(RestFoundation.IServiceContext,RestFoundation.Behaviors.MethodAuthorizingContext)">
      <summary>
            Called during the authorization process before a service method or behavior is executed.
            </summary>
      <param name="serviceContext">The service context.</param>
      <param name="behaviorContext">The "method authorizing" behavior context.</param>
      <returns>A service method action.</returns>
    </member>
    <member name="M:RestFoundation.Behaviors.DigestAuthenticationBehavior.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:RestFoundation.Behaviors.DigestAuthenticationBehavior.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the <see cref="T:RestFoundation.Behaviors.DigestAuthenticationBehavior" /> and optionally releases the managed resources.
            </summary>
      <param name="disposing">
            true to release both managed and unmanaged resources; false to release only unmanaged resources.
            </param>
    </member>
    <member name="P:RestFoundation.Behaviors.DigestAuthenticationBehavior.NonceLifetime">
      <summary>
            Gets or sets the nonce lifetime.
            </summary>
    </member>
    <member name="P:RestFoundation.Behaviors.DigestAuthenticationBehavior.Qop">
      <summary>
            Gets or sets the quality of protection value.
            </summary>
    </member>
    <member name="T:RestFoundation.Collections.IStringValueCollection">
      <summary>
            Defines an string value collection.
            </summary>
    </member>
    <member name="M:RestFoundation.Collections.IStringValueCollection.Get(System.String)">
      <summary>
            Gets a value by the key in the collection.
            </summary>
      <param name="key">The key.</param>
      <returns>The corresponding value.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">If the key is not a part of the collection.</exception>
    </member>
    <member name="M:RestFoundation.Collections.IStringValueCollection.TryGet(System.String)">
      <summary>
            Gets a value by the key in the collection or null if the key is not a part of the collection.
            </summary>
      <param name="key">The key.</param>
      <returns>The corresponding value.</returns>
    </member>
    <member name="M:RestFoundation.Collections.IStringValueCollection.GetValues(System.String)">
      <summary>
            Returns all values associated with the key as a collection.
            </summary>
      <param name="key">The key.</param>
      <returns>The list of values for the key.</returns>
    </member>
    <member name="M:RestFoundation.Collections.IStringValueCollection.ToNameValueCollection">
      <summary>
            Returns the pairs of keys and objects as a name-value collection.
            </summary>
      <returns>The name-value collection of keys and objects.</returns>
    </member>
    <member name="P:RestFoundation.Collections.IStringValueCollection.Keys">
      <summary>
            Gets a list of all keys.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IStringValueCollection.Count">
      <summary>
            Gets a value containing the count of all collection items.
            </summary>
    </member>
    <member name="T:RestFoundation.Collections.Concrete.StringValueCollection">
      <summary>
            Represents a string value collection.
            </summary>
    </member>
    <member name="M:RestFoundation.Collections.Concrete.StringValueCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:RestFoundation.Collections.Concrete.StringValueCollection.Get(System.String)">
      <summary>
            Gets a value by the key in the collection.
            </summary>
      <param name="key">The key.</param>
      <returns>The corresponding value.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">If the key is not a part of the collection.</exception>
    </member>
    <member name="M:RestFoundation.Collections.Concrete.StringValueCollection.TryGet(System.String)">
      <summary>
            Gets a value by the key in the collection or null if the key is not a part of the collection.
            </summary>
      <param name="key">The key.</param>
      <returns>The corresponding value.</returns>
    </member>
    <member name="M:RestFoundation.Collections.Concrete.StringValueCollection.GetValues(System.String)">
      <summary>
            Returns all values associated with the key as a collection.
            </summary>
      <param name="key">The key.</param>
      <returns>The list of values for the key.</returns>
    </member>
    <member name="M:RestFoundation.Collections.Concrete.StringValueCollection.ToNameValueCollection">
      <summary>
            Returns the pairs of keys and objects as a name-value collection.
            </summary>
      <returns>The name-value collection of keys and objects.</returns>
    </member>
    <member name="M:RestFoundation.Collections.Concrete.StringValueCollection.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.StringValueCollection.Keys">
      <summary>
            Gets a list of all keys.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.StringValueCollection.Count">
      <summary>
            Gets a value containing the count of all collection items.
            </summary>
    </member>
    <member name="T:RestFoundation.Collections.IServerVariableCollection">
      <summary>
            Defines a server variable collection.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IServerVariableCollection.ApplicationPoolId">
      <summary>
            Gets the IIS application pool identifier.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IServerVariableCollection.HttpVersion">
      <summary>
            Gets the HTTP protocol version.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IServerVariableCollection.LocalAddress">
      <summary>
            Gets the local server IP address.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IServerVariableCollection.RemoteAddress">
      <summary>
            Gets the user IP address.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IServerVariableCollection.RemotePort">
      <summary>
            Gets the user remote port.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IServerVariableCollection.RemoteUser">
      <summary>
            Gets the remote user name.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IServerVariableCollection.ServerName">
      <summary>
            Gets the server name.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IServerVariableCollection.ServerPort">
      <summary>
            Gets the server port.
            </summary>
    </member>
    <member name="T:RestFoundation.Collections.Concrete.ServerVariableCollection">
      <summary>
            Represents a server variable collection.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.ServerVariableCollection.ApplicationPoolId">
      <summary>
            Gets the IIS application pool identifier.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.ServerVariableCollection.HttpVersion">
      <summary>
            Gets the HTTP protocol version.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.ServerVariableCollection.LocalAddress">
      <summary>
            Gets the local server IP address.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.ServerVariableCollection.RemoteAddress">
      <summary>
            Gets the user IP address.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.ServerVariableCollection.RemotePort">
      <summary>
            Gets the user remote port.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.ServerVariableCollection.RemoteUser">
      <summary>
            Gets the remote user name.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.ServerVariableCollection.ServerName">
      <summary>
            Gets the server name.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.ServerVariableCollection.ServerPort">
      <summary>
            Gets the server port.
            </summary>
    </member>
    <member name="T:RestFoundation.ResponseHeaderNames">
      <summary>
            Defines HTTP response header names.
            </summary>
    </member>
    <member name="F:RestFoundation.ResponseHeaderNames.AcceptRanges">
      <summary>
            Accept-Ranges
            </summary>
    </member>
    <member name="F:RestFoundation.ResponseHeaderNames.AccessControlAllowCredentials">
      <summary>
            Access-Control-Allow-Credentials
            </summary>
    </member>
    <member name="F:RestFoundation.ResponseHeaderNames.AccessControlAllowHeaders">
      <summary>
            Access-Control-Allow-Headers
            </summary>
    </member>
    <member name="F:RestFoundation.ResponseHeaderNames.AccessControlAllowMethods">
      <summary>
            Access-Control-Allow-Methods
            </summary>
    </member>
    <member name="F:RestFoundation.ResponseHeaderNames.AccessControlAllowOrigin">
      <summary>
            Access-Control-Allow-Origin
            </summary>
    </member>
    <member name="F:RestFoundation.ResponseHeaderNames.AccessControlMaxAge">
      <summary>
            Access-Control-Max-Age
            </summary>
    </member>
    <member name="F:RestFoundation.ResponseHeaderNames.ContentLength">
      <summary>
            Content-Length
            </summary>
    </member>
    <member name="F:RestFoundation.ResponseHeaderNames.ContentRange">
      <summary>
            Content-Range
            </summary>
    </member>
    <member name="F:RestFoundation.ResponseHeaderNames.ContentType">
      <summary>
            Content-Type
            </summary>
    </member>
    <member name="F:RestFoundation.ResponseHeaderNames.ContentDisposition">
      <summary>
            Content-Disposition
            </summary>
    </member>
    <member name="F:RestFoundation.ResponseHeaderNames.ContentEncoding">
      <summary>
            Content-Encoding
            </summary>
    </member>
    <member name="F:RestFoundation.ResponseHeaderNames.ContentLanguage">
      <summary>
            Content-Language
            </summary>
    </member>
    <member name="F:RestFoundation.ResponseHeaderNames.ContentLocation">
      <summary>
            Content-Location
            </summary>
    </member>
    <member name="F:RestFoundation.ResponseHeaderNames.ETag">
      <summary>
            ETag
            </summary>
    </member>
    <member name="F:RestFoundation.ResponseHeaderNames.Location">
      <summary>
            Location
            </summary>
    </member>
    <member name="F:RestFoundation.ResponseHeaderNames.Warning">
      <summary>
            Warning
            </summary>
    </member>
    <member name="T:RestFoundation.Configuration.GlobalBehaviorBuilder">
      <summary>
            Represents a global behavior builder.
            </summary>
    </member>
    <member name="M:RestFoundation.Configuration.GlobalBehaviorBuilder.AddGlobalBehaviors(RestFoundation.Behaviors.IServiceBehavior[])">
      <summary>
            Adds the provided global behaviors.
            </summary>
      <param name="behaviors">An array of behavior instances.</param>
    </member>
    <member name="M:RestFoundation.Configuration.GlobalBehaviorBuilder.GetGlobalBehaviors">
      <summary>
            Gets all registered global behaviors.
            </summary>
      <returns>A sequence of behavior instances.</returns>
    </member>
    <member name="M:RestFoundation.Configuration.GlobalBehaviorBuilder.RemoveGlobalBehavior(RestFoundation.Behaviors.IServiceBehavior)">
      <summary>
            Removes/unregisters a global behavior instance.
            </summary>
      <param name="behavior">The behavior instance.</param>
      <returns>true if the behavior was removed; false if the behavior instance had not been registered</returns>
    </member>
    <member name="M:RestFoundation.Configuration.GlobalBehaviorBuilder.ClearGlobalBehaviors">
      <summary>
            Clears/unregisters all global behaviors.
            </summary>
    </member>
    <member name="T:RestFoundation.Behaviors.BasicAuthenticationBehavior">
      <summary>
            Represents a basic authentication secure behavior for a service or a service method.
            </summary>
    </member>
    <member name="M:RestFoundation.Behaviors.BasicAuthenticationBehavior.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Behaviors.BasicAuthenticationBehavior" /> class.
            </summary>
    </member>
    <member name="M:RestFoundation.Behaviors.BasicAuthenticationBehavior.#ctor(RestFoundation.Security.IAuthorizationManager)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Behaviors.BasicAuthenticationBehavior" /> class.
            </summary>
      <param name="authorizationManager">The authorization manager.</param>
    </member>
    <member name="M:RestFoundation.Behaviors.BasicAuthenticationBehavior.OnMethodAuthorizing(RestFoundation.IServiceContext,RestFoundation.Behaviors.MethodAuthorizingContext)">
      <summary>
            Called during the authorization process before a service method or behavior is executed.
            </summary>
      <param name="serviceContext">The service context.</param>
      <param name="behaviorContext">The "method authorizing" behavior context.</param>
      <returns>A service method action.</returns>
    </member>
    <member name="T:RestFoundation.Behaviors.HttpsOnlyBehavior">
      <summary>
            Represents an HTTPS secure behavior for a service or a service method. Any unsecure
            HTTP connection will set a 403 (Forbidden) HTTP status code if the connection is not secure.
            </summary>
    </member>
    <member name="M:RestFoundation.Behaviors.HttpsOnlyBehavior.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Behaviors.HttpsOnlyBehavior" /> class.
            Load balancer support is disabled by default.
            </summary>
    </member>
    <member name="M:RestFoundation.Behaviors.HttpsOnlyBehavior.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Behaviors.HttpsOnlyBehavior" /> class.
            </summary>
      <param name="enableLoadBalancerSupport">
            A value indicating whether the load balancer support for forwarding HTTPS traffic over an HTTP
            channel is allowed.
            </param>
    </member>
    <member name="M:RestFoundation.Behaviors.HttpsOnlyBehavior.OnMethodAuthorizing(RestFoundation.IServiceContext,RestFoundation.Behaviors.MethodAuthorizingContext)">
      <summary>
            Called during the authorization process before a service method or behavior is executed.
            </summary>
      <param name="serviceContext">The service context.</param>
      <param name="behaviorContext">The "method authorizing" behavior context.</param>
      <returns>A service method action.</returns>
    </member>
    <member name="T:RestFoundation.Behaviors.ResourceValidationBehavior">
      <summary>
            Represents a resource validation behavior for a service or a service method.
            This behavior is set as global service behavior by the default REST configuration.
            </summary>
    </member>
    <member name="M:RestFoundation.Behaviors.ResourceValidationBehavior.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Behaviors.ResourceValidationBehavior" /> class.
            </summary>
    </member>
    <member name="M:RestFoundation.Behaviors.ResourceValidationBehavior.#ctor(RestFoundation.Validation.IResourceValidator)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Behaviors.ResourceValidationBehavior" /> class.
            </summary>
      <param name="validator">The resource validator.</param>
    </member>
    <member name="M:RestFoundation.Behaviors.ResourceValidationBehavior.OnMethodExecuting(RestFoundation.IServiceContext,RestFoundation.Behaviors.MethodExecutingContext)">
      <summary>
            Called before a service method is executed.
            </summary>
      <param name="serviceContext">The service context.</param>
      <param name="behaviorContext">The "method executing" behavior context.</param>
      <returns>A service method action.</returns>
    </member>
    <member name="T:RestFoundation.ResourceAttribute">
      <summary>
            Represents a service contract method parameter attribute that indicates that the parameter
            is used to bind the resource for POST, PATCH and PUT HTTP methods. Only one resource parameter
            is allowed per a service method.
            </summary>
    </member>
    <member name="T:RestFoundation.Client.RestClientFactory">
      <summary>
            Creates <see cref="T:RestFoundation.Client.IRestClient" /> instances.
            </summary>
    </member>
    <member name="M:RestFoundation.Client.RestClientFactory.Create">
      <summary>
            Creates a new <see cref="T:RestFoundation.Client.IRestClient" /> instance with the default resource types and timeouts.
            </summary>
      <returns>The created <see cref="T:RestFoundation.Client.IRestClient" /> instance.</returns>
    </member>
    <member name="M:RestFoundation.Client.RestClientFactory.Create(System.Collections.Generic.IDictionary{RestFoundation.Client.RestResourceType,System.String})">
      <summary>
            Creates a new <see cref="T:RestFoundation.Client.IRestClient" /> instance.
            </summary>
      <param name="resourceTypes">A dictionary of resource types mapped to MIME content types.</param>
      <returns>The created <see cref="T:RestFoundation.Client.IRestClient" /> instance.</returns>
    </member>
    <member name="M:RestFoundation.Client.RestClientFactory.UseBuilder(System.Func{RestFoundation.Client.IRestClientSerializerFactory,System.Collections.Generic.IDictionary{RestFoundation.Client.RestResourceType,System.String},RestFoundation.Client.IRestClient})">
      <summary>
            Sets a delegate to create a REST client instance.
            </summary>
      <param name="builder">A REST client builder delegate.</param>
      <returns>
            An <see cref="T:System.IDisposable" /> to reset the default REST client builder.
            </returns>
    </member>
    <member name="T:RestFoundation.Client.IRestClientSerializerFactory">
      <summary>
            Defines a REST client serializer factory.
            </summary>
    </member>
    <member name="M:RestFoundation.Client.IRestClientSerializerFactory.Create(System.Type,RestFoundation.Client.RestResourceType,System.String)">
      <summary>
            Returns a serializer that matches the object type and the resource content type.
            </summary>
      <param name="objectType">The object type.</param>
      <param name="resourceType">The resource type.</param>
      <param name="xmlNamespace">An optional XML resource namespace.</param>
      <returns>The serializer instance.</returns>
    </member>
    <member name="T:RestFoundation.Client.RestResource">
      <summary>
            Represents a REST HTTP resource without a body.
            This type of resource is commonly used for GET and DELETE operations.
            </summary>
    </member>
    <member name="M:RestFoundation.Client.RestResource.#ctor(RestFoundation.Client.RestResourceType)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Client.RestResource" /> class.
            </summary>
      <param name="type">The resource type.</param>
    </member>
    <member name="M:RestFoundation.Client.RestResource.#ctor(RestFoundation.Client.RestResourceType,System.Net.WebHeaderCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Client.RestResource" /> class.
            </summary>
      <param name="type">The resource type.</param>
      <param name="headers">A collection of HTTP headers to pass to the request.</param>
    </member>
    <member name="P:RestFoundation.Client.RestResource.XmlNamespace">
      <summary>
            Gets or sets an XML namespace for the resource.
            </summary>
    </member>
    <member name="P:RestFoundation.Client.RestResource.Headers">
      <summary>
            Gets the collection of associated HTTP headers.
            </summary>
    </member>
    <member name="P:RestFoundation.Client.RestResource.Type">
      <summary>
            Gets the resource type.
            </summary>
    </member>
    <member name="P:RestFoundation.Client.RestResource.StatusCode">
      <summary>
            Gets the last HTTP status code.
            </summary>
    </member>
    <member name="P:RestFoundation.Client.RestResource.StatusDescription">
      <summary>
            Gets the last HTTP status description.
            </summary>
    </member>
    <member name="T:RestFoundation.Client.RestResource`1">
      <summary>
            Represents a REST HTTP resource with a body.
            This type of resource is commonly used for POST and PUT operations.
            </summary>
      <typeparam name="T">The resource body object type.</typeparam>
    </member>
    <member name="M:RestFoundation.Client.RestResource`1.#ctor(RestFoundation.Client.RestResourceType)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Client.RestResource`1" /> class.
            </summary>
      <param name="type">The resource type.</param>
    </member>
    <member name="M:RestFoundation.Client.RestResource`1.#ctor(RestFoundation.Client.RestResourceType,System.Net.WebHeaderCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Client.RestResource`1" /> class.
            </summary>
      <param name="type">The resource type.</param>
      <param name="headers">A collection of HTTP headers to pass to the request.</param>
    </member>
    <member name="P:RestFoundation.Client.RestResource`1.Body">
      <summary>
            Gets an object to use as the resource body.
            </summary>
    </member>
    <member name="T:RestFoundation.Client.RestResourceType">
      <summary>
            Describes a REST HTTP resource type.
            </summary>
    </member>
    <member name="F:RestFoundation.Client.RestResourceType.None">
      <summary>
            A resource without a body.
            </summary>
    </member>
    <member name="F:RestFoundation.Client.RestResourceType.Json">
      <summary>
            An object serialized as JSON.
            </summary>
    </member>
    <member name="F:RestFoundation.Client.RestResourceType.Xml">
      <summary>
            An object serialized as XML.
            </summary>
    </member>
    <member name="T:RestFoundation.Client.IRestClientSerializer">
      <summary>
            Defines a REST client serializer.
            </summary>
    </member>
    <member name="M:RestFoundation.Client.IRestClientSerializer.SerializeAsync(System.Net.WebRequest,System.Object)">
      <summary>
            Serializes an object into a stream.
            </summary>
      <param name="request">The web request to update.</param>
      <param name="obj">The object to serialize.</param>
      <returns>The serialization task.</returns>
    </member>
    <member name="M:RestFoundation.Client.IRestClientSerializer.DeserializeAsync``1(System.IO.Stream)">
      <summary>
            Deserializes an object of the provided type from the stream.
            </summary>
      <typeparam name="T">The object type.</typeparam>
      <param name="stream">The input stream.</param>
      <returns>The deserialization task.</returns>
    </member>
    <member name="T:RestFoundation.Client.Serializers.JsonClientSerializer">
      <summary>
            Represents a REST client JSON serializer.
            </summary>
    </member>
    <member name="M:RestFoundation.Client.Serializers.JsonClientSerializer.SerializeAsync(System.Net.WebRequest,System.Object)">
      <summary>
            Serializes an object into a stream.
            </summary>
      <param name="request">The web request to update.</param>
      <param name="obj">The object to serialize.</param>
      <returns>The serialization task.</returns>
    </member>
    <member name="M:RestFoundation.Client.Serializers.JsonClientSerializer.DeserializeAsync``1(System.IO.Stream)">
      <summary>
            Deserializes an object of the provided type from the stream.
            </summary>
      <typeparam name="T">The object type.</typeparam>
      <param name="stream">The input stream.</param>
      <returns>The deserialization task.</returns>
    </member>
    <member name="T:RestFoundation.Client.Serializers.RestClientSerializerFactory">
      <summary>
            Represents a REST client serializer factory that supports JSON and XML.
            </summary>
    </member>
    <member name="M:RestFoundation.Client.Serializers.RestClientSerializerFactory.Create(System.Type,RestFoundation.Client.RestResourceType,System.String)">
      <summary>
            Creates a serializer instance based on the object type and the REST resource type.
            </summary>
      <param name="objectType">The object type.</param>
      <param name="resourceType">The resource type.</param>
      <param name="xmlNamespace">An optional XML resource namespace.</param>
      <returns>The serializer instance.</returns>
    </member>
    <member name="T:RestFoundation.Client.Serializers.StringClientSerializer">
      <summary>
            Represents a REST client <see cref="T:System.String" /> serializer.
            </summary>
    </member>
    <member name="M:RestFoundation.Client.Serializers.StringClientSerializer.SerializeAsync(System.Net.WebRequest,System.Object)">
      <summary>
            Serializes an object into a stream.
            </summary>
      <param name="request">The web request to update.</param>
      <param name="obj">The object to serialize.</param>
      <returns>The serialization task.</returns>
    </member>
    <member name="M:RestFoundation.Client.Serializers.StringClientSerializer.DeserializeAsync``1(System.IO.Stream)">
      <summary>
            Deserializes an object of the provided type from the stream.
            </summary>
      <typeparam name="T">The object type.</typeparam>
      <param name="stream">The input stream.</param>
      <returns>The deserialization task.</returns>
    </member>
    <member name="T:RestFoundation.Client.Serializers.XmlClientSerializer">
      <summary>
            Represents a REST client XML serializer.
            </summary>
    </member>
    <member name="M:RestFoundation.Client.Serializers.XmlClientSerializer.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Client.Serializers.XmlClientSerializer" /> class.
            </summary>
      <param name="xmlNamespace">An XML namespace.</param>
    </member>
    <member name="M:RestFoundation.Client.Serializers.XmlClientSerializer.SerializeAsync(System.Net.WebRequest,System.Object)">
      <summary>
            Serializes an object into a stream.
            </summary>
      <param name="request">The web request to update.</param>
      <param name="obj">The object to serialize.</param>
      <returns>The serialization task.</returns>
    </member>
    <member name="M:RestFoundation.Client.Serializers.XmlClientSerializer.DeserializeAsync``1(System.IO.Stream)">
      <summary>
            Deserializes an object of the provided type from the stream.
            </summary>
      <typeparam name="T">The object type.</typeparam>
      <param name="stream">The input stream.</param>
      <returns>The deserialization task.</returns>
    </member>
    <member name="T:RestFoundation.Collections.IHeaderCollection">
      <summary>
            Defines an HTTP header collection.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IHeaderCollection.AcceptType">
      <summary>
            Gets the Accept-Type header value.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IHeaderCollection.AcceptTypes">
      <summary>
            Gets the Accept-Type header value list in the order of preference.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IHeaderCollection.AcceptCharset">
      <summary>
            Gets the Accept-Charset header value.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IHeaderCollection.AcceptCharsets">
      <summary>
            Gets the Accept-Charset header value list in the order of preference.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IHeaderCollection.AcceptCharsetEncoding">
      <summary>
            Gets the Accept-Charset header value as an <see cref="T:System.Text.Encoding" /> object.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IHeaderCollection.AcceptEncoding">
      <summary>
            Gets the Accept-Encoding header value.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IHeaderCollection.AcceptEncodings">
      <summary>
            Gets the Accept-Encoding header value list in the order of preference.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IHeaderCollection.AcceptLanguage">
      <summary>
            Gets the Accept-Language header value.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IHeaderCollection.AcceptLanguages">
      <summary>
            Gets the Accept-Language header value list in the order of preference.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IHeaderCollection.AcceptLanguageCulture">
      <summary>
            Gets the Accept-Language header value as a <see cref="T:System.Globalization.CultureInfo" /> object.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IHeaderCollection.AcceptVersion">
      <summary>
            Gets the version specified in the version parameter of the mime type provided in the
            Accept header value. This value defaults to 0 if no version was specified.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IHeaderCollection.AccessControlRequestHeaders">
      <summary>
            Gets the Access-Control-Request-Headers header value.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IHeaderCollection.AccessControlRequestMethod">
      <summary>
            Gets the Access-Control-Request-Method header value.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IHeaderCollection.ContentType">
      <summary>
            Gets the Content-Type header value.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IHeaderCollection.ContentCharset">
      <summary>
            Gets the charset part of the Content-Type header value.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IHeaderCollection.ContentCharsetEncoding">
      <summary>
            Gets the charset part of the Content-Type header value as an <see cref="T:System.Text.Encoding" /> object.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IHeaderCollection.ContentEncoding">
      <summary>
            Gets the Content-Encoding header value.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IHeaderCollection.ContentLength">
      <summary>
            Gets the Content-Length header value.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IHeaderCollection.ContentLanguage">
      <summary>
            Gets the Content-Language header value.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IHeaderCollection.ContentLanguageCulture">
      <summary>
            Gets the Content-Language header value as a <see cref="T:System.Globalization.CultureInfo" /> object.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IHeaderCollection.Links">
      <summary>
            Gets a list of links specified in the Link header.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IHeaderCollection.Authorization">
      <summary>
            Gets the Authorization header value.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IHeaderCollection.Host">
      <summary>
            Gets the Host header value.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IHeaderCollection.Origin">
      <summary>
            Gets the Origin header value.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IHeaderCollection.Referrer">
      <summary>
            Gets the Referrer header value.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IHeaderCollection.UserAgent">
      <summary>
            Gets the User-Agent header value.
            </summary>
    </member>
    <member name="T:RestFoundation.Collections.Concrete.HeaderCollection">
      <summary>
            Represents an HTTP header collection.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.HeaderCollection.AcceptType">
      <summary>
            Gets the Accept-Type header value.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.HeaderCollection.AcceptTypes">
      <summary>
            Gets the Accept-Type header value list in the order of preference.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.HeaderCollection.AcceptCharset">
      <summary>
            Gets the Accept-Charset header value.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.HeaderCollection.AcceptCharsets">
      <summary>
            Gets the Accept-Charset header value list in the order of preference.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.HeaderCollection.AcceptCharsetEncoding">
      <summary>
            Gets the Accept-Charset header value as an <see cref="T:System.Text.Encoding" /> object.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.HeaderCollection.AcceptEncoding">
      <summary>
            Gets the Accept-Encoding header value.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.HeaderCollection.AcceptEncodings">
      <summary>
            Gets the Accept-Encoding header value list in the order of preference.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.HeaderCollection.AcceptLanguage">
      <summary>
            Gets the Accept-Language header value.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.HeaderCollection.AcceptLanguages">
      <summary>
            Gets the Accept-Language header value list in the order of preference.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.HeaderCollection.AcceptLanguageCulture">
      <summary>
            Gets the Accept-Language header value as a <see cref="T:System.Globalization.CultureInfo" /> object.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.HeaderCollection.AcceptVersion">
      <summary>
            Gets the version specified in the version parameter of the mime type provided in the
            Accept header value. This value defaults to 0 if no version was specified.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.HeaderCollection.AccessControlRequestHeaders">
      <summary>
            Gets the Access-Control-Request-Headers header value.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.HeaderCollection.AccessControlRequestMethod">
      <summary>
            Gets the Access-Control-Request-Method header value.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.HeaderCollection.ContentType">
      <summary>
            Gets the Content-Type header value.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.HeaderCollection.ContentCharset">
      <summary>
            Gets the charset part of the Content-Type header value.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.HeaderCollection.ContentCharsetEncoding">
      <summary>
            Gets the charset part of the Content-Type header value as an <see cref="T:System.Text.Encoding" /> object.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.HeaderCollection.ContentLanguage">
      <summary>
            Gets the Content-Language header value.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.HeaderCollection.ContentLanguageCulture">
      <summary>
            Gets the Content-Language header value as a <see cref="T:System.Globalization.CultureInfo" /> object.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.HeaderCollection.Links">
      <summary>
            Gets a list of links specified in the Link header.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.HeaderCollection.ContentEncoding">
      <summary>
            Gets the Content-Encoding header value.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.HeaderCollection.ContentLength">
      <summary>
            Gets the Content-Length header value.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.HeaderCollection.Authorization">
      <summary>
            Gets the Authorization header value.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.HeaderCollection.Host">
      <summary>
            Gets the Host header value.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.HeaderCollection.Origin">
      <summary>
            Gets the Origin header value.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.HeaderCollection.Referrer">
      <summary>
            Gets the Referrer header value.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.HeaderCollection.UserAgent">
      <summary>
            Gets the User-Agent header value.
            </summary>
    </member>
    <member name="T:RestFoundation.Collections.Specialized.AcceptValueCollection">
      <summary>
            A collection of an Accept* HTTP header values.
            </summary>
    </member>
    <member name="M:RestFoundation.Collections.Specialized.AcceptValueCollection.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Collections.Specialized.AcceptValueCollection" /> class from
            the given string of comma delimited values.
            </summary>
      <param name="values">The raw <see cref="T:System.String" /> of acceptValues to load</param>
    </member>
    <member name="M:RestFoundation.Collections.Specialized.AcceptValueCollection.#ctor(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Collections.Specialized.AcceptValueCollection" /> class from
            the given string a sequence of strings of comma delimited values.
            </summary>
      <param name="values">The array of <see cref="T:RestFoundation.Runtime.AcceptValue" /> strings</param>
    </member>
    <member name="M:RestFoundation.Collections.Specialized.AcceptValueCollection.Add(RestFoundation.Runtime.AcceptValue)">
      <summary>
            Adds an item to the list, then applies sorting if <see cref="P:RestFoundation.Collections.Specialized.AcceptValueCollection.AutoSort" /> is enabled.
            </summary>
      <param name="item">The item to add</param>
    </member>
    <member name="M:RestFoundation.Collections.Specialized.AcceptValueCollection.AddRange(System.Collections.Generic.IEnumerable{RestFoundation.Runtime.AcceptValue})">
      <summary>
            Adds a range of items to the list, then applies sorting if <see cref="P:RestFoundation.Collections.Specialized.AcceptValueCollection.AutoSort" /> is enabled.
            </summary>
      <param name="collection">The items to add</param>
    </member>
    <member name="M:RestFoundation.Collections.Specialized.AcceptValueCollection.CanAccept(System.String)">
      <summary>
            Returns a value indicating whether the accepted item with the provided name is acceptable.
            </summary>
      <param name="name">The name of the item to search for</param>
      <returns>
            true if the item is acceptable; otherwise, false.
            </returns>
    </member>
    <member name="M:RestFoundation.Collections.Specialized.AcceptValueCollection.CanAccept(System.String,RestFoundation.Runtime.AcceptValueOptionType)">
      <summary>
            Returns a value indicating whether the accepted item with the provided name is acceptable.
            </summary>
      <param name="name">The name of the item to search for</param>
      <param name="optionType">The value indicating how to match the accepted values.</param>
      <returns>
            true if the item is acceptable; otherwise, false.
            </returns>
    </member>
    <member name="M:RestFoundation.Collections.Specialized.AcceptValueCollection.GetPreferredValue">
      <summary>
            Returns the preferred value from the full collection of values that can be accepted.
            </summary>
      <returns>The preferred value to accept.</returns>
    </member>
    <member name="M:RestFoundation.Collections.Specialized.AcceptValueCollection.GetPreferredValues(System.String[])">
      <summary>
            Returns the preferred value from the sequence of provided names that can be accepted.
            </summary>
      <param name="names">The sequence of accepted names.</param>
      <returns>The preferred value sequence to accept in the order of priority.</returns>
    </member>
    <member name="M:RestFoundation.Collections.Specialized.AcceptValueCollection.GetPreferredName">
      <summary>
            Returns the preferred name from the full collection of values that can be accepted.
            </summary>
      <returns>The preferred name to accept.</returns>
    </member>
    <member name="M:RestFoundation.Collections.Specialized.AcceptValueCollection.GetPreferredNames(System.String[])">
      <summary>
            Returns the preferred names from the sequence of provided names that can be accepted.
            </summary>
      <param name="names">The sequence of accepted names.</param>
      <returns>The preferred name sequence to accept in the order of priority.</returns>
    </member>
    <member name="M:RestFoundation.Collections.Specialized.AcceptValueCollection.Sort(System.Boolean)">
      <summary>
            Sorts the list comparing by weight in descending order.
            </summary>
      <param name="autosort">A <see cref="T:System.Boolean" /> indicating whether to perform auto-sort</param>
    </member>
    <member name="M:RestFoundation.Collections.Specialized.AcceptValueCollection.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:RestFoundation.Collections.Specialized.AcceptValueCollection.AcceptWildcard">
      <summary>
            Gets a value indicating whether or not the wildcarded encoding is available and allowed.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Specialized.AcceptValueCollection.AutoSort">
      <summary>
            Gets or sets a value indicating whether, after an add operation, the list should be resorted.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Specialized.AcceptValueCollection.AcceptedNames">
      <summary>
            Gets a collection of all accepted type names.
            </summary>
    </member>
    <member name="T:RestFoundation.Collections.Specialized.DynamicDictionary">
      <summary>
            Represents a dynamic dictionary collection.
            </summary>
    </member>
    <member name="M:RestFoundation.Collections.Specialized.DynamicDictionary.#ctor(System.Func{System.Collections.IDictionary})">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Collections.Specialized.DynamicDictionary" /> class.
            </summary>
      <param name="dictionaryBuilder">The static dictionary to convert to dynamic.</param>
    </member>
    <member name="M:RestFoundation.Collections.Specialized.DynamicDictionary.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:RestFoundation.Collections.Specialized.DynamicDictionary" /> class
            can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
      <returns>true if the operation is successful; otherwise, false.</returns>
      <param name="binder">Provides information about the object that called the dynamic operation.</param>
      <param name="result">The result of the get operation.</param>
    </member>
    <member name="M:RestFoundation.Collections.Specialized.DynamicDictionary.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>
            Provides the implementation for operations that set member values. Classes derived from the <see cref="T:RestFoundation.Collections.Specialized.DynamicDictionary" /> class
            can override this method to specify dynamic behavior for operations such as setting a value for a property.
            </summary>
      <returns>true if the operation is successful; otherwise, false.</returns>
      <param name="binder">
            Provides information about the object that called the dynamic operation.The binder.Name property provides the name
            of the member to which the value is being assigned.
            </param>
      <param name="value">The value to set to the member</param>
    </member>
    <member name="M:RestFoundation.Collections.Specialized.DynamicDictionary.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary>
            Provides the implementation for operations that invoke a member. Classes derived from the <see cref="T:RestFoundation.Collections.Specialized.DynamicDictionary" /> class
            can override this method to specify dynamic behavior for operations such as calling a method.
            </summary>
      <returns>true if the operation is successful; otherwise, false.</returns>
      <param name="binder">Provides information about the dynamic operation.</param>
      <param name="args">The arguments that are passed to the object member during the invoke operation.</param>
      <param name="result">The result of the member invocation.</param>
    </member>
    <member name="M:RestFoundation.Collections.Specialized.DynamicDictionary.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>
            Provides the implementation for operations that delete an object member.
            </summary>
      <returns>true if the operation is successful; otherwise, false.</returns>
      <param name="binder">Provides information about the deletion.</param>
    </member>
    <member name="M:RestFoundation.Collections.Specialized.DynamicDictionary.GetDynamicMemberNames">
      <summary>
            Returns the enumeration of all dynamic member names. 
            </summary>
      <returns>
            A sequence that contains dynamic member names.
            </returns>
    </member>
    <member name="M:RestFoundation.Collections.Specialized.DynamicDictionary.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:RestFoundation.Collections.Specialized.DynamicDictionary.Count">
      <summary>
            Gets a value containing the count of items in the collection.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Specialized.DynamicDictionary.InnerDictionary">
      <summary>
            Gets the inner dictionary generated by the builder.
            </summary>
    </member>
    <member name="T:RestFoundation.ServiceLocation.ServiceContainer">
      <summary>
            Represents an internal service container.
            </summary>
    </member>
    <member name="M:RestFoundation.ServiceLocation.ServiceContainer.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.ServiceLocation.ServiceContainer" /> class.
            </summary>
      <param name="mockContext">
            A <see cref="T:System.Boolean" /> indicating whether to inject a mocked service context for unit tests.
            </param>
    </member>
    <member name="P:RestFoundation.ServiceLocation.ServiceContainer.SingletonServices">
      <summary>
            Gets a dictionary of singleton service types.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceLocation.ServiceContainer.TransientServices">
      <summary>
            Gets a dictionary of transient service types.
            </summary>
    </member>
    <member name="T:RestFoundation.ServiceLocation.ServiceActivationException">
      <summary>
            Represents an exception that gets thrown if service location results in an error.
            </summary>
    </member>
    <member name="M:RestFoundation.ServiceLocation.ServiceActivationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.ServiceLocation.ServiceActivationException" /> class.
            </summary>
    </member>
    <member name="M:RestFoundation.ServiceLocation.ServiceActivationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.ServiceLocation.ServiceActivationException" /> class with the provided message.
            </summary>
      <param name="message">The exception message.</param>
    </member>
    <member name="M:RestFoundation.ServiceLocation.ServiceActivationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.ServiceLocation.ServiceActivationException" /> class with the provided message
            and a reference to the exception that is the cause of the current exception.
            </summary>
      <param name="message">The exception message.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference.</param>
    </member>
    <member name="M:RestFoundation.ServiceLocation.ServiceActivationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.ServiceLocation.ServiceActivationException" /> class with serialized data.
            </summary>
      <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.
            </param>
      <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.
            </param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="T:RestFoundation.ServiceProxy.OperationMetadata.AuthenticationMetadata">
      <summary>
            Represents an authentication metadata.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.OperationMetadata.AuthenticationMetadata.Type">
      <summary>
            Gets or sets the authentication type.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.OperationMetadata.AuthenticationMetadata.DefaultUserName">
      <summary>
            Gets or sets the default username.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.OperationMetadata.AuthenticationMetadata.RelativeUrlToMatch">
      <summary>
            Gets or sets the relative URL to match.
            </summary>
    </member>
    <member name="T:RestFoundation.ServiceProxy.AuthenticationType">
      <summary>
            Defines an HTTP authentication type.
            </summary>
    </member>
    <member name="F:RestFoundation.ServiceProxy.AuthenticationType.Basic">
      <summary>
            Basic authentication
            </summary>
    </member>
    <member name="F:RestFoundation.ServiceProxy.AuthenticationType.Digest">
      <summary>
            Digest authentication
            </summary>
    </member>
    <member name="T:RestFoundation.ServiceProxy.OperationMetadata.HeaderMetadata">
      <summary>
            Represents an HTTP header metadata.
            </summary>
    </member>
    <member name="M:RestFoundation.ServiceProxy.OperationMetadata.HeaderMetadata.Equals(RestFoundation.ServiceProxy.OperationMetadata.HeaderMetadata)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:RestFoundation.ServiceProxy.OperationMetadata.HeaderMetadata.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <param name="obj">The object to compare with the current object.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:RestFoundation.ServiceProxy.OperationMetadata.HeaderMetadata.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:RestFoundation.ServiceProxy.OperationMetadata.HeaderMetadata.CompareTo(RestFoundation.ServiceProxy.OperationMetadata.HeaderMetadata)">
      <summary>
            Compares the current object with another object of the same type.
            </summary>
      <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings:
            Value Meaning Less than zero: This object is less than the <paramref name="other" /> parameter.
            Zero: This object is equal to <paramref name="other" />.
            Greater than zero: This object is greater than <paramref name="other" />. 
            </returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="P:RestFoundation.ServiceProxy.OperationMetadata.HeaderMetadata.Name">
      <summary>
            Gets the header name.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.OperationMetadata.HeaderMetadata.Value">
      <summary>
            Gets the header value.
            </summary>
    </member>
    <member name="T:RestFoundation.ServiceProxy.OperationMetadata.HttpsMetadata">
      <summary>
            Represents the HTTPS metadata.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.OperationMetadata.HttpsMetadata.Port">
      <summary>
            Gets or sets the port number.
            </summary>
    </member>
    <member name="T:RestFoundation.ServiceProxy.IMethodMetadata">
      <summary>
            Defines the method metadata for a service operation.
            </summary>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IMethodMetadata.SetAuthentication(RestFoundation.ServiceProxy.AuthenticationType)">
      <summary>
            Sets the authentication for the service operation.
            </summary>
      <param name="type">The authentication type.</param>
      <returns>The service method metadata.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IMethodMetadata.SetAuthentication(RestFoundation.ServiceProxy.AuthenticationType,System.String)">
      <summary>
            Sets the authentication for the service operation.
            </summary>
      <param name="type">The authentication type.</param>
      <param name="defaultUserName">The default user name.</param>
      <returns>The service method metadata.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IMethodMetadata.SetAuthentication(RestFoundation.ServiceProxy.AuthenticationType,System.String,System.String)">
      <summary>
            Sets the authentication for the service operation.
            </summary>
      <param name="type">The authentication type.</param>
      <param name="defaultUserName">The default user name.</param>
      <param name="relativeUrlToMatch">A relative URL to apply authentication to.</param>
      <returns>The service method metadata.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IMethodMetadata.SetDescription(System.String)">
      <summary>
            Sets the description for the service operation.
            </summary>
      <param name="operationDescription">The description.</param>
      <returns>The service method metadata.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IMethodMetadata.SetHeader(RestFoundation.ServiceProxy.ProxyHeader)">
      <summary>
            Sets an additional HTTP header for the service operation.
            </summary>
      <param name="header">The HTTP header for the proxy.</param>
      <returns>The service method metadata.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IMethodMetadata.SetHeader(System.String,System.String)">
      <summary>
            Sets an additional HTTP header for the service operation.
            </summary>
      <param name="name">The HTTP header name.</param>
      <param name="value">The HTTP header value.</param>
      <returns>The service method metadata.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IMethodMetadata.SetHeaders(System.Collections.Generic.IList{RestFoundation.ServiceProxy.ProxyHeader})">
      <summary>
            Sets additional HTTP headers for the service operation.
            </summary>
      <param name="headers">The list of HTTP headers for the proxy.</param>
      <returns>The service method metadata.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IMethodMetadata.SetHidden">
      <summary>
            Marks all service operations as IP filtered.
            </summary>
      <returns>The service method metadata.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IMethodMetadata.SetHttps">
      <summary>
            Sets the service operation to require secure HTTPS connection with port 443.
            </summary>
      <returns>The service method metadata.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IMethodMetadata.SetHttps(System.Int32)">
      <summary>
            Sets the service operation as HTTPS specific.
            </summary>
      <param name="port">The TCP port number.</param>
      <returns>The service method metadata.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IMethodMetadata.SetIPFiltered">
      <summary>
            Marks the service operation as IP filtered.
            </summary>
      <returns>The service method metadata.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IMethodMetadata.DoesNotSupportJson">
      <summary>
            Indicates the service operation does not support JSON serialization.
            </summary>
      <returns>The service method metadata.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IMethodMetadata.DoesNotSupportXml">
      <summary>
            Indicates the service operation does not support XML serialization.
            </summary>
      <returns>The service method metadata.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IMethodMetadata.DoesNotSupportJsonAndXml">
      <summary>
            Indicates the service operation does not support JSON and XML serialization.
            </summary>
      <returns>The service method metadata.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IMethodMetadata.SetQueryParameter(System.String,System.Type)">
      <summary>
            Sets a query string parameter for the service operation.
            </summary>
      <param name="name">The parameter name.</param>
      <param name="type">The parameter type.</param>
      <returns>The service method metadata.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IMethodMetadata.SetQueryParameter(System.String,System.Type,System.Object)">
      <summary>
            Sets a query string parameter for the service operation.
            </summary>
      <param name="name">The parameter name.</param>
      <param name="type">The parameter type.</param>
      <param name="exampleValue">An example value.</param>
      <returns>The service method metadata.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IMethodMetadata.SetQueryParameter(System.String,System.Type,System.Object,System.Collections.Generic.IList{System.String})">
      <summary>
            Sets a query string parameter for the service operation.
            </summary>
      <param name="name">The parameter name.</param>
      <param name="type">The parameter type.</param>
      <param name="exampleValue">An example value.</param>
      <param name="allowedValues">An optional list of allowed values.</param>
      <returns>The service method metadata.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IMethodMetadata.SetQueryParameter(System.String,System.Type,System.Object,System.String)">
      <summary>
            Sets a query string parameter for the service operation.
            </summary>
      <param name="name">The parameter name.</param>
      <param name="type">The parameter type.</param>
      <param name="exampleValue">An example value.</param>
      <param name="regexConstraint">An optional regular expression constraint.</param>
      <returns>The service method metadata.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IMethodMetadata.SetQueryParameter(System.String,System.Type,System.Object,System.Collections.Generic.IList{System.String},System.String)">
      <summary>
            Sets a query string parameter for the service operation.
            </summary>
      <param name="name">The parameter name.</param>
      <param name="type">The parameter type.</param>
      <param name="exampleValue">An example value.</param>
      <param name="allowedValues">An optional list of allowed values.</param>
      <param name="regexConstraint">An optional regular expression constraint.</param>
      <returns>The service method metadata.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IMethodMetadata.SetRouteParameter(System.String)">
      <summary>
            Sets a route parameter, that was not inferred by the lambda expression or has additional information such as list of allowed values,
            for the service operation.
            </summary>
      <param name="name">The parameter name.</param>
      <returns>The service method metadata.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IMethodMetadata.SetRouteParameter(System.String,System.Object)">
      <summary>
            Sets a route parameter, that was not inferred by the lambda expression or has additional information such as list of allowed values,
            for the service operation.
            </summary>
      <param name="name">The parameter name.</param>
      <param name="exampleValue">An example value.</param>
      <returns>The service method metadata.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IMethodMetadata.SetRouteParameter(System.String,System.Object,System.Collections.Generic.IList{System.String})">
      <summary>
            Sets a route parameter, that was not inferred by the lambda expression or has additional information such as list of allowed values,
            for the service operation.
            </summary>
      <param name="name">The parameter name.</param>
      <param name="exampleValue">An example value.</param>
      <param name="allowedValues">An optional list of allowed values.</param>
      <returns>The service method metadata.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IMethodMetadata.SetRequestResourceExample(System.Object)">
      <summary>
            Sets a resource instance used as an example for the service operation request data.
            </summary>
      <param name="instance">The request resource instance.</param>
      <returns>The service method metadata.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IMethodMetadata.SetRequestResourceExample(System.Object,System.Xml.Serialization.XmlSchemas)">
      <summary>
            Sets a resource instance used as an example for the service operation request data.
            </summary>
      <param name="instance">The request resource instance.</param>
      <param name="xmlSchemas">Custom XML schemas for the resource.</param>
      <returns>The service method metadata.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IMethodMetadata.SetResponseResourceExample(System.Object)">
      <summary>
            Sets a resource instance used as an example for the service operation response data.
            </summary>
      <param name="instance">The response resource instance.</param>
      <returns>The service method metadata.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IMethodMetadata.SetResponseResourceExample(System.Object,System.Xml.Serialization.XmlSchemas)">
      <summary>
            Sets a resource instance used as an example for the service operation response data.
            </summary>
      <param name="instance">The response resource instance.</param>
      <param name="xmlSchemas">Custom XML schemas for the resource.</param>
      <returns>The service method metadata.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IMethodMetadata.SetResponseStatus(RestFoundation.ServiceProxy.ProxyStatus)">
      <summary>
            Sets a custom HTTP response status for the service operation.
            </summary>
      <param name="status">The HTTP status.</param>
      <returns>The service method metadata.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IMethodMetadata.SetResponseStatus(System.Net.HttpStatusCode)">
      <summary>
            Sets a custom HTTP response status for the service operation.
            </summary>
      <param name="statusCode">The HTTP status code.</param>
      <returns>The service method metadata.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IMethodMetadata.SetResponseStatus(System.Net.HttpStatusCode,System.String)">
      <summary>
            Sets a custom HTTP response status for the service operation.
            </summary>
      <param name="statusCode">The HTTP status code.</param>
      <param name="statusDescription">The HTTP status description.</param>
      <returns>The service method metadata.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IMethodMetadata.SetResponseStatuses(System.Collections.Generic.IList{RestFoundation.ServiceProxy.ProxyStatus})">
      <summary>
            Sets custom HTTP response statuses for the service operation.
            </summary>
      <param name="statuses">A list of HTTP statuses.</param>
      <returns>The service method metadata.</returns>
    </member>
    <member name="T:RestFoundation.ServiceProxy.IProxyMetadata">
      <summary>
            Defines a service contract metadata.
            </summary>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IProxyMetadata.IsIPFiltered(System.Reflection.MethodInfo)">
      <summary>
            Returns a <see cref="T:System.Boolean" /> indicating whether the operation is IP filtered.
            </summary>
      <param name="serviceMethod">The service method.</param>
      <returns>true if the operation is IP filtered; false otherwise.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IProxyMetadata.IsHidden(System.Reflection.MethodInfo)">
      <summary>
            Returns a <see cref="T:System.Boolean" /> indicating whether the operation is hidden from the service proxy.
            </summary>
      <param name="serviceMethod">The service method.</param>
      <returns>true if the operation is hidden from the service proxy; false otherwise.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IProxyMetadata.HasJsonSupport(System.Reflection.MethodInfo)">
      <summary>
            Returns a <see cref="T:System.Boolean" /> indicating whether the operation supports JSON serialization.
            </summary>
      <param name="serviceMethod">The service method.</param>
      <returns>true if the operation supports JSON serialization; false otherwise.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IProxyMetadata.HasXmlSupport(System.Reflection.MethodInfo)">
      <summary>
            Returns a <see cref="T:System.Boolean" /> indicating whether the operation supports XML serialization.
            </summary>
      <param name="serviceMethod">The service method.</param>
      <returns>true if the operation supports XML serialization; false otherwise.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IProxyMetadata.GetDescription(System.Reflection.MethodInfo)">
      <summary>
            Returns the operation description.
            </summary>
      <param name="serviceMethod">The service method.</param>
      <returns>The operation description.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IProxyMetadata.GetAuthentication(System.Reflection.MethodInfo)">
      <summary>
            Returns the operation authentication information, if applicable; or null.
            </summary>
      <param name="serviceMethod">The service method.</param>
      <returns>The operation authentication metadata</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IProxyMetadata.GetHttps(System.Reflection.MethodInfo)">
      <summary>
            Returns the operation HTTPS information.
            </summary>
      <param name="serviceMethod">The service method.</param>
      <returns>The operation HTTPS metadata</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IProxyMetadata.GetRequestResourceExample(System.Reflection.MethodInfo)">
      <summary>
            Returns the request resource example, if applicable, for the operation; or null.
            </summary>
      <param name="serviceMethod">The service method.</param>
      <returns>The request resource example.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IProxyMetadata.GetResponseResourceExample(System.Reflection.MethodInfo)">
      <summary>
            Returns the response resource example, if applicable, for the operation; or null.
            </summary>
      <param name="serviceMethod">The service method.</param>
      <returns>The response resource example.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IProxyMetadata.GetParameter(System.Reflection.MethodInfo,System.String,System.Boolean)">
      <summary>
            Returns an operation parameter with the provided name and type.
            </summary>
      <param name="serviceMethod">The service method.</param>
      <param name="name">The parameter name.</param>
      <param name="isRouteParameter">
            A bool indicating whether the parameter is a route parameter (true) or a query string parameter (false).
            </param>
      <returns>The operation parameter information.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IProxyMetadata.GetParameters(System.Reflection.MethodInfo,System.Boolean)">
      <summary>
            Returns all operation parameters with the provided type.
            </summary>
      <param name="serviceMethod">The service method.</param>
      <param name="isRouteParameter">
            A bool indicating whether the parameters are route parameter (true) or query string parameters (false).
            </param>
      <returns>The operation parameters.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IProxyMetadata.GetHeaders(System.Reflection.MethodInfo)">
      <summary>
            Gets all additional HTTP headers associated with the operation.
            </summary>
      <param name="serviceMethod">The service method.</param>
      <returns>A list of additional HTTP headers for the operation.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IProxyMetadata.GetResponseStatuses(System.Reflection.MethodInfo)">
      <summary>
            Gets all additional HTTP response statuses associated with the operation.
            </summary>
      <param name="serviceMethod">The service method.</param>
      <returns>A list of additional HTTP response statuses for the operation.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.IProxyMetadata.Initialize">
      <summary>
            Initializes the service contract metadata.
            </summary>
    </member>
    <member name="T:RestFoundation.ServiceProxy.OperationMetadata.ParameterMetadata">
      <summary>
            Represents a service operation parameter metadata.
            </summary>
    </member>
    <member name="M:RestFoundation.ServiceProxy.OperationMetadata.ParameterMetadata.GetTypeDescription">
      <summary>
            Gets the parameter type description for the service proxy.
            </summary>
      <returns>The parameter type description.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.OperationMetadata.ParameterMetadata.Equals(RestFoundation.ServiceProxy.OperationMetadata.ParameterMetadata)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:RestFoundation.ServiceProxy.OperationMetadata.ParameterMetadata.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <param name="obj">The object to compare with the current object. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:RestFoundation.ServiceProxy.OperationMetadata.ParameterMetadata.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:RestFoundation.ServiceProxy.OperationMetadata.ParameterMetadata.Name">
      <summary>
            Gets or sets the parameter name.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.OperationMetadata.ParameterMetadata.Type">
      <summary>
            Gets or sets the parameter type.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.OperationMetadata.ParameterMetadata.IsRouteParameter">
      <summary>
            Gets or sets a value indicating whether the parameter is a route parameter (true),
            or a query string parameter (false).
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.OperationMetadata.ParameterMetadata.IsOptionalParameter">
      <summary>
            Gets or sets a value indicating whether the parameter is optional.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.OperationMetadata.ParameterMetadata.ExampleValue">
      <summary>
            Gets or sets a parameter example value.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.OperationMetadata.ParameterMetadata.AllowedValues">
      <summary>
            Gets or sets a comma separated sequence of allowed parameter values.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.OperationMetadata.ParameterMetadata.RegexConstraint">
      <summary>
            Gets or sets a regular expression constraint.
            </summary>
    </member>
    <member name="T:RestFoundation.ServiceProxy.ProxyHeader">
      <summary>
            Represents an HTTP header.
            </summary>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyHeader.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.ServiceProxy.ProxyHeader" /> struct.
            </summary>
      <param name="name">The header name.</param>
      <param name="value">The header value.</param>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyHeader.op_Equality(RestFoundation.ServiceProxy.ProxyHeader,RestFoundation.ServiceProxy.ProxyHeader)">
      <summary>
            Compares two <see cref="T:RestFoundation.ServiceProxy.ProxyHeader" /> objects for equality.
            </summary>
      <param name="left">The first object</param>
      <param name="right">The second object</param>
      <returns>true if both objects are equivalent; otherwise, false.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyHeader.op_Inequality(RestFoundation.ServiceProxy.ProxyHeader,RestFoundation.ServiceProxy.ProxyHeader)">
      <summary>
            Compares two <see cref="T:RestFoundation.ServiceProxy.ProxyHeader" /> objects for inequality.
            </summary>
      <param name="left">The first object</param>
      <param name="right">The second object</param>
      <returns>true if both objects are not equivalent; otherwise, false.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyHeader.Equals(RestFoundation.ServiceProxy.ProxyHeader)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyHeader.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <returns>
            true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
      <param name="obj">Another object to compare to.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyHeader.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyHeader.Name">
      <summary>
            Gets the header name.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyHeader.Value">
      <summary>
            Gets the header value.
            </summary>
    </member>
    <member name="T:RestFoundation.ServiceProxy.ProxyMetadata`1">
      <summary>
            Represents a service proxy metadata for a service. This class cannot be instantiated.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyMetadata`1.SetAuthentication(RestFoundation.ServiceProxy.AuthenticationType)">
      <summary>
            Sets the global service authentication.
            </summary>
      <param name="type">The authentication type.</param>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyMetadata`1.SetAuthentication(RestFoundation.ServiceProxy.AuthenticationType,System.String)">
      <summary>
            Sets the global service authentication.
            </summary>
      <param name="type">The authentication type.</param>
      <param name="defaultUserName">The default user name.</param>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyMetadata`1.SetAuthentication(RestFoundation.ServiceProxy.AuthenticationType,System.String,System.String)">
      <summary>
            Sets the global service authentication.
            </summary>
      <param name="type">The authentication type.</param>
      <param name="defaultUserName">The default user name.</param>
      <param name="relativeUrlToMatch">A relative URL to apply authentication to.</param>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyMetadata`1.SetHeader(RestFoundation.ServiceProxy.ProxyHeader)">
      <summary>
            Sets an additional HTTP header for all service operations.
            </summary>
      <param name="header">The HTTP header for the proxy.</param>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyMetadata`1.SetHeader(System.String,System.String)">
      <summary>
            Sets an additional HTTP header for all service operations.
            </summary>
      <param name="name">The HTTP header name.</param>
      <param name="value">The HTTP header value.</param>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyMetadata`1.SetHeaders(System.Collections.Generic.IList{RestFoundation.ServiceProxy.ProxyHeader})">
      <summary>
            Sets additional HTTP headers for all service operations.
            </summary>
      <param name="headers">The list of HTTP headers for the proxy.</param>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyMetadata`1.SetHttps">
      <summary>
            Sets all service operations to require secure HTTPS connection with port 443.
            </summary>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyMetadata`1.SetHttps(System.Int32)">
      <summary>
            Sets all service operations as HTTPS specific.
            </summary>
      <param name="port">The TCP port number.</param>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyMetadata`1.SetIPFiltered">
      <summary>
            Marks all service operations as IP filtered.
            </summary>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyMetadata`1.ForMethod(System.Linq.Expressions.Expression{System.Action{`0}})">
      <summary>
            Specifies metadata for a specific service method.
            </summary>
      <param name="serviceMethod">The service method.</param>
      <returns>The service method metadata.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyMetadata`1.ForMethod(System.Linq.Expressions.Expression{System.Func{`0,System.Object}})">
      <summary>
            Specifies metadata for a specific service method.
            </summary>
      <param name="serviceMethod">The service method.</param>
      <returns>The service method metadata.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyMetadata`1.Arg``1">
      <summary>
            Returns a stub value for the argument of the specified type.
            </summary>
      <typeparam name="TArgument">The argument type.</typeparam>
      <returns>A stub value for the argument type.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyMetadata`1.DynamicArg">
      <summary>
            Returns a stub value for a dynamic argument.
            </summary>
      <returns>A stubbed dynamic value.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyMetadata`1.Initialize">
      <summary>
            Initializes the service contract metadata.
            </summary>
    </member>
    <member name="T:RestFoundation.ServiceProxy.ProxyMetadataAttribute">
      <summary>
            Specifies a proxy metadata type for a service contract.
            </summary>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyMetadataAttribute.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.ServiceProxy.ProxyMetadataAttribute" /> class.
            </summary>
      <param name="proxyMetadataType">A proxy metadata type.</param>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyMetadataAttribute.ProxyMetadataType">
      <summary>
            Gets the proxy metadata type.
            </summary>
    </member>
    <member name="T:RestFoundation.ServiceProxy.ProxyStatus">
      <summary>
            Represents an HTTP response status for the service proxy.
            </summary>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyStatus.#ctor(System.Net.HttpStatusCode,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.ServiceProxy.ProxyStatus" /> struct.
            </summary>
      <param name="code">HTTP status code.</param>
      <param name="condition">Condition for the status.</param>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyStatus.op_Equality(RestFoundation.ServiceProxy.ProxyStatus,RestFoundation.ServiceProxy.ProxyStatus)">
      <summary>
            Compares two <see cref="T:RestFoundation.ServiceProxy.ProxyStatus" /> objects for equality.
            </summary>
      <param name="left">The first object</param>
      <param name="right">The second object</param>
      <returns>true if both objects are equivalent; otherwise, false.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyStatus.op_Inequality(RestFoundation.ServiceProxy.ProxyStatus,RestFoundation.ServiceProxy.ProxyStatus)">
      <summary>
            Compares two <see cref="T:RestFoundation.ServiceProxy.ProxyStatus" /> objects for inequality.
            </summary>
      <param name="left">The first object</param>
      <param name="right">The second object</param>
      <returns>true if both objects are not equivalent; otherwise, false.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyStatus.Equals(RestFoundation.ServiceProxy.ProxyStatus)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyStatus.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <returns>
            true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
      <param name="obj">Another object to compare to. </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyStatus.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyStatus.Code">
      <summary>
            Gets the HTTP status code.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyStatus.Condition">
      <summary>
            Gets the condition for the status.
            </summary>
    </member>
    <member name="T:RestFoundation.ServiceProxy.OperationMetadata.ResourceExampleMetadata">
      <summary>
            Represents a resource example metadata.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.OperationMetadata.ResourceExampleMetadata.Instance">
      <summary>
            Gets or sets a resource example instance.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.OperationMetadata.ResourceExampleMetadata.XmlSchemas">
      <summary>
            Gets or sets XML schemas.
            </summary>
    </member>
    <member name="T:RestFoundation.ServiceProxy.OperationMetadata.StatusCodeMetadata">
      <summary>
            Represents an HTTP response status code metadata.
            </summary>
    </member>
    <member name="M:RestFoundation.ServiceProxy.OperationMetadata.StatusCodeMetadata.GetNumericStatusCode">
      <summary>
            Returns a numeric representation of the HTTP status code.
            </summary>
      <returns>An <see cref="T:System.Int32" /> representing the status code.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.OperationMetadata.StatusCodeMetadata.Equals(RestFoundation.ServiceProxy.OperationMetadata.StatusCodeMetadata)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:RestFoundation.ServiceProxy.OperationMetadata.StatusCodeMetadata.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <param name="obj">The object to compare with the current object.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:RestFoundation.ServiceProxy.OperationMetadata.StatusCodeMetadata.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:RestFoundation.ServiceProxy.OperationMetadata.StatusCodeMetadata.CompareTo(RestFoundation.ServiceProxy.OperationMetadata.StatusCodeMetadata)">
      <summary>
            Compares the current object with another object of the same type.
            </summary>
      <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings:
            Value Meaning Less than zero: This object is less than the <paramref name="other" /> parameter.
            Zero: This object is equal to <paramref name="other" />.
            Greater than zero: This object is greater than <paramref name="other" />. 
            </returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="P:RestFoundation.ServiceProxy.OperationMetadata.StatusCodeMetadata.Code">
      <summary>
            Gets or sets the HTTP status code.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.OperationMetadata.StatusCodeMetadata.Condition">
      <summary>
            Gets or sets the condition for the status.
            </summary>
    </member>
    <member name="T:RestFoundation.TypeBinders.ITypeBinder">
      <summary>
            Defines a binder for service method parameters of a specific object type.
            The type is specified during the binder registration through a <see cref="T:RestFoundation.Rest" /> instance.
            </summary>
    </member>
    <member name="M:RestFoundation.TypeBinders.ITypeBinder.Bind(System.String,System.Type,RestFoundation.IServiceContext)">
      <summary>
            Binds data from an HTTP route, query string or message to a service method parameter.
            </summary>
      <param name="name">The service method parameter name.</param>
      <param name="objectType">The binded object type.</param>
      <param name="context">The service context.</param>
      <returns>The object instance with the data or null.</returns>
    </member>
    <member name="T:RestFoundation.TypeBinders.TypeBinderAttribute">
      <summary>
            Represents a type binder for a specific service method parameter.
            This class cannot be instantiated.
            </summary>
    </member>
    <member name="M:RestFoundation.TypeBinders.TypeBinderAttribute.Bind(System.String,System.Type,RestFoundation.IServiceContext)">
      <summary>
            Binds data from an HTTP route, query string or message to a service method parameter.
            </summary>
      <param name="name">The service method parameter name.</param>
      <param name="objectType">The binded object type.</param>
      <param name="context">The service context.</param>
      <returns>The object instance with the data or null.</returns>
    </member>
    <member name="T:RestFoundation.TypeBinders.FromBodyAttribute">
      <summary>
            Represents a type binder that binds simple types from HTTP body key value pairs.
            </summary>
    </member>
    <member name="M:RestFoundation.TypeBinders.FromBodyAttribute.Bind(System.String,System.Type,RestFoundation.IServiceContext)">
      <summary>
            Binds data from an HTTP body key value pair to a service method parameter.
            </summary>
      <param name="name">The service method parameter name.</param>
      <param name="objectType">The binded object type.</param>
      <param name="context">The service context.</param>
      <returns>The object instance with the data or null.</returns>
    </member>
    <member name="P:RestFoundation.TypeBinders.FromBodyAttribute.Name">
      <summary>
            Gets or sets a name to resolve from the HTTP body.
            If this value is not set, the parameter name will be used.
            </summary>
    </member>
    <member name="T:RestFoundation.TypeBinders.FromHeaderAttribute">
      <summary>
            Represents a type binder that binds simple types from HTTP headers.
            </summary>
    </member>
    <member name="M:RestFoundation.TypeBinders.FromHeaderAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.TypeBinders.FromHeaderAttribute" /> class.
            </summary>
    </member>
    <member name="M:RestFoundation.TypeBinders.FromHeaderAttribute.Bind(System.String,System.Type,RestFoundation.IServiceContext)">
      <summary>
            Binds data from an HTTP header to a service method parameter.
            </summary>
      <param name="name">The service method parameter name.</param>
      <param name="objectType">The binded object type.</param>
      <param name="context">The service context.</param>
      <returns>The object instance with the data or null.</returns>
    </member>
    <member name="P:RestFoundation.TypeBinders.FromHeaderAttribute.Name">
      <summary>
            Gets or sets a name to resolve from the HTTP headers.
            If this value is not set, the parameter name will be used.
            </summary>
    </member>
    <member name="P:RestFoundation.TypeBinders.FromHeaderAttribute.ConvertUnderscoresToDashes">
      <summary>
            Gets a value indicating whether to convert underscores in the parameter to dashes
            when finding the HTTP header. The default value is true. This value has no effect
            if the <see cref="P:RestFoundation.TypeBinders.FromHeaderAttribute.Name" /> property is set.
            </summary>
    </member>
    <member name="T:RestFoundation.TypeBinders.FromUriAttribute">
      <summary>
            Represents a type binder that binds simple types from URI query string parameters.
            </summary>
    </member>
    <member name="M:RestFoundation.TypeBinders.FromUriAttribute.Bind(System.String,System.Type,RestFoundation.IServiceContext)">
      <summary>
            Binds data from a URI query string parameter to a service method parameter.
            </summary>
      <param name="name">The service method parameter name.</param>
      <param name="objectType">The binded object type.</param>
      <param name="context">The service context.</param>
      <returns>The object instance with the data or null.</returns>
    </member>
    <member name="P:RestFoundation.TypeBinders.FromUriAttribute.Name">
      <summary>
            Gets or sets a name to resolve from the URI query.
            If this value is not set, the parameter name will be used.
            </summary>
    </member>
    <member name="T:RestFoundation.Configuration.TypeBinderBuilder">
      <summary>
            Represents a type binder builder.
            </summary>
    </member>
    <member name="M:RestFoundation.Configuration.TypeBinderBuilder.Get(System.Type)">
      <summary>
            Gets an associated type binder by the object type.
            </summary>
      <param name="objectType">The object type.</param>
      <returns>The associated type binder or null.</returns>
    </member>
    <member name="M:RestFoundation.Configuration.TypeBinderBuilder.Set(System.Type,RestFoundation.TypeBinders.ITypeBinder)">
      <summary>
            Sets a type binder for the provided object type.
            </summary>
      <param name="objectType">The object type.</param>
      <param name="binder">The type binder.</param>
    </member>
    <member name="M:RestFoundation.Configuration.TypeBinderBuilder.Remove(System.Type)">
      <summary>
            Removes an associated type binder for the provided object type.
            </summary>
      <param name="objectType">The object type.</param>
      <returns>
            true if a type binder was removed; false if no type binder had been associated
            for the object type.
            </returns>
    </member>
    <member name="M:RestFoundation.Configuration.TypeBinderBuilder.Clear">
      <summary>
            Clears all associated type binders.
            </summary>
    </member>
    <member name="T:RestFoundation.Configuration.MediaTypeFormatterBuilder">
      <summary>
            Represents a media type formatter builder.
            </summary>
    </member>
    <member name="M:RestFoundation.Configuration.MediaTypeFormatterBuilder.Get(System.String)">
      <summary>
            Gets a formatter by the media type.
            </summary>
      <param name="mediaType">The media type.</param>
      <returns>The associated media type formatter or null.</returns>
      <exception cref="T:System.ArgumentException">If media type parameters are provided.</exception>
    </member>
    <member name="M:RestFoundation.Configuration.MediaTypeFormatterBuilder.Set(RestFoundation.Formatters.IMediaTypeFormatter)">
      <summary>
            Sets a formatter for its supported types.
            </summary>
      <param name="formatter">The media type formatter.</param>
      <exception cref="T:System.ArgumentException">If media type parameters are provided.</exception>
    </member>
    <member name="M:RestFoundation.Configuration.MediaTypeFormatterBuilder.Set(System.String,RestFoundation.Formatters.IMediaTypeFormatter)">
      <summary>
            Sets a formatter for the provided media type.
            </summary>
      <param name="mediaType">The media type.</param>
      <param name="formatter">The media type formatter.</param>
      <exception cref="T:System.ArgumentException">If media type parameters are provided.</exception>
    </member>
    <member name="M:RestFoundation.Configuration.MediaTypeFormatterBuilder.Remove(System.String)">
      <summary>
            Removes an associated formatter for the provided media type.
            </summary>
      <param name="mediaType">The media type.</param>
      <returns>
            true if a media type formatter was removed; false if no formatter had been associated
            for the media type.
            </returns>
      <exception cref="T:System.ArgumentException">If media type parameters are provided.</exception>
    </member>
    <member name="M:RestFoundation.Configuration.MediaTypeFormatterBuilder.Clear">
      <summary>
            Clears all associated media type formatters.
            </summary>
    </member>
    <member name="T:RestFoundation.Formatters.MultiPartFormatter">
      <summary>
            Represents a multi-part media type formatter for uploading files over the HTTP.
            </summary>
    </member>
    <member name="M:RestFoundation.Formatters.MultiPartFormatter.FormatRequest(RestFoundation.IServiceContext,System.Type)">
      <summary>
            Deserializes HTTP message body data into an object instance of the provided type.
            </summary>
      <param name="context">The service context.</param>
      <param name="objectType">The object type.</param>
      <returns>The deserialized object.</returns>
      <exception cref="T:RestFoundation.Runtime.HttpResponseException">If the object cannot be deserialized.</exception>
    </member>
    <member name="M:RestFoundation.Formatters.MultiPartFormatter.FormatResponse(RestFoundation.IServiceContext,System.Type,System.Object,System.String)">
      <summary>
            Serializes the object instance into the HTTP response stream using the accepted media type.
            </summary>
      <param name="context">The service context.</param>
      <param name="methodReturnType">The method return type.</param>
      <param name="obj">The object to serialize.</param>
      <param name="preferredMediaType">The preferred media type.</param>
      <returns>A service method result containing the serialized object representation.</returns>
      <exception cref="T:RestFoundation.Runtime.HttpResponseException">If the object could not be serialized.</exception>
    </member>
    <member name="T:RestFoundation.Security.IAuthorizationManager">
      <summary>
            Defines a user authorization manager for security models.
            </summary>
    </member>
    <member name="M:RestFoundation.Security.IAuthorizationManager.GetCredentials(System.String)">
      <summary>
            Gets an authenticated and authorized user credentials by the provided user name.
            </summary>
      <param name="userName">The user name.</param>
      <returns>The user credentials; or null if the username is invalid.</returns>
    </member>
    <member name="T:RestFoundation.IServiceCache">
      <summary>
            Defines a cache abstraction.
            </summary>
    </member>
    <member name="M:RestFoundation.IServiceCache.Contains(System.String)">
      <summary>
            Returns a value indicating whether the provided key is found in the cache.
            </summary>
      <param name="key">The cache key.</param>
      <returns>true if the key was found; otherwise, false.</returns>
    </member>
    <member name="M:RestFoundation.IServiceCache.Get(System.String)">
      <summary>
            Gets a cached value by its key.
            </summary>
      <param name="key">The cache key.</param>
      <returns>The corresponding value.</returns>
    </member>
    <member name="M:RestFoundation.IServiceCache.Add(System.String,System.Object)">
      <summary>
            Adds a key/value pair to the cache with the normal cache item priority.
            </summary>
      <param name="key">The cache key.</param>
      <param name="value">The cached value.</param>
    </member>
    <member name="M:RestFoundation.IServiceCache.Add(System.String,System.Object,RestFoundation.CachePriority)">
      <summary>
            Adds a key/value pair to the cache.
            </summary>
      <param name="key">The cache key.</param>
      <param name="value">The cached value.</param>
      <param name="priority">The cached item priority.</param>
    </member>
    <member name="M:RestFoundation.IServiceCache.Add(System.String,System.Object,System.DateTime)">
      <summary>
            Adds a key/value pair to the cache with the normal cache item priority.
            </summary>
      <param name="key">The cache key.</param>
      <param name="value">The cached value.</param>
      <param name="absoluteExpiration">A <see cref="T:System.DateTime" /> representing an absolute expiration time.</param>
    </member>
    <member name="M:RestFoundation.IServiceCache.Add(System.String,System.Object,System.TimeSpan)">
      <summary>
            Adds a key/value pair to the cache with the normal cache item priority.
            </summary>
      <param name="key">The cache key.</param>
      <param name="value">The cached value.</param>
      <param name="slidingExpiration">A <see cref="T:System.TimeSpan" /> representing a sliding expiration time.</param>
    </member>
    <member name="M:RestFoundation.IServiceCache.Add(System.String,System.Object,System.DateTime,RestFoundation.CachePriority)">
      <summary>
            Adds a key/value pair to the cache.
            </summary>
      <param name="key">The cache key.</param>
      <param name="value">The cached value.</param>
      <param name="absoluteExpiration">A <see cref="T:System.DateTime" /> representing an absolute expiration time.</param>
      <param name="priority">The cached item priority.</param>
    </member>
    <member name="M:RestFoundation.IServiceCache.Add(System.String,System.Object,System.TimeSpan,RestFoundation.CachePriority)">
      <summary>
            Adds a key/value pair to the cache.
            </summary>
      <param name="key">The cache key.</param>
      <param name="value">The cached value.</param>
      <param name="slidingExpiration">A <see cref="T:System.TimeSpan" /> representing a sliding expiration time.</param>
      <param name="priority">The cached item priority.</param>
    </member>
    <member name="M:RestFoundation.IServiceCache.Update(System.String,System.Object)">
      <summary>
            Updated the cached value for the corresponding cache key.
            </summary>
      <param name="key">The cache key.</param>
      <param name="value">The cached value.</param>
    </member>
    <member name="M:RestFoundation.IServiceCache.Remove(System.String)">
      <summary>
            Removes a cache entry by its key.
            </summary>
      <param name="key">The cache key.</param>
      <returns>If the cache key was found and the entry was removed.</returns>
    </member>
    <member name="M:RestFoundation.IServiceCache.Clear">
      <summary>
            Clears all entries in the cache.
            </summary>
    </member>
    <member name="P:RestFoundation.IServiceCache.Item(System.String)">
      <summary>
            Gets a cached value by its key.
            </summary>
      <param name="key">The cache key.</param>
      <returns>The corresponding value.</returns>
    </member>
    <member name="T:RestFoundation.IHttpMethodResolver">
      <summary>
            Returns the HTTP methods that are supported by the provided service method.
            If no HTTP methods were specified in the <see cref="T:RestFoundation.UrlAttribute" /> properties,
            it tries to figure out the HTTP method based on the service method name.
            </summary>
    </member>
    <member name="M:RestFoundation.IHttpMethodResolver.Resolve(System.Reflection.MethodInfo)">
      <summary>
            Returns a sequence of HTTP methods supported by the service method.
            </summary>
      <param name="method">The service method.</param>
      <returns>A sequence of HTTP methods.</returns>
      <exception cref="T:System.InvalidOperationException">If the HTTP method could not be resolved.</exception>
    </member>
    <member name="T:RestFoundation.IHttpResponseOutput">
      <summary>
            Defines an HTTP response output.
            </summary>
    </member>
    <member name="M:RestFoundation.IHttpResponseOutput.Flush">
      <summary>
            Sends all the buffered output the the client.
            </summary>
    </member>
    <member name="M:RestFoundation.IHttpResponseOutput.FlushAsync">
      <summary>
            Sends all the buffered output the the client asynchronously.
            </summary>
      <returns>The task that flushes the context.</returns>
    </member>
    <member name="M:RestFoundation.IHttpResponseOutput.Clear">
      <summary>
            Clears all the output data in the response.
            </summary>
    </member>
    <member name="M:RestFoundation.IHttpResponseOutput.Write(System.String)">
      <summary>
            Writes a string into the output stream.
            </summary>
      <param name="value">A string value to write.</param>
      <returns>The response output object.</returns>
    </member>
    <member name="M:RestFoundation.IHttpResponseOutput.Write(System.Object)">
      <summary>
            Writes a value into the output stream.
            </summary>
      <param name="obj">A value to write.</param>
      <returns>The response output object.</returns>
    </member>
    <member name="M:RestFoundation.IHttpResponseOutput.WriteLine">
      <summary>
            Writes a new line into the output stream.
            </summary>
      <returns>The response output object.</returns>
    </member>
    <member name="M:RestFoundation.IHttpResponseOutput.WriteLine(System.String)">
      <summary>
            Writes a string followed by a line into the output stream.
            </summary>
      <param name="value">A string value to write.</param>
      <returns>The response output object.</returns>
    </member>
    <member name="M:RestFoundation.IHttpResponseOutput.WriteLine(System.Byte)">
      <summary>
            Writes the provided number of new lines into the output stream.
            </summary>
      <param name="times">The number of new lines to write.</param>
      <returns>The response output object.</returns>
    </member>
    <member name="M:RestFoundation.IHttpResponseOutput.WriteFormat(System.String,System.Object[])">
      <summary>
            Replaces the format item in a specified string with the string representation of a corresponding object in a specified array,
            then writes the formatted string into the output stream.
            </summary>
      <param name="format">The format string.</param>
      <param name="values">An object array that contains zero or more objects to format.</param>
      <returns>The response output object.</returns>
    </member>
    <member name="M:RestFoundation.IHttpResponseOutput.WriteAsync(System.String)">
      <summary>
            Writes a string to the output stream asynchronously.
            </summary>
      <param name="value">A string value to write.</param>
      <returns>The task that writes the value into the output stream.</returns>
    </member>
    <member name="M:RestFoundation.IHttpResponseOutput.WriteAsync(System.Char[],System.Int32,System.Int32)">
      <summary>
            Writes an array of characters to the output stream asynchronously.
            </summary>
      <param name="buffer">An array of characters.</param>
      <param name="index">A position in the array to start writing characters.</param>
      <param name="count">A number of characters to write.</param>
      <returns>The task that writes the value into the output stream.</returns>
    </member>
    <member name="P:RestFoundation.IHttpResponseOutput.Buffer">
      <summary>
            Gets or sets a value indicating whether the output should be buffered.
            </summary>
    </member>
    <member name="P:RestFoundation.IHttpResponseOutput.Stream">
      <summary>
            Gets the output stream.
            </summary>
    </member>
    <member name="P:RestFoundation.IHttpResponseOutput.Writer">
      <summary>
            Gets the output writer.
            </summary>
    </member>
    <member name="P:RestFoundation.IHttpResponseOutput.LogWriter">
      <summary>
            Gets the log writer.
            </summary>
    </member>
    <member name="P:RestFoundation.IHttpResponseOutput.Filter">
      <summary>
            Gets or sets a filter stream that modifies the output during the data transmission.
            </summary>
    </member>
    <member name="T:RestFoundation.IParameterValueProvider">
      <summary>
            Defines a service method parameter value provider that orchestrates media type formatters,
            object binders, route and HTTP request data to populate service method parameter values.
            </summary>
    </member>
    <member name="M:RestFoundation.IParameterValueProvider.CreateValue(RestFoundation.Runtime.Handlers.IRestServiceHandler,System.Reflection.ParameterInfo,System.Boolean@)">
      <summary>
            Creates a parameter value based on the routing and HTTP data.
            </summary>
      <param name="handler">The REST handler associated with the HTTP request.</param>
      <param name="parameter">The service method parameters.</param>
      <param name="isResource">
            true if the parameter represents a REST resource; otherwise, false. Only 1 resource per
            service method is allowed.
            </param>
      <returns>The created parameter value.</returns>
    </member>
    <member name="T:RestFoundation.IStreamCompressor">
      <summary>
            Defines a stream compressor.
            </summary>
    </member>
    <member name="M:RestFoundation.IStreamCompressor.Compress(System.IO.Stream,System.Collections.Generic.IEnumerable{System.String},System.String@)">
      <summary>
            Returns a stream instance that compresses the data of the original output stream along
            with the chosen output encoding.
            </summary>
      <param name="output">The output stream to compress.</param>
      <param name="acceptedEncodings">A sequence of accepted encodings.</param>
      <param name="outputEncoding">The chosen output encoding.</param>
      <returns>The compressed stream.</returns>
    </member>
    <member name="T:RestFoundation.IServiceContext">
      <summary>
            Defines a service context.
            </summary>
    </member>
    <member name="M:RestFoundation.IServiceContext.GetPath``1(System.Linq.Expressions.Expression{System.Action{``0}})">
      <summary>
            Gets the application relative URL for a service contract method.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <param name="serviceMethod">The service contract method.</param>
      <returns>The application relative URL for the service method.</returns>
      <exception cref="T:System.InvalidOperationException">
            If an invalid service URL or a service method provided.
            </exception>
    </member>
    <member name="M:RestFoundation.IServiceContext.GetPath``1(System.Linq.Expressions.Expression{System.Action{``0}},RestFoundation.RouteHash)">
      <summary>
            Gets the application relative URL for a service contract method.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <param name="serviceMethod">The service contract method.</param>
      <param name="routeValues">Additional route values.</param>
      <returns>The application relative URL for the service method.</returns>
      <exception cref="T:System.InvalidOperationException">
            If an invalid service URL or a service method provided.
            </exception>
    </member>
    <member name="M:RestFoundation.IServiceContext.GetPath``1(System.String,System.Linq.Expressions.Expression{System.Action{``0}})">
      <summary>
            Gets the application relative URL for a service contract method.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <param name="serviceUrl">
            The service URL defined by the MapUrl(serviceUrl) function by the <see cref="T:RestFoundation.Configuration.UrlBuilder" />
            configuration object.
            </param>
      <param name="serviceMethod">The service contract method.</param>
      <returns>The application relative URL for the service method.</returns>
      <exception cref="T:System.InvalidOperationException">
            If an invalid service URL or a service method provided.
            </exception>
    </member>
    <member name="M:RestFoundation.IServiceContext.GetPath``1(System.String,System.Linq.Expressions.Expression{System.Action{``0}},RestFoundation.RouteHash)">
      <summary>
            Gets the application relative URL for a service contract method.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <param name="serviceUrl">
            The service URL defined by the MapUrl(serviceUrl) function by the <see cref="T:RestFoundation.Configuration.UrlBuilder" />
            configuration object.
            </param>
      <param name="serviceMethod">The service contract method.</param>
      <param name="routeValues">Additional route values.</param>
      <returns>The application relative URL for the service method.</returns>
      <exception cref="T:System.InvalidOperationException">
            If an invalid service URL or a service method provided.
            </exception>
    </member>
    <member name="M:RestFoundation.IServiceContext.GetPath``1(System.String,System.Linq.Expressions.Expression{System.Action{``0}},RestFoundation.RouteHash,RestFoundation.UriSegments)">
      <summary>
            Gets the application absolute URL for a service contract method.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <param name="serviceUrl">
            The service URL defined by the MapUrl(serviceUrl) function by the <see cref="T:RestFoundation.Configuration.UrlBuilder" />
            configuration object.
            </param>
      <param name="serviceMethod">The service contract method.</param>
      <param name="routeValues">Additional route values.</param>
      <param name="segments">URI segments necessary to generate an absolute URL. Set it to null to generate a relative URL.</param>
      <returns>The application absolute URL for the service method.</returns>
      <exception cref="T:System.InvalidOperationException">
            If an invalid service URL or a service method provided.
            </exception>
    </member>
    <member name="M:RestFoundation.IServiceContext.GetPath``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
            Gets the application relative URL for a service contract method.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <param name="serviceMethod">The service contract method.</param>
      <returns>The application relative URL for the service method.</returns>
      <exception cref="T:System.InvalidOperationException">
            If an invalid service URL or a service method provided.
            </exception>
    </member>
    <member name="M:RestFoundation.IServiceContext.GetPath``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RestFoundation.RouteHash)">
      <summary>
            Gets the application relative URL for a service contract method.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <param name="serviceMethod">The service contract method.</param>
      <param name="routeValues">Additional route values.</param>
      <returns>The application relative URL for the service method.</returns>
      <exception cref="T:System.InvalidOperationException">
            If an invalid service URL or a service method provided.
            </exception>
    </member>
    <member name="M:RestFoundation.IServiceContext.GetPath``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
            Gets the application relative URL for a service contract method.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <param name="serviceUrl">
            The service URL defined by the MapUrl(serviceUrl) function by the <see cref="T:RestFoundation.Configuration.UrlBuilder" />
            configuration object.
            </param>
      <param name="serviceMethod">The service contract method.</param>
      <returns>The application relative URL for the service method.</returns>
      <exception cref="T:System.InvalidOperationException">
            If an invalid service URL or a service method provided.
            </exception>
    </member>
    <member name="M:RestFoundation.IServiceContext.GetPath``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RestFoundation.RouteHash)">
      <summary>
            Gets the application relative URL for a service contract method.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <param name="serviceUrl">
            The service URL defined by the MapUrl(serviceUrl) function by the <see cref="T:RestFoundation.Configuration.UrlBuilder" />
            configuration object.
            </param>
      <param name="serviceMethod">The service contract method.</param>
      <param name="routeValues">Additional route values.</param>
      <returns>The application relative URL for the service method.</returns>
      <exception cref="T:System.InvalidOperationException">
            If an invalid service URL or a service method provided.
            </exception>
    </member>
    <member name="M:RestFoundation.IServiceContext.GetPath``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RestFoundation.RouteHash,RestFoundation.UriSegments)">
      <summary>
            Gets the application absolute URL for a service contract method.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <param name="serviceUrl">
            The service URL defined by the MapUrl(serviceUrl) function by the <see cref="T:RestFoundation.Configuration.UrlBuilder" />
            configuration object.
            </param>
      <param name="serviceMethod">The service contract method.</param>
      <param name="routeValues">Additional route values.</param>
      <param name="segments">URI segments necessary to generate an absolute URL. Set it to null to generate a relative URL.</param>
      <returns>The application absolute URL for the service method.</returns>
      <exception cref="T:System.InvalidOperationException">
            If an invalid service URL or a service method provided.
            </exception>
    </member>
    <member name="M:RestFoundation.IServiceContext.MapPath(System.String)">
      <summary>
            Returns the physical path associated to the virtual path of the file.
            </summary>
      <param name="relativePath">The relative virtual path to the file.</param>
      <returns>The physical file path.</returns>
    </member>
    <member name="M:RestFoundation.IServiceContext.GetHttpContext">
      <summary>
            Gets the underlying <see cref="T:System.Web.HttpContextBase" /> instance that may provide additional functionality.
            </summary>
      <returns>The underlying HTTP context instance.</returns>
    </member>
    <member name="P:RestFoundation.IServiceContext.Request">
      <summary>
            Gets the current HTTP request.
            </summary>
    </member>
    <member name="P:RestFoundation.IServiceContext.Response">
      <summary>
            Gets the current HTTP response.
            </summary>
    </member>
    <member name="P:RestFoundation.IServiceContext.Cache">
      <summary>
            Gets the service cache.
            </summary>
    </member>
    <member name="P:RestFoundation.IServiceContext.User">
      <summary>
            Gets or sets security information for the current HTTP request.
            </summary>
    </member>
    <member name="P:RestFoundation.IServiceContext.IsAuthenticated">
      <summary>
            Gets a value indicating whether there is an authenticated user associated with the HTTP request.
            </summary>
    </member>
    <member name="P:RestFoundation.IServiceContext.IsDebug">
      <summary>
            Gets a value indicating whether the service is running in debug mode.
            </summary>
    </member>
    <member name="T:RestFoundation.UnitTesting.MockContextManager">
      <summary>
            Represents a mock service context manager.
            </summary>
    </member>
    <member name="M:RestFoundation.UnitTesting.MockContextManager.GenerateContext">
      <summary>
            Creates the current HTTP context.
            </summary>
      <returns>The service context.</returns>
      <exception cref="T:System.InvalidOperationException">
            If the current HTTP context has already been initialized.
            </exception>
    </member>
    <member name="M:RestFoundation.UnitTesting.MockContextManager.GenerateContext(RestFoundation.HttpMethod)">
      <summary>
            Creates the current HTTP context with the provided HTTP method.
            </summary>
      <param name="method">The HTTP method.</param>
      <returns>The service context.</returns>
      <exception cref="T:System.InvalidOperationException">
            If the current HTTP context has already been initialized.
            </exception>
    </member>
    <member name="M:RestFoundation.UnitTesting.MockContextManager.GenerateContext(System.String,RestFoundation.HttpMethod)">
      <summary>
            Creates the current HTTP context with the provided virtual path and the HTTP method.
            </summary>
      <param name="virtualPath">The virtual path.</param>
      <param name="method">The HTTP method.</param>
      <returns>The service context.</returns>
      <exception cref="T:System.InvalidOperationException">
            If the current HTTP context has already been initialized.
            </exception>
    </member>
    <member name="M:RestFoundation.UnitTesting.MockContextManager.DestroyContext">
      <summary>
            Destroys the current HTTP context.
            </summary>
    </member>
    <member name="M:RestFoundation.UnitTesting.MockContextManager.SetAcceptTypes(System.String[])">
      <summary>
            Sets the provided accept media types to the generated HTTP context.
            </summary>
      <param name="acceptTypes">The accepted media types.</param>
    </member>
    <member name="M:RestFoundation.UnitTesting.MockContextManager.SetContentType(System.String)">
      <summary>
            Sets the provided content type to the generated HTTP context.
            </summary>
      <param name="contentType">The content type.</param>
    </member>
    <member name="M:RestFoundation.UnitTesting.MockContextManager.SetContentEncoding(System.Text.Encoding)">
      <summary>
            Sets the provided content encoding to the generated HTTP context.
            </summary>
      <param name="contentEncoding">The content encoding.</param>
    </member>
    <member name="M:RestFoundation.UnitTesting.MockContextManager.SetHeader(System.String,System.String)">
      <summary>
            Sets a header with the provided name and value to the generated HTTP context.
            </summary>
      <param name="name">The header name.</param>
      <param name="value">The header value.</param>
    </member>
    <member name="M:RestFoundation.UnitTesting.MockContextManager.SetHeaders(System.Collections.Specialized.NameValueCollection)">
      <summary>
            Sets the provided headers to the generated HTTP context.
            </summary>
      <param name="headers">The headers.</param>
    </member>
    <member name="M:RestFoundation.UnitTesting.MockContextManager.SetFormData(System.String,System.String)">
      <summary>
            Sets a form data item with the provided name and value to the generated HTTP context.
            </summary>
      <param name="name">The form data item name.</param>
      <param name="value">The form data item value.</param>
    </member>
    <member name="M:RestFoundation.UnitTesting.MockContextManager.SetFormData(System.Collections.Specialized.NameValueCollection)">
      <summary>
            Sets the provided form data collection to the generated HTTP context.
            </summary>
      <param name="formData">The form data collection.</param>
    </member>
    <member name="M:RestFoundation.UnitTesting.MockContextManager.SetQuery(System.String,System.String)">
      <summary>
            Sets a query string item with the provided name and value to the generated HTTP context.
            </summary>
      <param name="name">The query string name.</param>
      <param name="value">The query string value.</param>
    </member>
    <member name="M:RestFoundation.UnitTesting.MockContextManager.SetQuery(System.Collections.Specialized.NameValueCollection)">
      <summary>
            Sets the provided query string to the generated HTTP context.
            </summary>
      <param name="queryString">The query string keys and values.</param>
    </member>
    <member name="M:RestFoundation.UnitTesting.MockContextManager.SetServerVariable(System.String,System.String)">
      <summary>
            Sets a server variable with the provided name and value to the generated HTTP context.
            </summary>
      <param name="name">The server variable name.</param>
      <param name="value">The server variable value.</param>
    </member>
    <member name="M:RestFoundation.UnitTesting.MockContextManager.SetServerVariables(System.Collections.Specialized.NameValueCollection)">
      <summary>
            Sets the provided server variable to the generated HTTP context.
            </summary>
      <param name="queryString">The server variable keys and values.</param>
    </member>
    <member name="T:RestFoundation.UriSegments">
      <summary>
            Contains URI segments to generate an absolute URI from a relative path.
            </summary>
    </member>
    <member name="M:RestFoundation.UriSegments.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.UriSegments" /> class.
            </summary>
      <param name="usesHttps">Indicates whether the HTTPS protocol should be used.</param>
    </member>
    <member name="M:RestFoundation.UriSegments.#ctor(System.Boolean,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.UriSegments" /> class.
            </summary>
      <param name="usesHttps">Indicates whether the HTTPS protocol should be used.</param>
      <param name="host">Specifies a different host name for the URI.</param>
    </member>
    <member name="M:RestFoundation.UriSegments.#ctor(System.Boolean,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.UriSegments" /> class.
            </summary>
      <param name="usesHttps">Indicates whether the HTTPS protocol should be used.</param>
      <param name="port">Specifies a different HTTP/S port for the URI.</param>
    </member>
    <member name="M:RestFoundation.UriSegments.#ctor(System.Boolean,System.String,System.Int32)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.UriSegments" /> class.
            </summary>
      <param name="usesHttps">Indicates whether the HTTPS protocol should be used.</param>
      <param name="host">Specifies a different host name for the URI.</param>
      <param name="port">Specifies a different HTTP/S port for the URI.</param>
    </member>
    <member name="M:RestFoundation.UriSegments.CreateFromHttpRequest(RestFoundation.IHttpRequest)">
      <summary>
            Creates a <see cref="T:RestFoundation.UriSegments" /> instance from the provided <see cref="T:RestFoundation.IHttpRequest" /> information.
            </summary>
      <param name="request">The current HTTP request.</param>
      <returns>The generated <see cref="T:RestFoundation.UriSegments" /> instance.</returns>
    </member>
    <member name="M:RestFoundation.UriSegments.GenerateUri(System.String)">
      <summary>
            Returns an absolute URI generated from the segments and the provided relative path.
            </summary>
      <param name="relativePath">A relative path.</param>
      <returns>A <see cref="T:System.String" /> containg the generated URI.</returns>
      <exception cref="T:System.InvalidOperationException">If no host name could be determined.</exception>
    </member>
    <member name="T:RestFoundation.Runtime.HttpResourceFaultException">
      <summary>
            Represents an HTTP resource fault exception. This is a special type of exception that is used
            to return a collection of resource validation faults to the REST client. It does not get caught
            by the service behaviors.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.HttpResourceFaultException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Runtime.HttpResourceFaultException" /> class.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.HttpResourceFaultException.#ctor(System.Collections.Generic.IEnumerable{System.String})">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Runtime.HttpResourceFaultException" /> class with the provided general fault
            messages.
            </summary>
      <param name="faultMessages">A sequence of fault messages.</param>
    </member>
    <member name="M:RestFoundation.Runtime.HttpResourceFaultException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Runtime.HttpResourceFaultException" /> class with the provided message.
            </summary>
      <param name="message">The exception message.</param>
    </member>
    <member name="M:RestFoundation.Runtime.HttpResourceFaultException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Runtime.HttpResourceFaultException" /> class with the provided message
            and a reference to the exception that is the cause of the current exception.
            </summary>
      <param name="message">The exception message.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference.</param>
    </member>
    <member name="M:RestFoundation.Runtime.HttpResourceFaultException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Runtime.HttpResourceFaultException" /> class with serialized data.
            </summary>
      <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.
            </param>
      <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.
            </param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="M:RestFoundation.Runtime.HttpResourceFaultException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
      <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.
            </param>
      <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.
            </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:RestFoundation.Runtime.HttpResourceFaultException.FaultMessages">
      <summary>
            Gets a list of the exception specific general fault messages.
            </summary>
    </member>
    <member name="T:RestFoundation.Validation.IResourceValidator">
      <summary>
            Defines a resource validator.
            </summary>
    </member>
    <member name="M:RestFoundation.Validation.IResourceValidator.IsValid(System.Object,System.Collections.Generic.IReadOnlyCollection{RestFoundation.Validation.ValidationError}@)">
      <summary>
            Returns a <see cref="T:System.Boolean" /> value indicating whether the resource is valid along with the associated
            collection of errors.
            </summary>
      <param name="resource">The resource.</param>
      <param name="errors">A read-only collection of the validation errors.</param>
      <returns>true if the resource is valid; otherwise, false.</returns>
    </member>
    <member name="T:RestFoundation.IUploadedFile">
      <summary>
            Represents an uploaded file for multi-part content requests.
            </summary>
    </member>
    <member name="M:RestFoundation.IUploadedFile.SaveAs(System.String)">
      <summary>
            Saves the file on disk under the provided file name.
            </summary>
      <param name="fileName">The file name.</param>
    </member>
    <member name="M:RestFoundation.IUploadedFile.ReadAsByteArray">
      <summary>
            Returns the file content data as a byte array.
            </summary>
      <returns>A byte array containing the file content data.</returns>
    </member>
    <member name="M:RestFoundation.IUploadedFile.ReadAsString">
      <summary>
            Returns the file content data as a <see cref="T:System.String" />.
            </summary>
      <returns>A string containing the file content data.</returns>
    </member>
    <member name="P:RestFoundation.IUploadedFile.ContentType">
      <summary>
            Gets the file content type.
            </summary>
    </member>
    <member name="P:RestFoundation.IUploadedFile.ContentLength">
      <summary>
            Gets the file content length.
            </summary>
    </member>
    <member name="P:RestFoundation.IUploadedFile.Name">
      <summary>
            Gets the file name.
            </summary>
    </member>
    <member name="P:RestFoundation.IUploadedFile.Data">
      <summary>
            Gets the stream containing the file data.
            </summary>
    </member>
    <member name="T:RestFoundation.Rest">
      <summary>
            Represents the REST Framework configuration class.
            </summary>
    </member>
    <member name="M:RestFoundation.Rest.Initialize(System.Reflection.Assembly)">
      <summary>
            Initializes REST Foundation configuration with the default IoC container.
            </summary>
      <param name="serviceAssembly">The service assembly.</param>
      <returns>The configuration options object.</returns>
    </member>
    <member name="M:RestFoundation.Rest.InitializeAndMock(System.Reflection.Assembly)">
      <summary>
            Initializes REST Foundation configuration with the default IoC container. Mocked
            service context is injected. Use this method only for unit testing.
            </summary>
      <param name="serviceAssembly">The service assembly.</param>
      <returns>The configuration options object.</returns>
    </member>
    <member name="M:RestFoundation.Rest.Initialize(System.String)">
      <summary>
            Initializes REST Foundation configuration with the default IoC container.
            </summary>
      <param name="serviceAssemblyName">The service assembly name.</param>
      <returns>The configuration options object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceAssemblyName" /> is null.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="serviceAssemblyName" /> is not found.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="serviceAssemblyName" /> is not a valid assembly.</exception>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain.</exception>
      <exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences.</exception>
    </member>
    <member name="M:RestFoundation.Rest.InitializeAndMock(System.String)">
      <summary>
            Initializes REST Foundation configuration with the default IoC container. Mocked
            service context is injected. Use this method only for unit testing.
            </summary>
      <param name="serviceAssemblyName">The service assembly name.</param>
      <returns>The configuration options object.</returns>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceAssemblyName" /> is null.</exception>
      <exception cref="T:System.IO.FileNotFoundException">
        <paramref name="serviceAssemblyName" /> is not found.</exception>
      <exception cref="T:System.BadImageFormatException">
        <paramref name="serviceAssemblyName" /> is not a valid assembly.</exception>
      <exception cref="T:System.AppDomainUnloadedException">The operation is attempted on an unloaded application domain.</exception>
      <exception cref="T:System.IO.FileLoadException">An assembly or module was loaded twice with two different evidences.</exception>
    </member>
    <member name="M:RestFoundation.Rest.Initialize(System.Action{RestFoundation.Configuration.DependencyBuilder})">
      <summary>
            Initializes REST foundation configuration with custom dependencies.
            </summary>
      <param name="builder">The dependency builder.</param>
      <returns>The configuration options object.</returns>
    </member>
    <member name="M:RestFoundation.Rest.InitializeAndMock(System.Action{RestFoundation.Configuration.DependencyBuilder})">
      <summary>
            Initializes REST foundation configuration with custom dependencies.
            </summary>
      <param name="builder">The dependency builder.</param>
      <returns>The configuration options object.</returns>
    </member>
    <member name="M:RestFoundation.Rest.Initialize(RestFoundation.ServiceLocation.IServiceLocator)">
      <summary>
            Initializes REST Foundation configuration with the default IoC container.
            </summary>
      <param name="serviceLocator">A service locator instance.</param>
      <returns>The configuration options object.</returns>
    </member>
    <member name="M:RestFoundation.Rest.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:RestFoundation.Rest.FoundationAssembly">
      <summary>
            Gets the REST Foundation assembly instance for IoC support.
            </summary>
    </member>
    <member name="P:RestFoundation.Rest.ServiceContextTypes">
      <summary>
            Gets a collection of the service context dependent types.
            </summary>
    </member>
    <member name="P:RestFoundation.Rest.Configuration">
      <summary>
            Gets the REST Foundation configuration instance.
            </summary>
    </member>
    <member name="P:RestFoundation.Rest.Options">
      <summary>
            Gets the REST Foundation configuration options.
            </summary>
    </member>
    <member name="P:RestFoundation.Rest.ServiceLocator">
      <summary>
            Gets the service locator.
            </summary>
    </member>
    <member name="T:RestFoundation.Results.ContentResult">
      <summary>
            Represents a content result.
            </summary>
    </member>
    <member name="M:RestFoundation.Results.ContentResult.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Results.ContentResult" /> class.
            </summary>
    </member>
    <member name="M:RestFoundation.Results.ContentResult.#ctor(RestFoundation.IContentNegotiator)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Results.ContentResult" /> class with the provided content negotiator.
            </summary>
      <param name="contentNegotiator">The content negotiator.</param>
    </member>
    <member name="M:RestFoundation.Results.ContentResult.Execute(RestFoundation.IServiceContext)">
      <summary>
            Executes the result against the provided service context.
            </summary>
      <param name="context">The service context.</param>
    </member>
    <member name="P:RestFoundation.Results.ContentResult.Content">
      <summary>
            Gets or sets the string content.
            </summary>
    </member>
    <member name="P:RestFoundation.Results.ContentResult.ContentType">
      <summary>
            Gets or sets the content type.
            </summary>
    </member>
    <member name="P:RestFoundation.Results.ContentResult.ClearOutput">
      <summary>
            Gets or sets a value indicating whether the response output should be cleared.
            </summary>
    </member>
    <member name="T:RestFoundation.Results.FeedResult">
      <summary>
            Represents an RSS/Atom feed result.
            </summary>
    </member>
    <member name="T:RestFoundation.Results.FeedResult.SyndicationFormat">
      <summary>
            Defines a syndication format.
            </summary>
    </member>
    <member name="M:RestFoundation.Results.FeedResult.Execute(RestFoundation.IServiceContext)">
      <summary>
            Executes the result against the provided service context.
            </summary>
      <param name="context">The service context.</param>
    </member>
    <member name="P:RestFoundation.Results.FeedResult.Feed">
      <summary>
            Gets or sets the feed instance.
            </summary>
    </member>
    <member name="P:RestFoundation.Results.FeedResult.Format">
      <summary>
            Gets or sets the syndication format.
            </summary>
    </member>
    <member name="T:RestFoundation.Results.XmlResult">
      <summary>
            Represents an XML result.
            </summary>
    </member>
    <member name="M:RestFoundation.Results.XmlResult.Execute(RestFoundation.IServiceContext)">
      <summary>
            Executes the result against the provided service context.
            </summary>
      <param name="context">The service context.</param>
    </member>
    <member name="P:RestFoundation.Results.XmlResult.Content">
      <summary>
            Gets or sets the object to serialize to XML.
            </summary>
    </member>
    <member name="P:RestFoundation.Results.XmlResult.ContentType">
      <summary>
            Gets or sets the content type. The "application/xml" content type is used by default.
            </summary>
    </member>
    <member name="T:RestFoundation.Results.FileUrlResult">
      <summary>
            Represents a file URL result.
            </summary>
    </member>
    <member name="M:RestFoundation.Results.FileUrlResult.GetFile(RestFoundation.IServiceContext)">
      <summary>
            Gets the <see cref="T:System.IO.FileInfo" /> instance using the service context.
            </summary>
      <param name="context">The service context.</param>
      <returns>The file info instance.</returns>
    </member>
    <member name="P:RestFoundation.Results.FileUrlResult.FileUrl">
      <summary>
            Gets or sets the file URL located in the same application as the service.
            </summary>
    </member>
    <member name="T:RestFoundation.Results.FilePathResult">
      <summary>
            Represents a local file path result.
            </summary>
    </member>
    <member name="M:RestFoundation.Results.FilePathResult.GetFile(RestFoundation.IServiceContext)">
      <summary>
            Gets the <see cref="T:System.IO.FileInfo" /> instance using the service context.
            </summary>
      <param name="context">The service context.</param>
      <returns>The file info instance.</returns>
    </member>
    <member name="P:RestFoundation.Results.FilePathResult.FilePath">
      <summary>
            Gets or sets the local file path.
            </summary>
    </member>
    <member name="T:RestFoundation.Results.JsonResult">
      <summary>
            Represents a JSON result.
            </summary>
    </member>
    <member name="M:RestFoundation.Results.JsonResult.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Results.JsonResult" /> class.
            </summary>
    </member>
    <member name="M:RestFoundation.Results.JsonResult.Execute(RestFoundation.IServiceContext)">
      <summary>
            Executes the result against the provided service context.
            </summary>
      <param name="context">The service context.</param>
    </member>
    <member name="P:RestFoundation.Results.JsonResult.Content">
      <summary>
            Gets or sets the object to serialize to JSON.
            </summary>
    </member>
    <member name="P:RestFoundation.Results.JsonResult.ContentType">
      <summary>
            Gets or sets the content type. The "application/json" content type is used by default.
            </summary>
    </member>
    <member name="P:RestFoundation.Results.JsonResult.WrapContent">
      <summary>
            Gets or sets a value indicating whether to wrap the content.
            </summary>
    </member>
    <member name="T:RestFoundation.Configuration.RouteConfiguration">
      <summary>
            Represents a route configuration.
            </summary>
    </member>
    <member name="M:RestFoundation.Configuration.RouteConfiguration.BlockMediaTypesForFormatter``1">
      <summary>
            Prevents media types supported by the provided formatter from being supported by the
            service through the current route.
            </summary>
      <typeparam name="TFormatter">The type of the media type formatter.</typeparam>
      <returns>The route configuration.</returns>
    </member>
    <member name="M:RestFoundation.Configuration.RouteConfiguration.BlockMediaType(System.String)">
      <summary>
            Prevents a provided media type from being supported by the service through the current route.
            </summary>
      <param name="mediaType">The media type.</param>
      <returns>The route configuration.</returns>
    </member>
    <member name="M:RestFoundation.Configuration.RouteConfiguration.SetMediaTypeFormatter(RestFoundation.Formatters.IMediaTypeFormatter)">
      <summary>
            Sets a route specific formatter for its supported media types for the current route.
            </summary>
      <param name="formatter">The media formatter.</param>
      <returns>The route configuration.</returns>
    </member>
    <member name="M:RestFoundation.Configuration.RouteConfiguration.SetMediaTypeFormatter(System.String,RestFoundation.Formatters.IMediaTypeFormatter)">
      <summary>
            Sets a route specific formatter for the provided media type for the current route.
            </summary>
      <param name="mediaType">The media type.</param>
      <param name="formatter">The media formatter.</param>
      <returns>The route configuration.</returns>
    </member>
    <member name="M:RestFoundation.Configuration.RouteConfiguration.WithBehaviors(RestFoundation.Behaviors.IServiceBehavior[])">
      <summary>
            Adds behaviors to the current route.
            </summary>
      <param name="behaviors">An array of behavior instances.</param>
      <returns>The route configuration.</returns>
    </member>
    <member name="M:RestFoundation.Configuration.RouteConfiguration.WithExceptionHandler(RestFoundation.IServiceExceptionHandler)">
      <summary>
            Sets an exception handler for the current route.
            </summary>
      <param name="exceptionHandler">The exception handler.</param>
      <returns>The route configuration.</returns>
    </member>
    <member name="M:RestFoundation.Configuration.RouteConfiguration.WithIPsRestrictedBySection(System.String)">
      <summary>
            Specifies a Web.config name-value section that contains an ACL list of allowed IPs.
            All other IPs will be blocked for the current route.
            </summary>
      <param name="nameValueSectionName">The section name.</param>
      <returns>The route configuration.</returns>
    </member>
    <member name="M:RestFoundation.Configuration.RouteConfiguration.DoNotValidateRequests">
      <summary>
            Skip HTTP request validation that checks query string, form data and cookies for dangerous characters for the current route.
            </summary>
      <returns>The route configuration.</returns>
    </member>
    <member name="T:RestFoundation.Runtime.AcceptValue">
      <summary>
            Represents an Accept* HTTP header value including its name, weight and an optional level.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.AcceptValue.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Runtime.AcceptValue" /> struct
            by parsing the given value for name and weight and assigns the given
            ordinal.
            </summary>
      <param name="value">The value to be parsed e.g. gzip=0.3</param>
    </member>
    <member name="M:RestFoundation.Runtime.AcceptValue.op_Equality(RestFoundation.Runtime.AcceptValue,RestFoundation.Runtime.AcceptValue)">
      <summary>
            Compares two <see cref="T:RestFoundation.Runtime.AcceptValue" /> objects for equality.
            </summary>
      <param name="left">The first object</param>
      <param name="right">The second object</param>
      <returns>true if both objects are equivalent; otherwise, false.</returns>
    </member>
    <member name="M:RestFoundation.Runtime.AcceptValue.op_Inequality(RestFoundation.Runtime.AcceptValue,RestFoundation.Runtime.AcceptValue)">
      <summary>
            Compares two <see cref="T:RestFoundation.Runtime.AcceptValue" /> objects for inequality.
            </summary>
      <param name="left">The first object</param>
      <param name="right">The second object</param>
      <returns>true if both objects are not equivalent; otherwise, false.</returns>
    </member>
    <member name="M:RestFoundation.Runtime.AcceptValue.op_LessThan(RestFoundation.Runtime.AcceptValue,RestFoundation.Runtime.AcceptValue)">
      <summary>
            Compares whether the first <see cref="T:RestFoundation.Runtime.AcceptValue" /> is less than the second.
            </summary>
      <param name="left">The first object</param>
      <param name="right">The second object</param>
      <returns>true if the first object is less than the second; otherwise, false.</returns>
    </member>
    <member name="M:RestFoundation.Runtime.AcceptValue.op_GreaterThan(RestFoundation.Runtime.AcceptValue,RestFoundation.Runtime.AcceptValue)">
      <summary>
            Compares whether the first <see cref="T:RestFoundation.Runtime.AcceptValue" /> is greater than the second.
            </summary>
      <param name="left">The first object</param>
      <param name="right">The second object</param>
      <returns>true if the first object is greater than the second; otherwise, false.</returns>
    </member>
    <member name="M:RestFoundation.Runtime.AcceptValue.Parse(System.String)">
      <summary>
            Returns a string for the name and weight (qvalue).
            </summary>
      <param name="value">The <see cref="T:System.String" /> to parse</param>
      <returns>The parsed <see cref="T:RestFoundation.Runtime.AcceptValue" /> instance</returns>
    </member>
    <member name="M:RestFoundation.Runtime.AcceptValue.Parse(System.String,System.Int32)">
      <summary>
            Returns a string for the name and weight (qvalue).
            </summary>
      <param name="value">The <see cref="T:System.String" /> to parse</param>
      <param name="ordinal">The order of item in sequence</param>
      <returns>The parsed <see cref="T:RestFoundation.Runtime.AcceptValue" /> instance</returns>
    </member>
    <member name="M:RestFoundation.Runtime.AcceptValue.CompareByWeightAscending(RestFoundation.Runtime.AcceptValue,RestFoundation.Runtime.AcceptValue)">
      <summary>
            Compares two <see cref="T:RestFoundation.Runtime.AcceptValue" /> instances in ascending order.
            </summary>
      <param name="first">The first <see cref="T:RestFoundation.Runtime.AcceptValue" /></param>
      <param name="second">The second <see cref="T:RestFoundation.Runtime.AcceptValue" /></param>
      <returns>
            A signed number indicating the relative values of this instance and value.
            </returns>
    </member>
    <member name="M:RestFoundation.Runtime.AcceptValue.CompareByWeightDescending(RestFoundation.Runtime.AcceptValue,RestFoundation.Runtime.AcceptValue)">
      <summary>
            Compares two <see cref="T:RestFoundation.Runtime.AcceptValue" /> instances in descending order.
            </summary>
      <param name="first">The first <see cref="T:RestFoundation.Runtime.AcceptValue" /></param>
      <param name="second">The second <see cref="T:RestFoundation.Runtime.AcceptValue" /></param>
      <returns>
            A signed number indicating the relative values of this instance and value
            </returns>
    </member>
    <member name="M:RestFoundation.Runtime.AcceptValue.CompareTo(RestFoundation.Runtime.AcceptValue)">
      <summary>
            Compares this instance to another <see cref="T:RestFoundation.Runtime.AcceptValue" /> by comparing
            first weights, then ordinals.
            </summary>
      <param name="other">The <see cref="T:RestFoundation.Runtime.AcceptValue" /> to compare</param>
      <returns>
            A signed number indicating the relative values of this instance and value
            </returns>
    </member>
    <member name="M:RestFoundation.Runtime.AcceptValue.Equals(RestFoundation.Runtime.AcceptValue)">
      <summary>
            Indicates whether this instance and the provided <see cref="T:RestFoundation.Runtime.AcceptValue" /> are equal.
            </summary>
      <param name="other">Another <see cref="T:RestFoundation.Runtime.AcceptValue" /> object to compare to.</param>
      <returns>
            true if <paramref name="other" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
    </member>
    <member name="M:RestFoundation.Runtime.AcceptValue.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <param name="obj">Another object to compare to.</param>
      <returns>
            true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:RestFoundation.Runtime.AcceptValue.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:RestFoundation.Runtime.AcceptValue.ToString">
      <summary>
            Returns the fully qualified type name of this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> containing a fully qualified type name.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:RestFoundation.Runtime.AcceptValue.Name">
      <summary>
            Gets the name of the value part.
            </summary>
    </member>
    <member name="P:RestFoundation.Runtime.AcceptValue.Weight">
      <summary>
            Gets the weight (or qvalue, quality value) of the item.
            </summary>
    </member>
    <member name="P:RestFoundation.Runtime.AcceptValue.Level">
      <summary>
            Gets the level of the item. If a level is not specified, it is assumed to be 0.
            </summary>
    </member>
    <member name="P:RestFoundation.Runtime.AcceptValue.Charset">
      <summary>
            Gets the item encoding. If an encoding is not specified, UTF-8 is assumed.
            </summary>
    </member>
    <member name="P:RestFoundation.Runtime.AcceptValue.Version">
      <summary>
            Gets the accepted mime type version. If the version is not specified, it is assumed
            to be 0.
            </summary>
    </member>
    <member name="P:RestFoundation.Runtime.AcceptValue.CanAccept">
      <summary>
            Gets a value indicating whether the value can be accepted
            i.e. it's weight is greater than zero.
            </summary>
    </member>
    <member name="P:RestFoundation.Runtime.AcceptValue.IsEmpty">
      <summary>
            Gets a value indicating whether the value is empty
            i.e. has no name.
            </summary>
    </member>
    <member name="T:RestFoundation.Runtime.AcceptValueOptionType">
      <summary>
            Indicates how the accepted values will be searched for the preferred value.
            </summary>
    </member>
    <member name="F:RestFoundation.Runtime.AcceptValueOptionType.None">
      <summary>
            Allow unknown values if the wildcard support is allowed
            </summary>
    </member>
    <member name="F:RestFoundation.Runtime.AcceptValueOptionType.IgnoreWildcards">
      <summary>
            Deny unknown values ignoring the wildcard support, if applicable
            </summary>
    </member>
    <member name="T:RestFoundation.Security.AuthorizationHeader">
      <summary>
            Represents an authorization header.
            </summary>
    </member>
    <member name="M:RestFoundation.Security.AuthorizationHeader.#ctor(System.String,System.String,System.Collections.Specialized.NameValueCollection)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Security.AuthorizationHeader" /> class.
            </summary>
      <param name="authenticationType">The authentication type.</param>
      <param name="userName">The user name.</param>
      <param name="parameters">A collection of additional parameters.</param>
    </member>
    <member name="P:RestFoundation.Security.AuthorizationHeader.AuthenticationType">
      <summary>
            Gets the authentication type.
            </summary>
    </member>
    <member name="P:RestFoundation.Security.AuthorizationHeader.UserName">
      <summary>
            Gets the user name.
            </summary>
    </member>
    <member name="P:RestFoundation.Security.AuthorizationHeader.Password">
      <summary>
            Gets the password, if applicable.
            </summary>
    </member>
    <member name="P:RestFoundation.Security.AuthorizationHeader.Parameters">
      <summary>
            Gets the parameter collection.
            </summary>
    </member>
    <member name="T:RestFoundation.Security.AuthorizationHeaderParser">
      <summary>
            Represents an authorization header parser.
            </summary>
    </member>
    <member name="M:RestFoundation.Security.AuthorizationHeaderParser.TryParse(System.String,RestFoundation.Security.AuthorizationHeader@)">
      <summary>
            Tries to parse an authorization header from an Authorization header style string.
            </summary>
      <param name="authorizationString">The authorization string.</param>
      <param name="header">The authorization header to output.</param>
      <returns>true if the authorization was valid; otherwise, false.</returns>
    </member>
    <member name="M:RestFoundation.Security.AuthorizationHeaderParser.TryParse(System.String,System.Text.Encoding,RestFoundation.Security.AuthorizationHeader@)">
      <summary>
            Tries to parse an authorization header from an Authorization header style string.
            </summary>
      <param name="authorizationString">The authorization string.</param>
      <param name="encoding">The encoding.</param>
      <param name="header">The authorization header to output.</param>
      <returns>true if the authorization was valid; otherwise, false.</returns>
    </member>
    <member name="T:RestFoundation.Security.AuthorizationManager">
      <summary>
            The base authorization manager that does not perform any user authentication and denies any access.
            This is a dummy authorization manager implementation designed to be extended.
            </summary>
    </member>
    <member name="M:RestFoundation.Security.AuthorizationManager.GetCredentials(System.String)">
      <summary>
            Gets an authenticated and authorized user credentials by the provided user name.
            </summary>
      <param name="userName">The user name.</param>
      <returns>The user credentials; or null if the username is invalid.</returns>
    </member>
    <member name="T:RestFoundation.Context.ContextBase">
      <summary>
            Defines a base service context class.
            This class cannot be instantiated.
            </summary>
    </member>
    <member name="P:RestFoundation.Context.ContextBase.Context">
      <summary>
            Gets the underlying <see cref="T:System.Web.HttpContextBase" /> instance.
            </summary>
    </member>
    <member name="T:RestFoundation.Runtime.HttpMethodResolver">
      <summary>
            Represents the default HTTP method resolver. It uses the property values of the <see cref="T:RestFoundation.UrlAttribute" />
            as well as the name of the method to resolve the supported HTTP methods.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.HttpMethodResolver.Resolve(System.Reflection.MethodInfo)">
      <summary>
            Returns a sequence of HTTP methods supported by the service method.
            </summary>
      <param name="method">The service method.</param>
      <returns>A sequence of HTTP methods.</returns>
      <exception cref="T:System.InvalidOperationException">If the HTTP method could not be resolved.</exception>
    </member>
    <member name="T:RestFoundation.Security.MD5Encoder">
      <summary>
            Represents an MD5 encoder.
            </summary>
    </member>
    <member name="M:RestFoundation.Security.MD5Encoder.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Security.MD5Encoder" /> class.
            </summary>
    </member>
    <member name="M:RestFoundation.Security.MD5Encoder.Encode(System.String)">
      <summary>
            Encodes a value into a hexidecimal string representationo of its MD5 hash.
            </summary>
      <param name="value">A <see cref="T:System.String" /> containing the value.</param>
      <returns>The encoded representation of the string.</returns>
    </member>
    <member name="M:RestFoundation.Security.MD5Encoder.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:RestFoundation.Runtime.ServiceMethodLocator">
      <summary>
            Represents a service method locator.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.ServiceMethodLocator.#ctor(RestFoundation.IServiceContext,RestFoundation.IServiceFactory)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Runtime.ServiceMethodLocator" /> class.
            </summary>
      <param name="serviceContext">The service context.</param>
      <param name="serviceFactory">The service factory.</param>
    </member>
    <member name="M:RestFoundation.Runtime.ServiceMethodLocator.Locate(RestFoundation.Runtime.Handlers.IRestServiceHandler)">
      <summary>
            Locates the service method associated with the provided REST handler and returns the associated data.
            </summary>
      <param name="handler">A REST handler associated with HTTP request.</param>
      <returns>The service method data.</returns>
    </member>
    <member name="T:RestFoundation.Runtime.ServiceMethodLocatorData">
      <summary>
            Represents service method data returned by the service method locator.
            </summary>
    </member>
    <member name="F:RestFoundation.Runtime.ServiceMethodLocatorData.Options">
      <summary>
            The service method metadata associated with the OPTIONS HTTP method.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.ServiceMethodLocatorData.#ctor(System.Object,System.Reflection.MethodInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Runtime.ServiceMethodLocatorData" /> class.
            </summary>
      <param name="service">The service instance.</param>
      <param name="method">The method instance.</param>
    </member>
    <member name="P:RestFoundation.Runtime.ServiceMethodLocatorData.Service">
      <summary>
            Gets the service instance.
            </summary>
    </member>
    <member name="P:RestFoundation.Runtime.ServiceMethodLocatorData.Method">
      <summary>
            Gets the service method instance.
            </summary>
    </member>
    <member name="T:RestFoundation.Runtime.ServiceBehaviorInvoker">
      <summary>
            Represents a service behavior invoker class.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.ServiceBehaviorInvoker.#ctor(RestFoundation.IServiceContext)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Runtime.ServiceBehaviorInvoker" /> class.
            </summary>
      <param name="context">The service context.</param>
    </member>
    <member name="M:RestFoundation.Runtime.ServiceBehaviorInvoker.InvokeOnAuthorizingBehaviors(System.Collections.Generic.IList{RestFoundation.Behaviors.ISecureServiceBehavior},System.Object,System.Reflection.MethodInfo)">
      <summary>
            Executes <see cref="T:RestFoundation.Behaviors.ISecureServiceBehavior" /> behaviors.
            </summary>
      <param name="behaviors">The list of behaviors.</param>
      <param name="service">The service instance.</param>
      <param name="method">The service method.</param>
    </member>
    <member name="M:RestFoundation.Runtime.ServiceBehaviorInvoker.InvokeOnExecutingBehaviors(System.Collections.Generic.IList{RestFoundation.Behaviors.IServiceBehavior},System.Object,System.Reflection.MethodInfo,System.Object)">
      <summary>
            Executes <see cref="T:RestFoundation.Behaviors.IServiceBehavior" /> behaviors before a service method is called.
            </summary>
      <param name="behaviors">The list of behaviors.</param>
      <param name="service">The service instance.</param>
      <param name="method">The service method.</param>
      <param name="resource">The input resource for the service method.</param>
      <returns>A service method action.</returns>
    </member>
    <member name="M:RestFoundation.Runtime.ServiceBehaviorInvoker.InvokeOnExecutedBehaviors(System.Collections.Generic.IList{RestFoundation.Behaviors.IServiceBehavior},System.Object,System.Reflection.MethodInfo,System.Object)">
      <summary>
            Executes <see cref="T:RestFoundation.Behaviors.IServiceBehavior" /> behaviors after a service method has been called.
            </summary>
      <param name="behaviors">The list of behaviors.</param>
      <param name="service">The service instance.</param>
      <param name="method">The service method.</param>
      <param name="returnedObj">The service method returned object.</param>
    </member>
    <member name="T:RestFoundation.Runtime.ServiceCache">
      <summary>
            Represents the default cache implementation that uses ASP .NET cache.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.ServiceCache.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Runtime.ServiceCache" /> class.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.ServiceCache.Contains(System.String)">
      <summary>
            Returns a value indicating whether the provided key is found in the cache.
            </summary>
      <param name="key">The cache key.</param>
      <returns>true if the key was found; otherwise, false.</returns>
    </member>
    <member name="M:RestFoundation.Runtime.ServiceCache.Get(System.String)">
      <summary>
            Gets a cached value by its key.
            </summary>
      <param name="key">The cache key.</param>
      <returns>The corresponding value.</returns>
    </member>
    <member name="M:RestFoundation.Runtime.ServiceCache.Add(System.String,System.Object)">
      <summary>
            Adds a key/value pair to the cache with the normal cache item priority.
            </summary>
      <param name="key">The cache key.</param>
      <param name="value">The cached value.</param>
    </member>
    <member name="M:RestFoundation.Runtime.ServiceCache.Add(System.String,System.Object,RestFoundation.CachePriority)">
      <summary>
            Adds a key/value pair to the cache.
            </summary>
      <param name="key">The cache key.</param>
      <param name="value">The cached value.</param>
      <param name="priority">The cached item priority.</param>
    </member>
    <member name="M:RestFoundation.Runtime.ServiceCache.Add(System.String,System.Object,System.DateTime)">
      <summary>
            Adds a key/value pair to the cache with the normal cache item priority.
            </summary>
      <param name="key">The cache key.</param>
      <param name="value">The cached value.</param>
      <param name="absoluteExpiration">A <see cref="T:System.DateTime" /> representing an absolute expiration time.</param>
    </member>
    <member name="M:RestFoundation.Runtime.ServiceCache.Add(System.String,System.Object,System.TimeSpan)">
      <summary>
            Adds a key/value pair to the cache with the normal cache item priority.
            </summary>
      <param name="key">The cache key.</param>
      <param name="value">The cached value.</param>
      <param name="slidingExpiration">A <see cref="T:System.TimeSpan" /> representing a sliding expiration time.</param>
    </member>
    <member name="M:RestFoundation.Runtime.ServiceCache.Add(System.String,System.Object,System.DateTime,RestFoundation.CachePriority)">
      <summary>
            Adds a key/value pair to the cache.
            </summary>
      <param name="key">The cache key.</param>
      <param name="value">The cached value.</param>
      <param name="absoluteExpiration">A <see cref="T:System.DateTime" /> representing an absolute expiration time.</param>
      <param name="priority">The cached item priority.</param>
    </member>
    <member name="M:RestFoundation.Runtime.ServiceCache.Add(System.String,System.Object,System.TimeSpan,RestFoundation.CachePriority)">
      <summary>
            Adds a key/value pair to the cache.
            </summary>
      <param name="key">The cache key.</param>
      <param name="value">The cached value.</param>
      <param name="slidingExpiration">A <see cref="T:System.TimeSpan" /> representing a sliding expiration time.</param>
      <param name="priority">The cached item priority.</param>
    </member>
    <member name="M:RestFoundation.Runtime.ServiceCache.Update(System.String,System.Object)">
      <summary>
            Updated the cached value for the corresponding cache key.
            </summary>
      <param name="key">The cache key.</param>
      <param name="value">The cached value.</param>
    </member>
    <member name="M:RestFoundation.Runtime.ServiceCache.Remove(System.String)">
      <summary>
            Removes a cache entry by its key.
            </summary>
      <param name="key">The cache key.</param>
      <returns>If the cache key was found and the entry was removed.</returns>
    </member>
    <member name="M:RestFoundation.Runtime.ServiceCache.Clear">
      <summary>
            Clears all entries in the cache.
            </summary>
    </member>
    <member name="P:RestFoundation.Runtime.ServiceCache.Item(System.String)">
      <summary>
            Gets a cached value by its key.
            </summary>
      <param name="key">The cache key.</param>
      <returns>The corresponding value.</returns>
    </member>
    <member name="T:RestFoundation.Context.HttpResponseOutput">
      <summary>
            Represents the output of an HTTP response.
            </summary>
    </member>
    <member name="M:RestFoundation.Context.HttpResponseOutput.#ctor(RestFoundation.ILogWriter)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Context.HttpResponseOutput" /> class.
            </summary>
      <param name="logWriter">The log writer.</param>
    </member>
    <member name="M:RestFoundation.Context.HttpResponseOutput.Flush">
      <summary>
            Sends all the buffered output the the client.
            </summary>
    </member>
    <member name="M:RestFoundation.Context.HttpResponseOutput.FlushAsync">
      <summary>
            Sends all the buffered output the the client asynchronously.
            </summary>
      <returns>The task that flushes the context.</returns>
    </member>
    <member name="M:RestFoundation.Context.HttpResponseOutput.Clear">
      <summary>
            Clears all the output data in the response.
            </summary>
    </member>
    <member name="M:RestFoundation.Context.HttpResponseOutput.Write(System.String)">
      <summary>
            Writes a string into the output stream.
            </summary>
      <param name="value">A string value to write.</param>
      <returns>The response output object.</returns>
    </member>
    <member name="M:RestFoundation.Context.HttpResponseOutput.Write(System.Object)">
      <summary>
            Writes a value into the output stream.
            </summary>
      <param name="obj">A value to write.</param>
      <returns>The response output object.</returns>
    </member>
    <member name="M:RestFoundation.Context.HttpResponseOutput.WriteLine">
      <summary>
            Writes a new line into the output stream.
            </summary>
      <returns>The response output object.</returns>
    </member>
    <member name="M:RestFoundation.Context.HttpResponseOutput.WriteLine(System.String)">
      <summary>
            Writes a string followed by a line into the output stream.
            </summary>
      <param name="value">A string value to write.</param>
      <returns>The response output object.</returns>
    </member>
    <member name="M:RestFoundation.Context.HttpResponseOutput.WriteLine(System.Byte)">
      <summary>
            Writes the provided number of new lines into the output stream.
            </summary>
      <param name="times">The number of new lines to write.</param>
      <returns>The response output object.</returns>
    </member>
    <member name="M:RestFoundation.Context.HttpResponseOutput.WriteFormat(System.String,System.Object[])">
      <summary>
            Replaces the format item in a specified string with the string representation of a corresponding object in a specified array,
            then writes the formatted string into the output stream.
            </summary>
      <param name="format">The format string.</param>
      <param name="values">An object array that contains zero or more objects to format.</param>
      <returns>The response output object.</returns>
    </member>
    <member name="M:RestFoundation.Context.HttpResponseOutput.WriteAsync(System.String)">
      <summary>
            Writes a string to the output stream asynchronously.
            </summary>
      <param name="value">A string value to write.</param>
      <returns>The task that writes the value into the output stream.</returns>
    </member>
    <member name="M:RestFoundation.Context.HttpResponseOutput.WriteAsync(System.Char[],System.Int32,System.Int32)">
      <summary>
            Writes an array of characters to the output stream asynchronously.
            </summary>
      <param name="buffer">An array of characters.</param>
      <param name="index">A position in the array to start writing characters.</param>
      <param name="count">A number of characters to write.</param>
      <returns>The task that writes the value into the output stream.</returns>
    </member>
    <member name="P:RestFoundation.Context.HttpResponseOutput.Buffer">
      <summary>
            Gets or sets a value indicating whether the output should be buffered.
            </summary>
    </member>
    <member name="P:RestFoundation.Context.HttpResponseOutput.Stream">
      <summary>
            Gets the output stream.
            </summary>
    </member>
    <member name="P:RestFoundation.Context.HttpResponseOutput.Writer">
      <summary>
            Gets the output writer.
            </summary>
    </member>
    <member name="P:RestFoundation.Context.HttpResponseOutput.LogWriter">
      <summary>
            Gets the log writer.
            </summary>
    </member>
    <member name="P:RestFoundation.Context.HttpResponseOutput.Filter">
      <summary>
            Gets or sets a filter stream that modifies the output during the data transmission.
            </summary>
    </member>
    <member name="T:RestFoundation.Runtime.ParameterValueProvider">
      <summary>
            Represents the default parameter value provider that tries to bind a value
            using an associated type binder. If no binder is associated with the parameter
            type, a route value is used. If a parameter is named "resource" or is
            decorated with the <see cref="T:RestFoundation.ResourceAttribute" />, a content
            formatter is used to bind the data.
            </summary>
    </member>
    <member name="F:RestFoundation.Runtime.ParameterValueProvider.ResourceParameterName">
      <summary>
            Gets the resource parameter name.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.ParameterValueProvider.CreateValue(RestFoundation.Runtime.Handlers.IRestServiceHandler,System.Reflection.ParameterInfo,System.Boolean@)">
      <summary>
            Creates a parameter value based on the routing and HTTP data.
            </summary>
      <param name="handler">The REST handler associated with the HTTP request.</param>
      <param name="parameter">The service method parameters.</param>
      <param name="isResource">
            true if the parameter represents a REST resource; otherwise, false. Only 1 resource per
            service method is allowed.
            </param>
      <returns>The created parameter value.</returns>
    </member>
    <member name="M:RestFoundation.Runtime.ParameterValueProvider.GetTypeBindedValue(RestFoundation.IServiceContext,System.Reflection.ParameterInfo,RestFoundation.TypeBinders.ITypeBinder)">
      <summary>
            Gets a value from the associated <see cref="T:RestFoundation.TypeBinders.ITypeBinder" /> object.
            </summary>
      <param name="context">The service context.</param>
      <param name="parameter">The service method parameter.</param>
      <param name="typeBinder">The associated type binder.</param>
      <returns>The parameter value.</returns>
    </member>
    <member name="M:RestFoundation.Runtime.ParameterValueProvider.TryGetRouteValue(System.Reflection.ParameterInfo,RestFoundation.Collections.IRouteValueCollection)">
      <summary>
            Returns a route value for the service method parameter or null.
            </summary>
      <param name="parameter">The service method parameter.</param>
      <param name="routeValues">The collection of route values.</param>
      <returns>The route value or null.</returns>
    </member>
    <member name="M:RestFoundation.Runtime.ParameterValueProvider.GetResourceValue(RestFoundation.Runtime.Handlers.IRestServiceHandler,System.Reflection.ParameterInfo)">
      <summary>
            Gets the resource value for the service method parameter.
            </summary>
      <param name="handler">The REST handler.</param>
      <param name="parameter">The service method parameter.</param>
      <returns>The resource value.</returns>
    </member>
    <member name="T:RestFoundation.Validation.ResourceValidator">
      <summary>
            Represents a default resource validator that is based on the <see cref="N:System.ComponentModel.DataAnnotations" />
            namespace attributes.
            </summary>
    </member>
    <member name="M:RestFoundation.Validation.ResourceValidator.IsValid(System.Object,System.Collections.Generic.IReadOnlyCollection{RestFoundation.Validation.ValidationError}@)">
      <summary>
            Returns a <see cref="T:System.Boolean" /> value indicating whether the resource is valid along with the associated
            collection of errors.
            </summary>
      <param name="resource">The resource.</param>
      <param name="errors">A read-only collection of the validation errors.</param>
      <returns>true if the resource is valid; otherwise, false.</returns>
    </member>
    <member name="T:RestFoundation.Configuration.UrlBuilder">
      <summary>
            Represents a service URL builder.
            </summary>
    </member>
    <member name="M:RestFoundation.Configuration.UrlBuilder.MapUrl(System.String)">
      <summary>
            Maps the provided relative URL to a service or a web forms page.
            </summary>
      <param name="serviceUrl">The service URL.</param>
      <returns>The URL builder.</returns>
    </member>
    <member name="T:RestFoundation.Runtime.StreamCompressor">
      <summary>
            Represents the default stream compressor that supports GZip and Deflate.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.StreamCompressor.Compress(System.IO.Stream,System.Collections.Generic.IEnumerable{System.String},System.String@)">
      <summary>
            Returns a stream instance that compresses the data of the original output stream along
            with the chosen output encoding.
            </summary>
      <param name="output">The output stream to compress.</param>
      <param name="acceptedEncodings">A sequence of accepted encodings.</param>
      <param name="outputEncoding">The chosen output encoding.</param>
      <returns>The compressed stream.</returns>
    </member>
    <member name="T:RestFoundation.Context.ServiceContext">
      <summary>
            Represents a service context.
            </summary>
    </member>
    <member name="M:RestFoundation.Context.ServiceContext.#ctor(RestFoundation.IHttpRequest,RestFoundation.IHttpResponse,RestFoundation.IServiceCache)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Context.ServiceContext" /> class.
            </summary>
      <param name="request">The current HTTP request.</param>
      <param name="response">The current HTTP response.</param>
      <param name="cache">The service cache.</param>
    </member>
    <member name="M:RestFoundation.Context.ServiceContext.GetPath``1(System.Linq.Expressions.Expression{System.Action{``0}})">
      <summary>
            Gets the application relative URL for a service contract method.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <param name="serviceMethod">The service contract method.</param>
      <returns>The application relative URL for the service method.</returns>
      <exception cref="T:System.InvalidOperationException">
            If an invalid service URL or a service method provided.
            </exception>
    </member>
    <member name="M:RestFoundation.Context.ServiceContext.GetPath``1(System.Linq.Expressions.Expression{System.Action{``0}},RestFoundation.RouteHash)">
      <summary>
            Gets the application relative URL for a service contract method.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <param name="serviceMethod">The service contract method.</param>
      <param name="routeValues">Additional route values.</param>
      <returns>The application relative URL for the service method.</returns>
      <exception cref="T:System.InvalidOperationException">
            If an invalid service URL or a service method provided.
            </exception>
    </member>
    <member name="M:RestFoundation.Context.ServiceContext.GetPath``1(System.String,System.Linq.Expressions.Expression{System.Action{``0}})">
      <summary>
            Gets the application relative URL for a service contract method.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <param name="serviceUrl">
            The service URL defined by the MapUrl(serviceUrl) function by the <see cref="T:RestFoundation.Configuration.UrlBuilder" />
            configuration object.
            </param>
      <param name="serviceMethod">The service contract method.</param>
      <returns>The application relative URL for the service method.</returns>
      <exception cref="T:System.InvalidOperationException">
            If an invalid service URL or a service method provided.
            </exception>
    </member>
    <member name="M:RestFoundation.Context.ServiceContext.GetPath``1(System.String,System.Linq.Expressions.Expression{System.Action{``0}},RestFoundation.RouteHash)">
      <summary>
            Gets the application relative URL for a service contract method.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <param name="serviceUrl">
            The service URL defined by the MapUrl(serviceUrl) function by the <see cref="T:RestFoundation.Configuration.UrlBuilder" />
            configuration object.
            </param>
      <param name="serviceMethod">The service contract method.</param>
      <param name="routeValues">Additional route values.</param>
      <returns>The application relative URL for the service method.</returns>
      <exception cref="T:System.InvalidOperationException">
            If an invalid service URL or a service method provided.
            </exception>
    </member>
    <member name="M:RestFoundation.Context.ServiceContext.GetPath``1(System.String,System.Linq.Expressions.Expression{System.Action{``0}},RestFoundation.RouteHash,RestFoundation.UriSegments)">
      <summary>
            Gets the application absolute URL for a service contract method.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <param name="serviceUrl">
            The service URL defined by the MapUrl(serviceUrl) function by the <see cref="T:RestFoundation.Configuration.UrlBuilder" />
            configuration object.
            </param>
      <param name="serviceMethod">The service contract method.</param>
      <param name="routeValues">Additional route values.</param>
      <param name="segments">URI segments necessary to generate an absolute URL. Set it to null to generate a relative URL.</param>
      <returns>The application absolute URL for the service method.</returns>
      <exception cref="T:System.InvalidOperationException">
            If an invalid service URL or a service method provided.
            </exception>
    </member>
    <member name="M:RestFoundation.Context.ServiceContext.GetPath``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
            Gets the application relative URL for a service contract method.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <param name="serviceMethod">The service contract method.</param>
      <returns>The application relative URL for the service method.</returns>
      <exception cref="T:System.InvalidOperationException">
            If an invalid service URL or a service method provided.
            </exception>
    </member>
    <member name="M:RestFoundation.Context.ServiceContext.GetPath``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RestFoundation.RouteHash)">
      <summary>
            Gets the application relative URL for a service contract method.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <param name="serviceMethod">The service contract method.</param>
      <param name="routeValues">Additional route values.</param>
      <returns>The application relative URL for the service method.</returns>
      <exception cref="T:System.InvalidOperationException">
            If an invalid service URL or a service method provided.
            </exception>
    </member>
    <member name="M:RestFoundation.Context.ServiceContext.GetPath``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
            Gets the application relative URL for a service contract method.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <param name="serviceUrl">
            The service URL defined by the MapUrl(serviceUrl) function by the <see cref="T:RestFoundation.Configuration.UrlBuilder" />
            configuration object.
            </param>
      <param name="serviceMethod">The service contract method.</param>
      <returns>The application relative URL for the service method.</returns>
      <exception cref="T:System.InvalidOperationException">
            If an invalid service URL or a service method provided.
            </exception>
    </member>
    <member name="M:RestFoundation.Context.ServiceContext.GetPath``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RestFoundation.RouteHash)">
      <summary>
            Gets the application relative URL for a service contract method.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <param name="serviceUrl">
            The service URL defined by the MapUrl(serviceUrl) function by the <see cref="T:RestFoundation.Configuration.UrlBuilder" />
            configuration object.
            </param>
      <param name="serviceMethod">The service contract method.</param>
      <param name="routeValues">Additional route values.</param>
      <returns>The application relative URL for the service method.</returns>
      <exception cref="T:System.InvalidOperationException">
            If an invalid service URL or a service method provided.
            </exception>
    </member>
    <member name="M:RestFoundation.Context.ServiceContext.GetPath``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RestFoundation.RouteHash,RestFoundation.UriSegments)">
      <summary>
            Gets the application absolute URL for a service contract method.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <param name="serviceUrl">
            The service URL defined by the MapUrl(serviceUrl) function by the <see cref="T:RestFoundation.Configuration.UrlBuilder" />
            configuration object.
            </param>
      <param name="serviceMethod">The service contract method.</param>
      <param name="routeValues">Additional route values.</param>
      <param name="segments">URI segments necessary to generate an absolute URL. Set it to null to generate a relative URL.</param>
      <returns>The application absolute URL for the service method.</returns>
      <exception cref="T:System.InvalidOperationException">
            If an invalid service URL or a service method provided.
            </exception>
    </member>
    <member name="M:RestFoundation.Context.ServiceContext.MapPath(System.String)">
      <summary>
            Returns the physical path associated to the virtual path of the file.
            </summary>
      <param name="relativePath">The relative virtual path to the file.</param>
      <returns>The physical file path.</returns>
    </member>
    <member name="M:RestFoundation.Context.ServiceContext.GetHttpContext">
      <summary>
            Gets the underlying <see cref="T:System.Web.HttpContextBase" /> instance that may provide additional functionality.
            </summary>
      <returns>The underlying HTTP context instance.</returns>
    </member>
    <member name="P:RestFoundation.Context.ServiceContext.Request">
      <summary>
            Gets the current HTTP request.
            </summary>
    </member>
    <member name="P:RestFoundation.Context.ServiceContext.Response">
      <summary>
            Gets the current HTTP response.
            </summary>
    </member>
    <member name="P:RestFoundation.Context.ServiceContext.Cache">
      <summary>
            Gets the service cache.
            </summary>
    </member>
    <member name="P:RestFoundation.Context.ServiceContext.User">
      <summary>
            Gets or sets security information for the current HTTP request.
            </summary>
    </member>
    <member name="P:RestFoundation.Context.ServiceContext.IsAuthenticated">
      <summary>
            Gets a value indicating whether there is an authenticated user associated with the HTTP request.
            </summary>
    </member>
    <member name="P:RestFoundation.Context.ServiceContext.IsDebug">
      <summary>
            Gets a value indicating whether the service is running in debug mode.
            </summary>
    </member>
    <member name="T:RestFoundation.Runtime.ServiceRequestValidator">
      <summary>
            Represents an HTTP request validator for the REST Foundation services and web pages.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.ServiceRequestValidator.IsValidRequestString(System.Web.HttpContext,System.String,System.Web.Util.RequestValidationSource,System.String,System.Int32@)">
      <summary>
            Validates a string that contains HTTP request data.
            </summary>
      <returns>
            true if the string to be validated is valid; otherwise, false.
            </returns>
      <param name="context">The context of the current request.</param>
      <param name="value">The HTTP request data to validate.</param>
      <param name="requestValidationSource">
            An enumeration that represents the source of request data that is being validated. The following are possible values
            for the enumeration:QueryStringForm CookiesFilesRawUrlPathPathInfoHeaders
            </param>
      <param name="collectionKey">
            The key in the request collection of the item to validate. This parameter is optional. This parameter is used if the
            data to validate is obtained from a collection. If the data to validate is not from a collection,
            <paramref name="collectionKey" /> can be null.
            </param>
      <param name="validationFailureIndex">
            When this method returns, indicates the zero-based starting point of the problematic or invalid text in the request
            collection. This parameter is passed uninitialized.
            </param>
    </member>
    <member name="T:RestFoundation.IResultWrapper">
      <summary>
            Defines a result wrapper.
            </summary>
    </member>
    <member name="M:RestFoundation.IResultWrapper.Wrap(RestFoundation.Runtime.Handlers.IServiceContextHandler,System.Object,System.Type)">
      <summary>
            Wraps a POCO object returned by the service method with an <see cref="T:RestFoundation.Results.IResult" />.
            </summary>
      <param name="handler">The service context handler.</param>
      <param name="returnedObj">The returned object.</param>
      <param name="methodReturnType">The method return type.</param>
      <returns>The wrapper result.</returns>
    </member>
    <member name="T:RestFoundation.Runtime.ResultWrapper">
      <summary>
            Represents the default result wrapper that converts POCO objects into
            results using the registered media type formatters.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.ResultWrapper.#ctor(RestFoundation.IContentNegotiator)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Runtime.ResultWrapper" /> class with the provided content negotiator.
            </summary>
      <param name="contentNegotiator">The content negotiator.</param>
    </member>
    <member name="M:RestFoundation.Runtime.ResultWrapper.Wrap(RestFoundation.Runtime.Handlers.IServiceContextHandler,System.Object,System.Type)">
      <summary>
            Wraps a POCO object returned by the service method with an <see cref="T:RestFoundation.Results.IResult" />.
            </summary>
      <param name="handler">The service context handler.</param>
      <param name="returnedObj">The returned object.</param>
      <param name="methodReturnType">The method return type.</param>
      <returns>The wrapper result.</returns>
    </member>
    <member name="T:RestFoundation.Results.DynamicResult">
      <summary>
            Represents a dynamic dictionary result.
            </summary>
    </member>
    <member name="M:RestFoundation.Results.DynamicResult.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Results.DynamicResult" /> class.
            </summary>
    </member>
    <member name="M:RestFoundation.Results.DynamicResult.Contains(System.String)">
      <summary>
            Returns a <see cref="T:System.Boolean" /> indicating whether the object contains a property with the provided name.
            </summary>
      <param name="propertyName">A property name.</param>
      <returns>
        <see langword="true" /> if the object contains the property; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:RestFoundation.Results.DynamicResult.Add(System.String,System.Object)">
      <summary>
            Adds a property with the provided name and value.
            </summary>
      <param name="propertyName">A property name.</param>
      <param name="value">A property value.</param>
      <returns>
        <see langword="true" /> if the property did not exist and was added; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:RestFoundation.Results.DynamicResult.Remove(System.String)">
      <summary>
            Removes a property with the provided name.
            </summary>
      <param name="propertyName">A property name.</param>
      <returns>
        <see langword="true" /> if the property was removed; <see langword="false" /> otherwise.</returns>
    </member>
    <member name="M:RestFoundation.Results.DynamicResult.ToDictionary">
      <summary>
            Returns a dictionary of property names and values.
            </summary>
      <returns>A dictionary of property names and values.</returns>
    </member>
    <member name="M:RestFoundation.Results.DynamicResult.Clear">
      <summary>
            Clears all the object properties.
            </summary>
    </member>
    <member name="M:RestFoundation.Results.DynamicResult.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>
            Provides the implementation for operations that get member values. Classes derived from the
            <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic
            behavior for operations such as getting a value for a property.
            </summary>
      <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time
            binder of the language determines the behavior. (In most cases, a run-time exception is thrown.)
            </returns>
      <param name="binder">
            Provides information about the object that called the dynamic operation. The binder.Name property
            provides the name of the member on which the dynamic operation is performed. For example, for the
            Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance of the
            class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder. Name returns
            "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.
            </param>
      <param name="result">
            The result of the get operation. For example, if the method is called for a property, you can assign the property value
            to <paramref name="result" />.
            </param>
    </member>
    <member name="M:RestFoundation.Results.DynamicResult.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
      <summary>
            Provides the implementation for operations that set member values. Classes derived from the
            <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations
            such as setting a value for a property.
            </summary>
      <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language
            determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
      <param name="binder">
            Provides information about the object that called the dynamic operation. The binder.Name property provides the name of
            the member to which the value is being assigned. For example, for the statement sampleObject.SampleProperty = "Test",
            where sampleObject is an instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class,
            binder.Name returns "SampleProperty". The binder.IgnoreCase property specifies whether the member name is case-sensitive.
            </param>
      <param name="value">
            The value to set to the member. For example, for sampleObject.SampleProperty = "Test", where sampleObject is an instance
            of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, the <paramref name="value" /> is "Test".
            </param>
    </member>
    <member name="M:RestFoundation.Results.DynamicResult.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
      <summary>
            Provides the implementation for operations that invoke a member. Classes derived from the
            <see cref="T:System.Dynamic.DynamicObject" /> class can override this method to specify dynamic behavior for operations
            such as calling a method.
            </summary>
      <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language
            determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
      <param name="binder">
            Provides information about the dynamic operation. The binder.Name property provides the name of the member on which the
            dynamic operation is performed. For example, for the statement sampleObject.SampleMethod(100), where sampleObject is an
            instance of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns
            "SampleMethod". The binder.IgnoreCase property specifies whether the member name is case-sensitive.
            </param>
      <param name="args">
            The arguments that are passed to the object member during the invoke operation. For example, for the statement
            sampleObject.SampleMethod(100), where sampleObject is derived from the <see cref="T:System.Dynamic.DynamicObject" /> class,
            <paramref name="args" />[0] is equal to 100.</param>
      <param name="result">The result of the member invocation.</param>
    </member>
    <member name="M:RestFoundation.Results.DynamicResult.TryDeleteMember(System.Dynamic.DeleteMemberBinder)">
      <summary>
            Provides the implementation for operations that delete an object member. This method is not intended for use in C# or
            Visual Basic.
            </summary>
      <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language
            determines the behavior. (In most cases, a language-specific run-time exception is thrown.)
            </returns>
      <param name="binder">Provides information about the deletion.</param>
    </member>
    <member name="M:RestFoundation.Results.DynamicResult.GetDynamicMemberNames">
      <summary>
            Returns the enumeration of all dynamic member names. 
            </summary>
      <returns>
            A sequence that contains dynamic member names.
            </returns>
    </member>
    <member name="M:RestFoundation.Results.DynamicResult.GetSchema">
      <summary>
            This method is reserved and should not be used. When implementing the IXmlSerializable interface,
            you should return null (Nothing in Visual Basic) from this method, and instead, if specifying
            a custom schema is required, apply the <see cref="T:System.Xml.Serialization.XmlSchemaProviderAttribute" />
            to the class.
            </summary>
      <returns>
            An <see cref="T:System.Xml.Schema.XmlSchema" /> that describes the XML representation of the object
            that is produced by the <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />
            method and consumed by the <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />
            method.
            </returns>
    </member>
    <member name="M:RestFoundation.Results.DynamicResult.ReadXml(System.Xml.XmlReader)">
      <summary>
            Generates an object from its XML representation.
            </summary>
      <param name="reader">The <see cref="T:System.Xml.XmlReader" /> stream from which the object is deserialized.</param>
    </member>
    <member name="M:RestFoundation.Results.DynamicResult.WriteXml(System.Xml.XmlWriter)">
      <summary>
            Converts an object into its XML representation.
            </summary>
      <param name="writer">The <see cref="T:System.Xml.XmlWriter" /> stream to which the object is serialized.</param>
    </member>
    <member name="P:RestFoundation.Results.DynamicResult.Count">
      <summary>
            Gets a count of properties.
            </summary>
    </member>
    <member name="T:RestFoundation.Formatters.FormsFormatter">
      <summary>
            Represents an HTTP form data formatter.
            </summary>
    </member>
    <member name="M:RestFoundation.Formatters.FormsFormatter.FormatRequest(RestFoundation.IServiceContext,System.Type)">
      <summary>
            Deserializes HTTP message body data into an object instance of the provided type.
            </summary>
      <param name="context">The service context.</param>
      <param name="objectType">The object type.</param>
      <returns>The deserialized object.</returns>
      <exception cref="T:RestFoundation.Runtime.HttpResponseException">If the object cannot be deserialized.</exception>
    </member>
    <member name="M:RestFoundation.Formatters.FormsFormatter.FormatResponse(RestFoundation.IServiceContext,System.Type,System.Object,System.String)">
      <summary>
            Serializes the object instance into the HTTP response stream using the accepted media type.
            </summary>
      <param name="context">The service context.</param>
      <param name="methodReturnType">The method return type.</param>
      <param name="obj">The object to serialize.</param>
      <param name="preferredMediaType">The preferred media type.</param>
      <returns>A service method result containing the serialized object representation.</returns>
      <exception cref="T:RestFoundation.Runtime.HttpResponseException">If the object could not be serialized.</exception>
    </member>
    <member name="T:RestFoundation.Result">
      <summary>
            Represents results to return from service methods.
            </summary>
    </member>
    <member name="F:RestFoundation.Result.JsonFormat">
      <summary>
            Gets a JSON format value.
            </summary>
    </member>
    <member name="F:RestFoundation.Result.XmlFormat">
      <summary>
            Gets an XML format value.
            </summary>
    </member>
    <member name="M:RestFoundation.Result.Content(System.String)">
      <summary>
            Returns a content result.
            </summary>
      <param name="content">The content string.</param>
      <returns>The content result.</returns>
    </member>
    <member name="M:RestFoundation.Result.Content(System.String,System.Boolean)">
      <summary>
            Returns a content result.
            </summary>
      <param name="content">The content string.</param>
      <param name="clearOutput">A value indicating whether to clear output before sending the content.</param>
      <returns>The content result.</returns>
    </member>
    <member name="M:RestFoundation.Result.Content(System.String,System.Boolean,System.String)">
      <summary>
            Returns a content result.
            </summary>
      <param name="content">The content string.</param>
      <param name="clearOutput">A value indicating whether to clear output before sending the content (true by default).</param>
      <param name="contentType">The content type.</param>
      <returns>The content result.</returns>
    </member>
    <member name="M:RestFoundation.Result.LocalFile(System.String)">
      <summary>
            Returns a local file result.
            </summary>
      <param name="filePath">The local file path.</param>
      <returns>The file path result.</returns>
    </member>
    <member name="M:RestFoundation.Result.LocalFile(System.String,System.String)">
      <summary>
            Returns a local file result.
            </summary>
      <param name="filePath">The local file path.</param>
      <param name="contentType">The content type.</param>
      <returns>The file path result.</returns>
    </member>
    <member name="M:RestFoundation.Result.LocalFile(System.String,System.String,System.String)">
      <summary>
            Returns a local file result.
            </summary>
      <param name="filePath">The local file path.</param>
      <param name="contentType">The content type.</param>
      <param name="contentDisposition">The content disposition data.</param>
      <returns>The file path result.</returns>
    </member>
    <member name="M:RestFoundation.Result.RedirectToUrl(System.String)">
      <summary>
            Returns a redirect result for the provided URL with the redirect type <see cref="F:RestFoundation.Results.RedirectType.Found" />.
            </summary>
      <param name="url">The URL to redirect to.</param>
      <returns>The redirect result.</returns>
    </member>
    <member name="M:RestFoundation.Result.RedirectToUrl(System.String,RestFoundation.Results.RedirectType)">
      <summary>
            Returns a redirect result for the provided URL with the provided redirect type.
            </summary>
      <param name="url">The URL to redirect to.</param>
      <param name="redirectType">The redirect type.</param>
      <returns>The redirect result.</returns>
    </member>
    <member name="M:RestFoundation.Result.RedirectToAction``1(System.Linq.Expressions.Expression{System.Action{``0}})">
      <summary>
            Returns a redirect result for the service method with the redirect type <see cref="F:RestFoundation.Results.RedirectType.Found" />.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <param name="serviceMethod">The service method.</param>
      <returns>The redirect result.</returns>
      <exception cref="T:System.InvalidOperationException">
            If the HTTP context cannot be found; an invalid service URL or a service method provided.
            </exception>
    </member>
    <member name="M:RestFoundation.Result.RedirectToAction``1(System.Linq.Expressions.Expression{System.Action{``0}},RestFoundation.RouteHash)">
      <summary>
            Returns a redirect result for the service method with the provided redirect type.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <param name="serviceMethod">The service method.</param>
      <param name="routeValues">Additional route values.</param>
      <returns>The redirect result.</returns>
      <exception cref="T:System.InvalidOperationException">
            If the HTTP context cannot be found; an invalid service URL or a service method provided.
            </exception>
    </member>
    <member name="M:RestFoundation.Result.RedirectToAction``1(System.Linq.Expressions.Expression{System.Action{``0}},RestFoundation.RouteHash,RestFoundation.Results.RedirectType)">
      <summary>
            Returns a redirect result for the service method with the provided redirect type.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <param name="serviceMethod">The service method.</param>
      <param name="routeValues">Additional route values.</param>
      <param name="redirectType">The redirect type.</param>
      <returns>The redirect result.</returns>
      <exception cref="T:System.InvalidOperationException">
            If the HTTP context cannot be found; an invalid service URL or a service method provided.
            </exception>
    </member>
    <member name="M:RestFoundation.Result.RedirectToAction``1(System.String,System.Linq.Expressions.Expression{System.Action{``0}})">
      <summary>
            Returns a redirect result for the service method with the redirect type <see cref="F:RestFoundation.Results.RedirectType.Found" />.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <param name="serviceUrl">The service URL.</param>
      <param name="serviceMethod">The service method.</param>
      <returns>The redirect result.</returns>
      <exception cref="T:System.InvalidOperationException">
            If the HTTP context cannot be found; an invalid service URL or a service method provided.
            </exception>
    </member>
    <member name="M:RestFoundation.Result.RedirectToAction``1(System.String,System.Linq.Expressions.Expression{System.Action{``0}},RestFoundation.RouteHash)">
      <summary>
            Returns a redirect result for the service method with the redirect type <see cref="F:RestFoundation.Results.RedirectType.Found" />.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <param name="serviceUrl">The service URL.</param>
      <param name="serviceMethod">The service method.</param>
      <param name="routeValues">Additional route values.</param>
      <returns>The redirect result.</returns>
      <exception cref="T:System.InvalidOperationException">
            If the HTTP context cannot be found; an invalid service URL or a service method provided.
            </exception>
    </member>
    <member name="M:RestFoundation.Result.RedirectToAction``1(System.String,System.Linq.Expressions.Expression{System.Action{``0}},RestFoundation.RouteHash,RestFoundation.Results.RedirectType)">
      <summary>
            Returns a redirect result for the service method with the provided redirect type.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <param name="serviceUrl">The service URL.</param>
      <param name="serviceMethod">The service method.</param>
      <param name="routeValues">Additional route values.</param>
      <param name="redirectType">The redirect type.</param>
      <returns>The redirect result.</returns>
      <exception cref="T:System.InvalidOperationException">
            If the HTTP context cannot be found; an invalid service URL or a service method provided.
            </exception>
    </member>
    <member name="M:RestFoundation.Result.RedirectToAction``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
            Returns a redirect result for the service method with the redirect type <see cref="F:RestFoundation.Results.RedirectType.Found" />.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <param name="serviceMethod">The service method.</param>
      <returns>The redirect result.</returns>
      <exception cref="T:System.InvalidOperationException">
            If the HTTP context cannot be found; an invalid service URL or a service method provided.
            </exception>
    </member>
    <member name="M:RestFoundation.Result.RedirectToAction``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RestFoundation.RouteHash)">
      <summary>
            Returns a redirect result for the service method with the redirect type <see cref="F:RestFoundation.Results.RedirectType.Found" />.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <param name="serviceMethod">The service method.</param>
      <param name="routeValues">Additional route values.</param>
      <returns>The redirect result.</returns>
      <exception cref="T:System.InvalidOperationException">
            If the HTTP context cannot be found; an invalid service URL or a service method provided.
            </exception>
    </member>
    <member name="M:RestFoundation.Result.RedirectToAction``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RestFoundation.RouteHash,RestFoundation.Results.RedirectType)">
      <summary>
            Returns a redirect result for the service method with the redirect type <see cref="F:RestFoundation.Results.RedirectType.Found" />.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <param name="serviceMethod">The service method.</param>
      <param name="routeValues">Additional route values.</param>
      <param name="redirectType">The redirect type.</param>
      <returns>The redirect result.</returns>
      <exception cref="T:System.InvalidOperationException">
            If the HTTP context cannot be found; an invalid service URL or a service method provided.
            </exception>
    </member>
    <member name="M:RestFoundation.Result.RedirectToAction``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>
            Returns a redirect result for the service method with the redirect type <see cref="F:RestFoundation.Results.RedirectType.Found" />.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <param name="serviceUrl">The service URL.</param>
      <param name="serviceMethod">The service method.</param>
      <returns>The redirect result.</returns>
      <exception cref="T:System.InvalidOperationException">
            If the HTTP context cannot be found; an invalid service URL or a service method provided.
            </exception>
    </member>
    <member name="M:RestFoundation.Result.RedirectToAction``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RestFoundation.RouteHash)">
      <summary>
            Returns a redirect result for the service method with the redirect type <see cref="F:RestFoundation.Results.RedirectType.Found" />.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <param name="serviceUrl">The service URL.</param>
      <param name="serviceMethod">The service method.</param>
      <param name="routeValues">Additional route values.</param>
      <returns>The redirect result.</returns>
      <exception cref="T:System.InvalidOperationException">
            If the HTTP context cannot be found; an invalid service URL or a service method provided.
            </exception>
    </member>
    <member name="M:RestFoundation.Result.RedirectToAction``1(System.String,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},RestFoundation.RouteHash,RestFoundation.Results.RedirectType)">
      <summary>
            Returns a redirect result for the service method with the provided redirect type.
            </summary>
      <typeparam name="TContract">The service contract type.</typeparam>
      <param name="serviceUrl">The service URL.</param>
      <param name="serviceMethod">The service method.</param>
      <param name="routeValues">Additional route values.</param>
      <param name="redirectType">The redirect type.</param>
      <returns>The redirect result.</returns>
      <exception cref="T:System.InvalidOperationException">
            If the HTTP context cannot be found; an invalid service URL or a service method provided.
            </exception>
    </member>
    <member name="M:RestFoundation.Result.RemoteFile(System.String)">
      <summary>
            Returns a remote file result.
            </summary>
      <param name="fileUrl">The remote file URL.</param>
      <returns>The file URL result.</returns>
    </member>
    <member name="M:RestFoundation.Result.RemoteFile(System.String,System.String)">
      <summary>
            Returns a remote file result.
            </summary>
      <param name="fileUrl">The remote file URL.</param>
      <param name="contentType">The content type.</param>
      <returns>The file URL result.</returns>
    </member>
    <member name="M:RestFoundation.Result.RemoteFile(System.String,System.String,System.String)">
      <summary>
            Returns a remote file result.
            </summary>
      <param name="fileUrl">The remote file URL.</param>
      <param name="contentType">The content type.</param>
      <param name="contentDisposition">The content disposition data.</param>
      <returns>The file URL result.</returns>
    </member>
    <member name="M:RestFoundation.Result.ResponseStatus(System.Net.HttpStatusCode)">
      <summary>
            Returns the response status result.
            </summary>
      <param name="code">The HTTP status code.</param>
      <returns>The response status result</returns>
    </member>
    <member name="M:RestFoundation.Result.ResponseStatus(System.Net.HttpStatusCode,System.String)">
      <summary>
            Returns the response status result.
            </summary>
      <param name="code">The HTTP status code.</param>
      <param name="description">The HTTP status description.</param>
      <returns>The response status result.</returns>
    </member>
    <member name="M:RestFoundation.Result.ResponseStatus(System.Net.HttpStatusCode,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>
            Returns the response status result.
            </summary>
      <param name="code">The HTTP status code.</param>
      <param name="description">The HTTP status description.</param>
      <param name="responseHeaders">A dictionary of response headers.</param>
      <returns>The response status result.</returns>
    </member>
    <member name="M:RestFoundation.Result.ObjectWithResponseStatus``1(``0,System.Net.HttpStatusCode)">
      <summary>
            Returns the provided object and sets the provided response status code.
            </summary>
      <typeparam name="T">The object type.</typeparam>
      <param name="obj">The object to return.</param>
      <param name="code">The HTTP status code.</param>
      <returns>The object.</returns>
    </member>
    <member name="M:RestFoundation.Result.ObjectWithResponseStatus``1(``0,System.Net.HttpStatusCode,System.String)">
      <summary>
            Returns the provided object and sets the provided response status code and description.
            </summary>
      <typeparam name="T">The object type.</typeparam>
      <param name="obj">The object to return.</param>
      <param name="code">The HTTP status code.</param>
      <param name="description">The HTTP status description.</param>
      <returns>The object.</returns>
    </member>
    <member name="M:RestFoundation.Result.ObjectWithResponseStatus``1(``0,System.Net.HttpStatusCode,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary>
            Returns the provided object and sets the provided response status code and description.
            </summary>
      <typeparam name="T">The object type.</typeparam>
      <param name="obj">The object to return.</param>
      <param name="code">The HTTP status code.</param>
      <param name="description">The HTTP status description.</param>
      <param name="responseHeaders">A dictionary of response headers.</param>
      <returns>The object.</returns>
    </member>
    <member name="M:RestFoundation.Result.Feed(System.ServiceModel.Syndication.SyndicationFeed,RestFoundation.Results.FeedResult.SyndicationFormat)">
      <summary>
            Returns an ATOM or RSS feed result.
            </summary>
      <param name="feed">The feed.</param>
      <param name="format">The feed format.</param>
      <returns>The feed result.</returns>
    </member>
    <member name="M:RestFoundation.Result.Json(System.Object)">
      <summary>
            Returns a JSON result.
            </summary>
      <param name="obj">The object to serialize to JSON.</param>
      <returns>The JSON result.</returns>
    </member>
    <member name="M:RestFoundation.Result.JsonP(System.Object)">
      <summary>
            Returns a JSONP result inside a callback function with the "jsonpCallback" name.
            </summary>
      <param name="obj">The object to serialize to JSONP.</param>
      <returns>The JSONP result.</returns>
    </member>
    <member name="M:RestFoundation.Result.JsonP(System.Object,System.String)">
      <summary>
            Returns a JSONP result inside a callback function with the provided name.
            </summary>
      <param name="obj">The object to serialize to JSONP.</param>
      <param name="callback">The callback function name.</param>
      <returns>The JSONP result.</returns>
    </member>
    <member name="M:RestFoundation.Result.Xml(System.Object)">
      <summary>
            Returns a XML result.
            </summary>
      <param name="obj">The object to serialize to XML.</param>
      <returns>The XML result.</returns>
    </member>
    <member name="M:RestFoundation.Result.JsonOrXml(System.Object,System.String)">
      <summary>
            Returns a JSON or an XML result based on the <paramref name="format" /> value.
            Format value must be equal to <see cref="F:RestFoundation.Result.JsonFormat" /> or <see cref="F:RestFoundation.Result.XmlFormat" />.
            </summary>
      <param name="obj">The object to serialize to JSON or XML.</param>
      <param name="format">The result content format.</param>
      <returns>The JSON or XML result.</returns>
    </member>
    <member name="M:RestFoundation.Result.Response(System.Action{RestFoundation.IServiceContext})">
      <summary>
            Returns a result with a custom response.
            </summary>
      <param name="action">The response action.</param>
      <returns>The response result.</returns>
    </member>
    <member name="P:RestFoundation.Result.Accepted">
      <summary>
            Gets a result with the status code set to Accepted (202).
            </summary>
    </member>
    <member name="P:RestFoundation.Result.BadRequest">
      <summary>
            Gets a result with the status code set to Bad Request (400).
            </summary>
    </member>
    <member name="P:RestFoundation.Result.Conflict">
      <summary>
            Gets a result with the status code set to Conflict (409).
            </summary>
    </member>
    <member name="P:RestFoundation.Result.Forbidden">
      <summary>
            Gets a result with the status code set to Forbidden (403).
            </summary>
    </member>
    <member name="P:RestFoundation.Result.NoContent">
      <summary>
            Gets a result with the status code set to No Content (204).
            </summary>
    </member>
    <member name="P:RestFoundation.Result.NotFound">
      <summary>
            Gets a result with the status code set to Not Found (404).
            </summary>
    </member>
    <member name="P:RestFoundation.Result.NotImplemented">
      <summary>
            Gets a result with the status code set to Not Implemented (501).
            </summary>
    </member>
    <member name="P:RestFoundation.Result.Ok">
      <summary>
            Gets a result with the status code set to OK (200).
            </summary>
    </member>
    <member name="P:RestFoundation.Result.ServiceUnavailable">
      <summary>
            Gets a result with the status code set to Service Unavailable (503).
            </summary>
    </member>
    <member name="T:RestFoundation.Results.RedirectResult">
      <summary>
            Represents a redirect result. This result is not recommended to use for methods that return JSON or XML.
            Set the "Location" HTTP response header instead.
            </summary>
    </member>
    <member name="M:RestFoundation.Results.RedirectResult.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Results.RedirectResult" /> class.
            </summary>
    </member>
    <member name="M:RestFoundation.Results.RedirectResult.Execute(RestFoundation.IServiceContext)">
      <summary>
            Executes the result against the provided service context.
            </summary>
      <param name="context">The service context.</param>
    </member>
    <member name="P:RestFoundation.Results.RedirectResult.RedirectType">
      <summary>
            Gets or sets the redirect type.
            </summary>
    </member>
    <member name="P:RestFoundation.Results.RedirectResult.RedirectUrl">
      <summary>
            Gets or sets a redirect URL.
            </summary>
    </member>
    <member name="T:RestFoundation.Runtime.DynamicXDocument">
      <summary>
            Represents a dynamic XML document.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.DynamicXDocument.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Runtime.DynamicXDocument" /> class.
            </summary>
      <param name="xml">A <see cref="T:System.String" /> containing the XML.</param>
    </member>
    <member name="M:RestFoundation.Runtime.DynamicXDocument.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
      <summary>
            Provides the implementation for operations that get member values. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" />
            class can override this method to specify dynamic behavior for operations such as getting a value for a property.
            </summary>
      <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior.
            (In most cases, a run-time exception is thrown.)
            </returns>
      <param name="binder">
            Provides information about the object that called the dynamic operation. The binder.Name property provides the name of the member on which the
            dynamic operation is performed. For example, for the Console.WriteLine(sampleObject.SampleProperty) statement, where sampleObject is an instance
            of the class derived from the <see cref="T:System.Dynamic.DynamicObject" /> class, binder.Name returns "SampleProperty". The binder.IgnoreCase
            property specifies whether the member name is case-sensitive.
            </param>
      <param name="result">The result of the get operation. For example, if the method is called for a property, you can assign the property value to
            <paramref name="result" />.
            </param>
    </member>
    <member name="M:RestFoundation.Runtime.DynamicXDocument.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
      <summary>
            Provides the implementation for operations that get a value by index. Classes derived from the <see cref="T:System.Dynamic.DynamicObject" />
            class can override this method to specify dynamic behavior for indexing operations.
            </summary>
      <returns>
            true if the operation is successful; otherwise, false. If this method returns false, the run-time binder of the language determines the behavior.
            (In most cases, a run-time exception is thrown.)
            </returns>
      <param name="binder">
            Provides information about the operation.
            </param>
      <param name="indexes">The indexes that are used in the operation. For example, for the sampleObject[3] operation in C# (sampleObject(3) in Visual Basic),
            where sampleObject is derived from the DynamicObject class, <paramref name="indexes" />[0] is equal to 3.
            </param>
      <param name="result">The result of the index operation.</param>
    </member>
    <member name="M:RestFoundation.Runtime.DynamicXDocument.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:RestFoundation.Runtime.DynamicXDocument.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
      <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:RestFoundation.Formatters.JsonFormatter">
      <summary>
            Represents a JSON media type formatter.
            </summary>
    </member>
    <member name="M:RestFoundation.Formatters.JsonFormatter.FormatRequest(RestFoundation.IServiceContext,System.Type)">
      <summary>
            Deserializes HTTP message body data into an object instance of the provided type.
            </summary>
      <param name="context">The service context.</param>
      <param name="objectType">The object type.</param>
      <returns>The deserialized object.</returns>
      <exception cref="T:RestFoundation.Runtime.HttpResponseException">If the object cannot be deserialized.</exception>
    </member>
    <member name="M:RestFoundation.Formatters.JsonFormatter.FormatResponse(RestFoundation.IServiceContext,System.Type,System.Object,System.String)">
      <summary>
            Serializes the object instance into the HTTP response stream using the accepted media type.
            </summary>
      <param name="context">The service context.</param>
      <param name="methodReturnType">The method return type.</param>
      <param name="obj">The object to serialize.</param>
      <param name="preferredMediaType">The preferred media type.</param>
      <returns>A service method result containing the serialized object representation.</returns>
      <exception cref="T:RestFoundation.Runtime.HttpResponseException">If the object could not be serialized.</exception>
    </member>
    <member name="T:RestFoundation.Formatters.XmlFormatter">
      <summary>
            Represents an XML media type formatter.
            </summary>
    </member>
    <member name="M:RestFoundation.Formatters.XmlFormatter.FormatRequest(RestFoundation.IServiceContext,System.Type)">
      <summary>
            Deserializes HTTP message body data into an object instance of the provided type.
            </summary>
      <param name="context">The service context.</param>
      <param name="objectType">The object type.</param>
      <returns>The deserialized object.</returns>
      <exception cref="T:RestFoundation.Runtime.HttpResponseException">If the object cannot be deserialized.</exception>
    </member>
    <member name="M:RestFoundation.Formatters.XmlFormatter.FormatResponse(RestFoundation.IServiceContext,System.Type,System.Object,System.String)">
      <summary>
            Serializes the object instance into the HTTP response stream using the accepted media type.
            </summary>
      <param name="context">The service context.</param>
      <param name="methodReturnType">The method return type.</param>
      <param name="obj">The object to serialize.</param>
      <param name="preferredMediaType">The preferred media type.</param>
      <returns>A service method result containing the serialized object representation.</returns>
      <exception cref="T:RestFoundation.Runtime.HttpResponseException">If the object could not be serialized.</exception>
    </member>
    <member name="T:RestFoundation.RestHttpModule">
      <summary>
            Represents an HTTP module required by the REST foundation.
            </summary>
    </member>
    <member name="M:RestFoundation.RestHttpModule.Init(System.Web.HttpApplication)">
      <summary>
            Initializes a module and prepares it to handle requests.
            </summary>
      <param name="context">
            An <see cref="T:System.Web.HttpApplication" /> that provides access to the methods, properties, and events common to all
            application objects within an ASP.NET application.
            </param>
    </member>
    <member name="M:RestFoundation.RestHttpModule.Dispose">
      <summary>
            Disposes of the resources (other than memory) used by the module that implements <see cref="T:System.Web.IHttpModule" />.
            </summary>
    </member>
    <member name="T:RestFoundation.Runtime.HttpResponseException">
      <summary>
            Represents an HTTP response exception. This is a special type of exception that is designed to stop
            the HTTP request and set a status. It does not get caught by the service behaviors.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.HttpResponseException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Runtime.HttpResponseException" /> class.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.HttpResponseException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Runtime.HttpResponseException" /> class with the HTTP status description.
            The status code is assumed to be 500 (internal server error).
            </summary>
      <param name="statusDescription">The status description.</param>
    </member>
    <member name="M:RestFoundation.Runtime.HttpResponseException.#ctor(System.Net.HttpStatusCode)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Runtime.HttpResponseException" /> class with the HTTP status code.
            </summary>
      <param name="statusCode">The status code.</param>
    </member>
    <member name="M:RestFoundation.Runtime.HttpResponseException.#ctor(System.Net.HttpStatusCode,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Runtime.HttpResponseException" /> class with the HTTP status code and description.
            </summary>
      <param name="statusCode">The status code.</param>
      <param name="statusDescription">The status description.</param>
      <exception cref="T:System.ArgumentException">If the status code is not an error code.</exception>
    </member>
    <member name="M:RestFoundation.Runtime.HttpResponseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
      <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.
            </param>
      <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.
            </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:RestFoundation.Runtime.HttpResponseException.StatusCode">
      <summary>
            Gets the associated HTTP status code.
            </summary>
    </member>
    <member name="P:RestFoundation.Runtime.HttpResponseException.StatusDescription">
      <summary>
            Gets the associated HTTP status description.
            </summary>
    </member>
    <member name="T:RestFoundation.IHttpResponse">
      <summary>
            Defines an HTTP response.
            </summary>
    </member>
    <member name="M:RestFoundation.IHttpResponse.AppendHeader(System.String,System.String)">
      <summary>
            Appends or sets a response header value.
            </summary>
      <remarks>
            Some HTTP headers do not support multiple values. In that case the latest assigned
            value will be used.
            </remarks>
      <param name="headerName">The header name.</param>
      <param name="headerValue">The header value.</param>
    </member>
    <member name="M:RestFoundation.IHttpResponse.GetHeaders">
      <summary>
            Gets a collection of all response headers set by the service.
            </summary>
      <returns>A list of response headers.</returns>
    </member>
    <member name="M:RestFoundation.IHttpResponse.GetHeader(System.String)">
      <summary>
            Gets a response header value by name.
            </summary>
      <param name="headerName">The header name.</param>
      <returns>The header value.</returns>
    </member>
    <member name="M:RestFoundation.IHttpResponse.SetHeader(System.String,System.String)">
      <summary>
            Sets a response header.
            </summary>
      <remarks>
            This behavior is not supported when running services under the Visual Studio
            Development Server. In that scenario the method has the same behavior as
            the <see cref="M:RestFoundation.IHttpResponse.AppendHeader(System.String,System.String)" />.
            </remarks>
      <param name="headerName">The header name.</param>
      <param name="headerValue">The header value.</param>
    </member>
    <member name="M:RestFoundation.IHttpResponse.RemoveHeader(System.String)">
      <summary>
            Removes a response header by name.
            </summary>
      <param name="headerName">The header name.</param>
      <returns>
            true if the header was removed successfully, false if the header
            had not been a part of the response headers.
            </returns>
    </member>
    <member name="M:RestFoundation.IHttpResponse.ClearHeaders">
      <summary>
            Clears all response headers.
            </summary>
    </member>
    <member name="M:RestFoundation.IHttpResponse.GetCharsetEncoding">
      <summary>
            Gets the response character encoding.
            </summary>
      <returns>Returns the encoding.</returns>
    </member>
    <member name="M:RestFoundation.IHttpResponse.SetCharsetEncoding(System.Text.Encoding)">
      <summary>
            Sets the response character encoding.
            </summary>
      <param name="encoding">The encoding.</param>
    </member>
    <member name="M:RestFoundation.IHttpResponse.GetStatusCode">
      <summary>
            Gets the HTTP status code.
            </summary>
      <returns>The status code.</returns>
    </member>
    <member name="M:RestFoundation.IHttpResponse.GetStatusDescription">
      <summary>
            Gets the HTTP status description.
            </summary>
      <returns>The status description.</returns>
    </member>
    <member name="M:RestFoundation.IHttpResponse.SetStatus(System.Net.HttpStatusCode)">
      <summary>
            Sets the HTTP status code.
            </summary>
      <param name="statusCode">The status code.</param>
    </member>
    <member name="M:RestFoundation.IHttpResponse.SetStatus(System.Net.HttpStatusCode,System.String)">
      <summary>
            Sets the HTTP status code and description.
            </summary>
      <param name="statusCode">The status code.</param>
      <param name="statusDescription">The status description.</param>
    </member>
    <member name="M:RestFoundation.IHttpResponse.SetStatus(System.Int32,System.String)">
      <summary>
            Sets the HTTP status code and description.
            </summary>
      <param name="statusCode">The status code.</param>
      <param name="statusDescription">The status description.</param>
    </member>
    <member name="M:RestFoundation.IHttpResponse.GetCookies">
      <summary>
            Gets a collection of all response cookies set by the service.
            </summary>
      <returns>A list of response cookies.</returns>
    </member>
    <member name="M:RestFoundation.IHttpResponse.GetCookie(System.String)">
      <summary>
            Gets a response cookie by name.
            </summary>
      <param name="cookieName">The cookie name.</param>
      <returns>The cookie object.</returns>
    </member>
    <member name="M:RestFoundation.IHttpResponse.SetCookie(System.Web.HttpCookie)">
      <summary>
            Sets a response cookie.
            </summary>
      <param name="cookie">The cookie object.</param>
    </member>
    <member name="M:RestFoundation.IHttpResponse.ExpireCookie(System.Web.HttpCookie)">
      <summary>
            Expires a response cookie.
            </summary>
      <param name="cookie">The cookie object.</param>
    </member>
    <member name="M:RestFoundation.IHttpResponse.SetLink(System.String,System.String)">
      <summary>
            Sets a link header with the provided href and rel.
            </summary>
      <param name="href">The href URL.</param>
      <param name="rel">The relationship value.</param>
    </member>
    <member name="M:RestFoundation.IHttpResponse.SetLink(System.String,System.String,System.String)">
      <summary>
            Sets a link header with the provided href, rel and title.
            </summary>
      <param name="href">The href URL.</param>
      <param name="rel">The relationship value.</param>
      <param name="title">The link title.</param>
    </member>
    <member name="M:RestFoundation.IHttpResponse.SetLink(System.Uri,System.String)">
      <summary>
            Sets a link header with the provided href and rel.
            </summary>
      <param name="href">The href URL.</param>
      <param name="rel">The relationship value.</param>
    </member>
    <member name="M:RestFoundation.IHttpResponse.SetLink(System.Uri,System.String,System.String)">
      <summary>
            Sets a link header with the provided href, rel and title.
            </summary>
      <param name="href">The href URL.</param>
      <param name="rel">The relationship value.</param>
      <param name="title">The link title.</param>
    </member>
    <member name="M:RestFoundation.IHttpResponse.SetFileDependencies(System.String)">
      <summary>
            Adds the file as a response dependency to create an e-tag, last modified time and
            set appropriate caching parameters.
            </summary>
      <param name="filePath">The file path.</param>
    </member>
    <member name="M:RestFoundation.IHttpResponse.SetFileDependencies(System.String,System.TimeSpan)">
      <summary>
            Adds the file as a response dependency to create an e-tag, last modified time and
            set appropriate caching parameters.
            </summary>
      <param name="filePath">The file path.</param>
      <param name="maxAge">The time span before the cache expires.</param>
    </member>
    <member name="M:RestFoundation.IHttpResponse.SetFileDependencies(System.String,System.Web.HttpCacheability,System.TimeSpan)">
      <summary>
            Adds the file as a response dependency to create an e-tag, last modified time and
            set appropriate caching parameters.
            </summary>
      <param name="filePath">The file path.</param>
      <param name="cacheability">The cacheability value.</param>
      <param name="maxAge">The time span before the cache expires.</param>
    </member>
    <member name="P:RestFoundation.IHttpResponse.Output">
      <summary>
            Gets the response output.
            </summary>
    </member>
    <member name="P:RestFoundation.IHttpResponse.IsClientConnected">
      <summary>
            Gets a value indicating whether the client is connected to the server.
            </summary>
    </member>
    <member name="P:RestFoundation.IHttpResponse.IsSuccess">
      <summary>
            Gets a value indicating whether the response status code is successful.
            </summary>
    </member>
    <member name="P:RestFoundation.IHttpResponse.CancellationTokenSource">
      <summary>
            Gets or sets a cancellation token source for a returned asynchronous task.
            </summary>
    </member>
    <member name="P:RestFoundation.IHttpResponse.TrySkipIisCustomErrors">
      <summary>
            Gets or sets a value indicating whether custom IIS 7+ error pages should be
            skipped, if possible.
            </summary>
    </member>
    <member name="P:RestFoundation.IHttpResponse.HeaderNames">
      <summary>
            Gets response header names.
            </summary>
    </member>
    <member name="T:RestFoundation.Collections.ICookieValueCollection">
      <summary>
            Defines a cookie collection.
            </summary>
    </member>
    <member name="M:RestFoundation.Collections.ICookieValueCollection.Get(System.String)">
      <summary>
            Gets a value by the key in the collection.
            </summary>
      <param name="key">The key.</param>
      <returns>The corresponding value.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">If the key is not a part of the collection.</exception>
    </member>
    <member name="M:RestFoundation.Collections.ICookieValueCollection.TryGet(System.String)">
      <summary>
            Gets a value by the key in the collection or null if the key is not a part of the collection.
            </summary>
      <param name="key">The key.</param>
      <returns>The corresponding value.</returns>
    </member>
    <member name="P:RestFoundation.Collections.ICookieValueCollection.Keys">
      <summary>
            Gets a list of all keys.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.ICookieValueCollection.Count">
      <summary>
            Gets a value containing the count of all collection items.
            </summary>
    </member>
    <member name="T:RestFoundation.Collections.Concrete.CookieValueCollection">
      <summary>
            Represents a cookie collection.
            </summary>
    </member>
    <member name="M:RestFoundation.Collections.Concrete.CookieValueCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:RestFoundation.Collections.Concrete.CookieValueCollection.Get(System.String)">
      <summary>
            Gets a value by the key in the collection.
            </summary>
      <param name="key">The key.</param>
      <returns>The corresponding value.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">If the key is not a part of the collection.</exception>
    </member>
    <member name="M:RestFoundation.Collections.Concrete.CookieValueCollection.TryGet(System.String)">
      <summary>
            Gets a value by the key in the collection or null if the key is not a part of the collection.
            </summary>
      <param name="key">The key.</param>
      <returns>The corresponding value.</returns>
    </member>
    <member name="M:RestFoundation.Collections.Concrete.CookieValueCollection.ToString">
      <summary>
            Returns a string that represents the current object.
            </summary>
      <returns>
            A string that represents the current object.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.CookieValueCollection.Keys">
      <summary>
            Gets a list of all keys.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.CookieValueCollection.Count">
      <summary>
            Gets a value containing the count of all collection items.
            </summary>
    </member>
    <member name="T:RestFoundation.Collections.IRouteValueCollection">
      <summary>
            Defines a route value collection.
            </summary>
    </member>
    <member name="M:RestFoundation.Collections.IRouteValueCollection.Get(System.String)">
      <summary>
            Gets a value by the key in the collection.
            </summary>
      <param name="key">The key.</param>
      <returns>The corresponding value.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">If the key is not a part of the collection.</exception>
    </member>
    <member name="M:RestFoundation.Collections.IRouteValueCollection.TryGet(System.String)">
      <summary>
            Gets a value by the key in the collection or null if the key is not a part of the collection.
            </summary>
      <param name="key">The key.</param>
      <returns>The corresponding value.</returns>
    </member>
    <member name="M:RestFoundation.Collections.IRouteValueCollection.ToDictionary">
      <summary>
            Returns the pairs of keys and objects as a dictionary.
            </summary>
      <returns>The dictionary of keys and objects.</returns>
    </member>
    <member name="P:RestFoundation.Collections.IRouteValueCollection.Keys">
      <summary>
            Gets a list of all keys.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.IRouteValueCollection.Count">
      <summary>
            Gets a value containing the count of all collection items.
            </summary>
    </member>
    <member name="T:RestFoundation.Collections.Concrete.RouteValueCollection">
      <summary>
            Represents an object value collection.
            </summary>
    </member>
    <member name="M:RestFoundation.Collections.Concrete.RouteValueCollection.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
      <filterpriority>1</filterpriority>
    </member>
    <member name="M:RestFoundation.Collections.Concrete.RouteValueCollection.Get(System.String)">
      <summary>
            Gets a value by the key in the collection.
            </summary>
      <param name="key">The key.</param>
      <returns>The corresponding value.</returns>
      <exception cref="T:System.ArgumentOutOfRangeException">If the key is not a part of the collection.</exception>
    </member>
    <member name="M:RestFoundation.Collections.Concrete.RouteValueCollection.TryGet(System.String)">
      <summary>
            Gets a value by the key in the collection or null if the key is not a part of the collection.
            </summary>
      <param name="key">The key.</param>
      <returns>The corresponding value.</returns>
    </member>
    <member name="M:RestFoundation.Collections.Concrete.RouteValueCollection.ToDictionary">
      <summary>
            Returns the pairs of keys and objects as a dictionary.
            </summary>
      <returns>The dictionary of keys and objects.</returns>
    </member>
    <member name="M:RestFoundation.Collections.Concrete.RouteValueCollection.ToString">
      <summary>
            Returns a string that represents the current object.
            </summary>
      <returns>
            A string that represents the current object.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.RouteValueCollection.Keys">
      <summary>
            Gets a list of all keys.
            </summary>
    </member>
    <member name="P:RestFoundation.Collections.Concrete.RouteValueCollection.Count">
      <summary>
            Gets a value containing the count of all collection items.
            </summary>
    </member>
    <member name="T:RestFoundation.IServiceMethodInvoker">
      <summary>
            Defines a service method invoker.
            </summary>
    </member>
    <member name="M:RestFoundation.IServiceMethodInvoker.InvokeAsync(RestFoundation.Runtime.Handlers.IRestServiceHandler,System.Object,System.Reflection.MethodInfo)">
      <summary>
            Invokes the service method asynchronously.
            </summary>
      <param name="handler">The REST handler associated with the HTTP request.</param>
      <param name="service">The service instance.</param>
      <param name="method">The service method.</param>
      <returns>A task that invokes the service method.</returns>
    </member>
    <member name="T:RestFoundation.IHttpRequest">
      <summary>
            Defines an HTTP request.
            </summary>
    </member>
    <member name="P:RestFoundation.IHttpRequest.IsAjax">
      <summary>
            Gets a value indicating whether the request was initiated through AJAX.
            </summary>
    </member>
    <member name="P:RestFoundation.IHttpRequest.IsLocal">
      <summary>
            Gets a value indicating whether the request was initiated from the local computer.
            </summary>
    </member>
    <member name="P:RestFoundation.IHttpRequest.IsSecure">
      <summary>
            Gets a value indicating whether the HTTP connection uses SSL (HTTPS protocol).
            </summary>
    </member>
    <member name="P:RestFoundation.IHttpRequest.Url">
      <summary>
            Gets the service operation URL.
            </summary>
    </member>
    <member name="P:RestFoundation.IHttpRequest.Method">
      <summary>
            Gets the HTTP method of the request.
            </summary>
    </member>
    <member name="P:RestFoundation.IHttpRequest.Body">
      <summary>
            Gets the stream containing the HTTP request body data.
            </summary>
    </member>
    <member name="P:RestFoundation.IHttpRequest.ResourceBag">
      <summary>
            Gets the dynamic resource object bag.
            </summary>
    </member>
    <member name="P:RestFoundation.IHttpRequest.ResourceState">
      <summary>
            Gets a resource state associated with the service method with associated validation errors.
            </summary>
    </member>
    <member name="P:RestFoundation.IHttpRequest.RouteValues">
      <summary>
            Gets the route collection.
            </summary>
    </member>
    <member name="P:RestFoundation.IHttpRequest.Headers">
      <summary>
            Gets the request header collection.
            </summary>
    </member>
    <member name="P:RestFoundation.IHttpRequest.QueryString">
      <summary>
            Gets the query string collection.
            </summary>
    </member>
    <member name="P:RestFoundation.IHttpRequest.Form">
      <summary>
            Gets the form name/value collection.
            </summary>
    </member>
    <member name="P:RestFoundation.IHttpRequest.ServerVariables">
      <summary>
            Gets the server variable collection.
            </summary>
    </member>
    <member name="P:RestFoundation.IHttpRequest.Cookies">
      <summary>
            Gets the request cookie collection.
            </summary>
    </member>
    <member name="T:RestFoundation.Context.HttpRequest">
      <summary>
            Represents an HTTP request.
            </summary>
    </member>
    <member name="M:RestFoundation.Context.HttpRequest.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Context.HttpRequest" /> class.
            </summary>
    </member>
    <member name="P:RestFoundation.Context.HttpRequest.IsAjax">
      <summary>
            Gets a value indicating whether the request was initiated through AJAX.
            </summary>
    </member>
    <member name="P:RestFoundation.Context.HttpRequest.IsLocal">
      <summary>
            Gets a value indicating whether the request was initiated from the local computer.
            </summary>
    </member>
    <member name="P:RestFoundation.Context.HttpRequest.IsSecure">
      <summary>
            Gets a value indicating whether the HTTP connection uses SSL (HTTPS protocol).
            </summary>
    </member>
    <member name="P:RestFoundation.Context.HttpRequest.Url">
      <summary>
            Gets the service operation URL.
            </summary>
    </member>
    <member name="P:RestFoundation.Context.HttpRequest.Method">
      <summary>
            Gets the HTTP method of the request.
            </summary>
    </member>
    <member name="P:RestFoundation.Context.HttpRequest.Body">
      <summary>
            Gets the stream containing the HTTP request body data.
            </summary>
    </member>
    <member name="P:RestFoundation.Context.HttpRequest.ResourceBag">
      <summary>
            Gets the dynamic resource object bag.
            </summary>
    </member>
    <member name="P:RestFoundation.Context.HttpRequest.ResourceState">
      <summary>
            Gets a resource state associated with the service method with associated validation errors.
            </summary>
    </member>
    <member name="P:RestFoundation.Context.HttpRequest.RouteValues">
      <summary>
            Gets the route collection.
            </summary>
    </member>
    <member name="P:RestFoundation.Context.HttpRequest.Headers">
      <summary>
            Gets the request header collection.
            </summary>
    </member>
    <member name="P:RestFoundation.Context.HttpRequest.QueryString">
      <summary>
            Gets the query string collection.
            </summary>
    </member>
    <member name="P:RestFoundation.Context.HttpRequest.Form">
      <summary>
            Gets the form name/value collection.
            </summary>
    </member>
    <member name="P:RestFoundation.Context.HttpRequest.ServerVariables">
      <summary>
            Gets the server variable collection.
            </summary>
    </member>
    <member name="P:RestFoundation.Context.HttpRequest.Cookies">
      <summary>
            Gets the request cookie collection.
            </summary>
    </member>
    <member name="T:RestFoundation.Context.HttpResponse">
      <summary>
            Represents an HTTP response.
            </summary>
    </member>
    <member name="M:RestFoundation.Context.HttpResponse.#ctor(RestFoundation.IHttpResponseOutput)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Context.HttpResponse" /> class.
            </summary>
      <param name="output">The HTTP response output.</param>
    </member>
    <member name="M:RestFoundation.Context.HttpResponse.AppendHeader(System.String,System.String)">
      <summary>
            Appends or sets a response header value.
            </summary>
      <remarks>
            Some HTTP headers do not support multiple values. In that case the latest assigned
            value will be used.
            </remarks>
      <param name="headerName">The header name.</param>
      <param name="headerValue">The header value.</param>
    </member>
    <member name="M:RestFoundation.Context.HttpResponse.GetHeaders">
      <summary>
            Gets a collection of all response headers set by the service.
            </summary>
      <returns>A list of response headers.</returns>
    </member>
    <member name="M:RestFoundation.Context.HttpResponse.GetHeader(System.String)">
      <summary>
            Gets a response header value by name.
            </summary>
      <param name="headerName">The header name.</param>
      <returns>The header value.</returns>
    </member>
    <member name="M:RestFoundation.Context.HttpResponse.SetHeader(System.String,System.String)">
      <summary>
            Sets a response header.
            </summary>
      <remarks>
            This behavior is not supported when running services under the Visual Studio
            Development Server. In that scenario the method has the same behavior as
            the <see cref="M:RestFoundation.Context.HttpResponse.AppendHeader(System.String,System.String)" />.
            </remarks>
      <param name="headerName">The header name.</param>
      <param name="headerValue">The header value.</param>
    </member>
    <member name="M:RestFoundation.Context.HttpResponse.RemoveHeader(System.String)">
      <summary>
            Removes a response header by name.
            </summary>
      <param name="headerName">The header name.</param>
      <returns>
            true if the header was removed successfully, false if the header
            had not been a part of the response headers.
            </returns>
    </member>
    <member name="M:RestFoundation.Context.HttpResponse.ClearHeaders">
      <summary>
            Clears all response headers.
            </summary>
    </member>
    <member name="M:RestFoundation.Context.HttpResponse.GetCharsetEncoding">
      <summary>
            Gets the response character encoding.
            </summary>
      <returns>Returns the encoding.</returns>
    </member>
    <member name="M:RestFoundation.Context.HttpResponse.SetCharsetEncoding(System.Text.Encoding)">
      <summary>
            Sets the response character encoding.
            </summary>
      <param name="encoding">The encoding.</param>
    </member>
    <member name="M:RestFoundation.Context.HttpResponse.GetStatusCode">
      <summary>
            Gets the HTTP status code.
            </summary>
      <returns>The status code.</returns>
    </member>
    <member name="M:RestFoundation.Context.HttpResponse.GetStatusDescription">
      <summary>
            Gets the HTTP status description.
            </summary>
      <returns>The status description.</returns>
    </member>
    <member name="M:RestFoundation.Context.HttpResponse.SetStatus(System.Net.HttpStatusCode)">
      <summary>
            Sets the HTTP status code.
            </summary>
      <param name="statusCode">The status code.</param>
    </member>
    <member name="M:RestFoundation.Context.HttpResponse.SetStatus(System.Net.HttpStatusCode,System.String)">
      <summary>
            Sets the HTTP status code and description.
            </summary>
      <param name="statusCode">The status code.</param>
      <param name="statusDescription">The status description.</param>
    </member>
    <member name="M:RestFoundation.Context.HttpResponse.SetStatus(System.Int32,System.String)">
      <summary>
            Sets the HTTP status code and description.
            </summary>
      <param name="statusCode">The status code.</param>
      <param name="statusDescription">The status description.</param>
    </member>
    <member name="M:RestFoundation.Context.HttpResponse.GetCookies">
      <summary>
            Gets a collection of all response cookies set by the service.
            </summary>
      <returns>A list of response cookies.</returns>
    </member>
    <member name="M:RestFoundation.Context.HttpResponse.GetCookie(System.String)">
      <summary>
            Gets a response cookie by name.
            </summary>
      <param name="cookieName">The cookie name.</param>
      <returns>The cookie object.</returns>
    </member>
    <member name="M:RestFoundation.Context.HttpResponse.SetCookie(System.Web.HttpCookie)">
      <summary>
            Sets a response cookie.
            </summary>
      <param name="cookie">The cookie object.</param>
    </member>
    <member name="M:RestFoundation.Context.HttpResponse.ExpireCookie(System.Web.HttpCookie)">
      <summary>
            Expires a response cookie.
            </summary>
      <param name="cookie">The cookie object.</param>
    </member>
    <member name="M:RestFoundation.Context.HttpResponse.SetLink(System.String,System.String)">
      <summary>
            Sets a link header with the provided href and rel.
            </summary>
      <param name="href">The href URL.</param>
      <param name="rel">The relationship value.</param>
      <exception cref="T:System.ArgumentException">If href or rel contain invalid characters.</exception>
    </member>
    <member name="M:RestFoundation.Context.HttpResponse.SetLink(System.String,System.String,System.String)">
      <summary>
            Sets a link header with the provided href, rel and title.
            </summary>
      <param name="href">The href URL.</param>
      <param name="rel">The relationship value.</param>
      <param name="title">The link title.</param>
      <exception cref="T:System.ArgumentException">If href or rel contain invalid characters.</exception>
    </member>
    <member name="M:RestFoundation.Context.HttpResponse.SetLink(System.Uri,System.String)">
      <summary>
            Sets a link header with the provided href and rel.
            </summary>
      <param name="href">The href URL.</param>
      <param name="rel">The relationship value.</param>
      <exception cref="T:System.ArgumentException">If href or rel contain invalid characters.</exception>
    </member>
    <member name="M:RestFoundation.Context.HttpResponse.SetLink(System.Uri,System.String,System.String)">
      <summary>
            Sets a link header with the provided href, rel and title.
            </summary>
      <param name="href">The href URL.</param>
      <param name="rel">The relationship value.</param>
      <param name="title">The link title.</param>
      <exception cref="T:System.ArgumentException">If href or rel contain invalid characters.</exception>
    </member>
    <member name="M:RestFoundation.Context.HttpResponse.SetFileDependencies(System.String)">
      <summary>
            Adds the file as a response dependency to create an e-tag, last modified time and
            set appropriate caching parameters.
            </summary>
      <param name="filePath">The file path.</param>
    </member>
    <member name="M:RestFoundation.Context.HttpResponse.SetFileDependencies(System.String,System.TimeSpan)">
      <summary>
            Adds the file as a response dependency to create an e-tag, last modified time and
            set appropriate caching parameters.
            </summary>
      <param name="filePath">The file path.</param>
      <param name="maxAge">The time span before the cache expires.</param>
    </member>
    <member name="M:RestFoundation.Context.HttpResponse.SetFileDependencies(System.String,System.Web.HttpCacheability,System.TimeSpan)">
      <summary>
            Adds the file as a response dependency to create an e-tag, last modified time and
            set appropriate caching parameters.
            </summary>
      <param name="filePath">The file path.</param>
      <param name="cacheability">The cacheability value.</param>
      <param name="maxAge">The time span before the cache expires.</param>
    </member>
    <member name="P:RestFoundation.Context.HttpResponse.Output">
      <summary>
            Gets the response output.
            </summary>
    </member>
    <member name="P:RestFoundation.Context.HttpResponse.IsClientConnected">
      <summary>
            Gets a value indicating whether the client is connected to the server.
            </summary>
    </member>
    <member name="P:RestFoundation.Context.HttpResponse.IsSuccess">
      <summary>
            Gets a value indicating whether the response status code is successful.
            </summary>
    </member>
    <member name="P:RestFoundation.Context.HttpResponse.CancellationTokenSource">
      <summary>
            Gets or sets a cancellation token source for a returned asynchronous task.
            </summary>
    </member>
    <member name="P:RestFoundation.Context.HttpResponse.TrySkipIisCustomErrors">
      <summary>
            Gets or sets a value indicating whether custom IIS 7+ error pages should be
            skipped, if possible.
            </summary>
    </member>
    <member name="P:RestFoundation.Context.HttpResponse.HeaderNames">
      <summary>
            Gets response header names.
            </summary>
    </member>
    <member name="T:RestFoundation.Runtime.Operation">
      <summary>
            Represents a REST operation associated to a service method.
            </summary>
    </member>
    <member name="P:RestFoundation.Runtime.Operation.RelativeUrlTemplate">
      <summary>
            Gets or sets a relative URL template.
            </summary>
    </member>
    <member name="P:RestFoundation.Runtime.Operation.HttpMethod">
      <summary>
            Gets or sets an HTTP method.
            </summary>
    </member>
    <member name="P:RestFoundation.Runtime.Operation.Description">
      <summary>
            Gets or sets an optional description.
            </summary>
    </member>
    <member name="P:RestFoundation.Runtime.Operation.SampleUrl">
      <summary>
            Gets or sets an optional sample URL.
            </summary>
    </member>
    <member name="T:RestFoundation.Runtime.XmlSchemaGenerator">
      <summary>
            Represents an XML schema generator.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.XmlSchemaGenerator.Generate``1">
      <summary>
            Returns generated XML schemas for the provided object type.
            </summary>
      <typeparam name="T">The object type.</typeparam>
      <returns>XML schemas for the object.</returns>
    </member>
    <member name="M:RestFoundation.Runtime.XmlSchemaGenerator.Generate(System.Type)">
      <summary>
            Returns generated XML schemas for the provided object type.
            </summary>
      <param name="objectType">The object type.</param>
      <returns>XML schemas for the object.</returns>
    </member>
    <member name="T:RestFoundation.Configuration.ProxyConfiguration">
      <summary>
            Represents the service help and proxy interface configuration.
            </summary>
    </member>
    <member name="M:RestFoundation.Configuration.ProxyConfiguration.Enable">
      <summary>
            Enables HTML based interface for the service help pages and HTTP proxy under the relative URL "help".
            </summary>
      <returns>The configuration object.</returns>
    </member>
    <member name="M:RestFoundation.Configuration.ProxyConfiguration.EnableWithRelativeUrl(System.String)">
      <summary>
            Enables HTML based interface for the service help pages and HTTP proxy.
            IMPORTANT: If you are setting the relative URL parameter to something other than "help",
            make sure to adjust the location/path setting in the Web.config accordingly to avoid
            ASP .NET validation errors.
            </summary>
      <param name="relativeUrl">The relative URL path for the service help and proxy.</param>
      <returns>The configuration object.</returns>
      <exception cref="T:System.ArgumentException">If the relative URL contains invalid characters.</exception>
    </member>
    <member name="M:RestFoundation.Configuration.ProxyConfiguration.WithServiceDescription(System.String)">
      <summary>
            Sets the service description for the service help and proxy pages.
            </summary>
      <param name="description">The service description.</param>
      <returns>The configuration object.</returns>
    </member>
    <member name="M:RestFoundation.Configuration.ProxyConfiguration.HttpsOnly">
      <summary>
            Requires the service proxy to be accessed through HTTPS only.
            </summary>
      <returns>The configuration object.</returns>
    </member>
    <member name="M:RestFoundation.Configuration.ProxyConfiguration.RequireAuthorization(RestFoundation.Security.IAuthorizationManager)">
      <summary>
            Sets basic authentication for the service proxy and authorizes users through the provided authorization manager
            instance.
            </summary>
      <param name="authorizationManager">The authorization manager.</param>
      <returns>The configuration object.</returns>
    </member>
    <member name="T:RestFoundation.ServiceProxy.ProxyOperation">
      <summary>
            Represents a service proxy operation.
            </summary>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyOperation.GenerateSampleUrlParts">
      <summary>
            Gets sample URL parts - the service part and the operation part.
            </summary>
      <returns>A tuple with sample URL parts.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyOperation.CompareTo(RestFoundation.ServiceProxy.ProxyOperation)">
      <summary>
            Compares the current object with another object of the same type.
            </summary>
      <returns>A value that indicates the relative order of the objects being compared.</returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyOperation.Description">
      <summary>
            Gets or sets the description.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyOperation.HasResource">
      <summary>
            Gets or sets a value indicating whether the operation has a response.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyOperation.HttpMethod">
      <summary>
            Gets or sets the HTTP method.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyOperation.HttpsPort">
      <summary>
            Gets or sets the HTTPS port, if applicable.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyOperation.DoesNotSupportJson">
      <summary>
            Gets or sets a value indicating whether the operation supports JSON format.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyOperation.DoesNotSupportXml">
      <summary>
            Gets or sets a value indicating whether the operation supports XML format.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyOperation.IsIPFiltered">
      <summary>
            Gets or sets a value indicating whether the operation is IP filtered.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyOperation.MetadataUrl">
      <summary>
            Gets or sets the metadata URL.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyOperation.ProxyUrl">
      <summary>
            Gets or sets the service proxy UI URL.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyOperation.RepeatedTemplateCount">
      <summary>
            Gets or sets a value how many times the current template is repeated in the list.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyOperation.RequestResourceExample">
      <summary>
            Gets or sets the HTTP request resource example.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyOperation.ResponseResourceExample">
      <summary>
            Gets or sets the HTTP response resource example.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyOperation.ResultType">
      <summary>
            Gets or sets the result type.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyOperation.ServiceUrl">
      <summary>
            Gets or sets the service URL.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyOperation.SupportedHttpMethods">
      <summary>
            Gets or sets a comma separated list of supported HTTP methods.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyOperation.UrlTempate">
      <summary>
            Gets or sets the URL template.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyOperation.Credentials">
      <summary>
            Gets or sets authentication type and default credentials.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyOperation.AdditionalHeaders">
      <summary>
            Gets or sets a collection of additional headers.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyOperation.RouteParameters">
      <summary>
            Gets or sets a collection of route parameters.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyOperation.StatusCodes">
      <summary>
            Gets or sets a collection of possible HTTP status codes.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyOperation.HasResponse">
      <summary>
            Gets a value indicating whether the operation has a response.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyOperation.SupportsOdata">
      <summary>
            Gets a value indicating whether the operation supports OData queries.
            </summary>
    </member>
    <member name="T:RestFoundation.ServiceProxy.ProxyOperationGenerator">
      <summary>
            Represents a proxy operation generator class.
            </summary>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyOperationGenerator.Get(System.Int32)">
      <summary>
            Gets a proxy operation by the ID.
            </summary>
      <param name="operationId">The proxy operation ID.</param>
      <returns>The proxy operation instance.</returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyOperationGenerator.GetAll">
      <summary>
            Gets all proxy operations associated with the service URL.
            </summary>
      <returns>A sequence of proxy operation.</returns>
    </member>
    <member name="T:RestFoundation.ServiceProxy.ProxyFile">
      <summary>
            Represents a virtual service proxy file.
            </summary>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyFile.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.ServiceProxy.ProxyFile" /> class.
            </summary>
      <param name="virtualPath">The virtual path.</param>
      <param name="fileName">The file name.</param>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyFile.Open">
      <summary>
            When overridden in a derived class, returns a read-only stream to the virtual resource.
            </summary>
      <returns>
            A read-only stream to the virtual file.
            </returns>
    </member>
    <member name="T:RestFoundation.ServiceProxy.ProxyPathProvider">
      <summary>
            Represents a virtual service proxy path provider.
            </summary>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyPathProvider.AppInitialize">
      <summary>
            Initializes the virtual path provider.
            </summary>
      <remarks>
            For some security reason .NET does not allow registering virtual path providers
            for pre-compiled web application. REST Foundation requires full trust and has
            no issues with the virtual provider in a pre-compiled web application.
            The code in this method is a work around that restriction.
            </remarks>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyPathProvider.FileExists(System.String)">
      <summary>
            Gets a value that indicates whether a file exists in the virtual file system.
            </summary>
      <returns>
            true if the file exists in the virtual file system; otherwise, false.
            </returns>
      <param name="virtualPath">The path to the virtual file.</param>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyPathProvider.GetFile(System.String)">
      <summary>
            Gets a virtual file from the virtual file system.
            </summary>
      <returns>
            A descendent of the <see cref="T:System.Web.Hosting.VirtualFile" /> class that represents a file in the virtual file system.
            </returns>
      <param name="virtualPath">The path to the virtual file.</param>
    </member>
    <member name="T:RestFoundation.Runtime.Handlers.RootRouteHandler">
      <summary>
            Represents a service root route handler.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.Handlers.RootRouteHandler.#ctor(RestFoundation.IServiceContext,RestFoundation.IContentNegotiator,RestFoundation.IResultWrapper)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Runtime.Handlers.RootRouteHandler" /> class.
            </summary>
      <param name="serviceContext">The service context.</param>
      <param name="contentNegotiator">The content negotiator.</param>
      <param name="resultWrapper">The service method result wrapper.</param>
    </member>
    <member name="M:RestFoundation.Runtime.Handlers.RootRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)">
      <summary>
            Provides the object that processes the request.
            </summary>
      <returns>
            An object that processes the request.
            </returns>
      <param name="requestContext">An object that encapsulates information about the request.</param>
    </member>
    <member name="M:RestFoundation.Runtime.Handlers.RootRouteHandler.ProcessRequest(System.Web.HttpContext)">
      <summary>
            Enables processing of HTTP Web requests by a custom HttpHandler that implements the <see cref="T:System.Web.IHttpHandler" />
            interface.
            </summary>
      <param name="context">
            An <see cref="T:System.Web.HttpContext" /> object that provides references to the intrinsic server objects
            (for example, Request, Response, Session, and Server) used to service HTTP requests.
            </param>
    </member>
    <member name="P:RestFoundation.Runtime.Handlers.RootRouteHandler.Context">
      <summary>
            Gets the service context.
            </summary>
    </member>
    <member name="P:RestFoundation.Runtime.Handlers.RootRouteHandler.IsReusable">
      <summary>
            Gets a value indicating whether another request can use the <see cref="T:System.Web.IHttpHandler" /> instance.
            </summary>
      <returns>
            true if the <see cref="T:System.Web.IHttpHandler" /> instance is reusable; otherwise, false.
            </returns>
    </member>
    <member name="T:RestFoundation.ServiceProxy.ProxyXmlConvert">
      <summary>
            Represents an XML object converter.
            </summary>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyXmlConvert.SerializeObject(System.Object,System.Boolean)">
      <summary>
            Converts an object into XML with the provided formatting options.
            </summary>
      <param name="obj">The object to serialize.</param>
      <param name="isFormatted">
            A <see cref="T:System.Boolean" /> indicating whether the serialized object is formatted for output.
            </param>
      <returns>The <see cref="T:System.String" /> value containing the serialized object.</returns>
    </member>
    <member name="T:RestFoundation.ServiceProxy.ProxyWebClient">
      <summary>
            Represents a web client for the service proxy.
            </summary>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyWebClient.GetWebRequest(System.Uri)">
      <summary>
            Returns a <see cref="T:System.Net.WebRequest" /> object for the specified resource.
            </summary>
      <returns>
            A new <see cref="T:System.Net.WebRequest" /> object for the specified resource.
            </returns>
      <param name="address">A <see cref="T:System.Uri" /> that identifies the resource to request.</param>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyWebClient.GetWebResponse(System.Net.WebRequest)">
      <summary>
            Returns the <see cref="T:System.Net.WebResponse" /> for the specified <see cref="T:System.Net.WebRequest" />.
            </summary>
      <returns>
            A <see cref="T:System.Net.WebResponse" /> containing the response for the specified <see cref="T:System.Net.WebRequest" />.
            </returns>
      <param name="request">A <see cref="T:System.Net.WebRequest" /> that is used to obtain the response. </param>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyWebClient.GetWebResponse(System.Net.WebRequest,System.IAsyncResult)">
      <summary>
            Returns the <see cref="T:System.Net.WebResponse" /> for the specified <see cref="T:System.Net.WebRequest" />
            using the specified <see cref="T:System.IAsyncResult" />.
            </summary>
      <returns>
            A <see cref="T:System.Net.WebResponse" /> containing the response for the specified <see cref="T:System.Net.WebRequest" />.
            </returns>
      <param name="request">A <see cref="T:System.Net.WebRequest" /> that is used to obtain the response.</param>
      <param name="result">
            An <see cref="T:System.IAsyncResult" /> object obtained from a previous call to
            <see cref="M:System.Net.WebRequest.BeginGetResponse(System.AsyncCallback,System.Object)" />.
            </param>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyWebClient.Dispose(System.Boolean)">
      <summary>
            Releases the unmanaged resources used by the <see cref="T:System.ComponentModel.Component" />
            and optionally releases the managed resources.
            </summary>
      <param name="disposing">
            true to release both managed and unmanaged resources; false to release only unmanaged resources.
            </param>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyWebClient.HeadOnly">
      <summary>
            Gets or sets a value indicating whether the request should be done with the HEAD HTTP method.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyWebClient.Options">
      <summary>
            Gets or sets a value indicating whether the request should be done with the OPTIONS HTTP method.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyWebClient.WebResponse">
      <summary>
            Gets the service proxy web response.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyWebClient.ResponseHeaders">
      <summary>
            Gets the response headers.
            </summary>
    </member>
    <member name="T:RestFoundation.ServiceProxy.ProxyWebResponse">
      <summary>
            Represents a web response class for the service proxy.
            </summary>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyWebResponse.#ctor(System.Net.WebResponse)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.ServiceProxy.ProxyWebResponse" /> class.
            </summary>
      <param name="response">The web response.</param>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyWebResponse.GetResponseStream">
      <summary>
            Returns the data stream from the Internet resource.
            </summary>
      <returns>
            An instance of the <see cref="T:System.IO.Stream" /> class for reading data from the Internet resource.
            </returns>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyWebResponse.Close">
      <summary>
            Closes the response stream.
            </summary>
    </member>
    <member name="M:RestFoundation.ServiceProxy.ProxyWebResponse.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with the data that is needed to serialize the target object.
            </summary>
      <param name="serializationInfo">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> to populate with data.</param>
      <param name="streamingContext">A <see cref="T:System.Runtime.Serialization.StreamingContext" /> that specifies the destination for this serialization.</param>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyWebResponse.ProtocolVersion">
      <summary>
            Gets the HTTP protocol version.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyWebResponse.StatusCode">
      <summary>
            Gets the HTTP status code.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyWebResponse.StatusDescription">
      <summary>
            Gets the HTTP status description.
            </summary>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyWebResponse.ContentLength">
      <summary>
            Gets or sets the content length of data being received.
            </summary>
      <returns>
            The number of bytes returned from the Internet resource.
            </returns>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyWebResponse.ContentType">
      <summary>
            Gets or sets the content type of the data being received.
            </summary>
      <returns>
            A string that contains the content type of the response.
            </returns>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyWebResponse.Headers">
      <summary>
            Gets a collection of header name-value pairs associated with this request.
            </summary>
      <returns>
            An instance of the <see cref="T:System.Net.WebHeaderCollection" /> class that contains header values associated with this response.
            </returns>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyWebResponse.IsFromCache">
      <summary>
            Gets a <see cref="T:System.Boolean" /> value that indicates whether this response was obtained from the cache.
            </summary>
      <returns>
            true if the response was taken from the cache; otherwise, false.
            </returns>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyWebResponse.IsMutuallyAuthenticated">
      <summary>
            Gets a <see cref="T:System.Boolean" /> value that indicates whether mutual authentication occurred.
            </summary>
      <returns>
            true if both client and server were authenticated; otherwise, false.
            </returns>
    </member>
    <member name="P:RestFoundation.ServiceProxy.ProxyWebResponse.ResponseUri">
      <summary>
            Gets the URI of the Internet resource that actually responded to the request.
            </summary>
      <returns>
            An instance of the <see cref="T:System.Uri" /> class that contains the URI of the Internet resource that actually responded to the request.
            </returns>
    </member>
    <member name="T:RestFoundation.Runtime.ResourceOutputFormatter">
      <summary>
            Represents a resource output formatter that adds whitespace to improve JSON/XML readability.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.ResourceOutputFormatter.FormatJson(System.String)">
      <summary>
            Formats the input JSON with whitespace.
            </summary>
      <param name="input">The input JSON string</param>
      <returns>The formatted JSON output.</returns>
    </member>
    <member name="M:RestFoundation.Runtime.ResourceOutputFormatter.FormatXml(System.String)">
      <summary>
            Formats the input XML with whitespace.
            </summary>
      <param name="input">The input XML string</param>
      <returns>The formatted XML output.</returns>
    </member>
    <member name="T:RestFoundation.ServiceProxy.XmlSchemasExtensions">
      <summary>
            Contains extensions for the <see cref="T:System.Xml.Serialization.XmlSchemas" /> class.
            </summary>
    </member>
    <member name="M:RestFoundation.ServiceProxy.XmlSchemasExtensions.Serialize(System.Xml.Serialization.XmlSchemas)">
      <summary>
            Serializes schemas into a list of <see cref="T:System.String" /> objects.
            </summary>
      <param name="schemas">The schema colleciton.</param>
      <returns>A list of stringified schemas.</returns>
    </member>
    <member name="T:RestFoundation.Runtime.ServiceRuntimeException">
      <summary>
            Represents a service runtime aggregate exception. It should not be thrown from
            the user code.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.ServiceRuntimeException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Runtime.ServiceRuntimeException" /> class.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.ServiceRuntimeException.#ctor(System.Exception[])">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Runtime.ServiceRuntimeException" /> class with the provided
            inner exceptions.
            </summary>
      <param name="innerExceptions">An array of inner exceptions.</param>
    </member>
    <member name="M:RestFoundation.Runtime.ServiceRuntimeException.#ctor(System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Runtime.ServiceRuntimeException" /> class with the provided
            inner exceptions.
            </summary>
      <param name="innerExceptions">A sequence of inner exceptions.</param>
    </member>
    <member name="M:RestFoundation.Runtime.ServiceRuntimeException.#ctor(System.String,System.Exception[])">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Runtime.ServiceRuntimeException" /> class with the provided
            message and inner exceptions.
            </summary>
      <param name="message">The exception message.</param>
      <param name="innerExceptions">An array of inner exceptions.</param>
    </member>
    <member name="M:RestFoundation.Runtime.ServiceRuntimeException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Exception})">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Runtime.ServiceRuntimeException" /> class with the provided
            message and inner exceptions.
            </summary>
      <param name="message">The exception message.</param>
      <param name="innerExceptions">A sequence of inner exceptions.</param>
    </member>
    <member name="M:RestFoundation.Runtime.ServiceRuntimeException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Sets the <see cref="T:System.Runtime.Serialization.SerializationInfo" /> with information about the exception.
            </summary>
      <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.
            </param>
      <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.
            </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:RestFoundation.Runtime.ServiceRuntimeException.InnerExceptions">
      <summary>
            Gets a sequence of inner exception.
            </summary>
    </member>
    <member name="T:RestFoundation.ServiceOperationUri">
      <summary>
            Represents a service operation URL.
            </summary>
    </member>
    <member name="M:RestFoundation.ServiceOperationUri.#ctor(System.Uri,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.ServiceOperationUri" /> class.
            </summary>
      <param name="serviceUrl">The service URL.</param>
      <param name="operationUrl">The operation URL</param>
    </member>
    <member name="M:RestFoundation.ServiceOperationUri.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.ServiceOperationUri" /> class with serialized data.
            </summary>
      <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.
            </param>
      <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.
            </param>
    </member>
    <member name="M:RestFoundation.ServiceOperationUri.ToAbsoluteUrl(System.String)">
      <summary>
            Returns a converted relative URL as an absolute URL.
            </summary>
      <param name="url">The relative URL.</param>
      <returns>A corresponding absolute URL.</returns>
    </member>
    <member name="M:RestFoundation.ServiceOperationUri.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Sets the <see cref="T:RestFoundation.ServiceOperationUri" /> with information about the exception.
            </summary>
      <param name="serializationInfo">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.
            </param>
      <param name="streamingContext">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.
            </param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:RestFoundation.ServiceOperationUri.OperationUrl">
      <summary>
            Gets the full service operation URL.
            </summary>
    </member>
    <member name="T:RestFoundation.Runtime.SafeConvert">
      <summary>
            Represent a safe type converter.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.SafeConvert.TryChangeType(System.Object,System.Type,System.Object@)">
      <summary>
            Returns a value indicating whether the provided value could be changed to the specified
            conversion type.
            </summary>
      <param name="value">The value.</param>
      <param name="conversionType">The conversion type.</param>
      <param name="changedValue">
            The value casted into the conversion type, or null if the type could not be changed.
            </param>
      <returns>The changed value</returns>
    </member>
    <member name="T:RestFoundation.Runtime.ServiceMethodInvoker">
      <summary>
            Represents a service method invoker.
            </summary>
    </member>
    <member name="M:RestFoundation.Runtime.ServiceMethodInvoker.#ctor(RestFoundation.IServiceBehaviorInvoker,RestFoundation.IParameterValueProvider,RestFoundation.IResultWrapper)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Runtime.ServiceMethodInvoker" /> class.
            </summary>
      <param name="behaviorInvoker">The service behavior invoker.</param>
      <param name="parameterValueProvider">The parameter value provider.</param>
      <param name="resultWrapper">The service method result wrapper.</param>
    </member>
    <member name="M:RestFoundation.Runtime.ServiceMethodInvoker.InvokeAsync(RestFoundation.Runtime.Handlers.IRestServiceHandler,System.Object,System.Reflection.MethodInfo)">
      <summary>
            Invokes the service method.
            </summary>
      <param name="handler">The REST handler associated with the HTTP request.</param>
      <param name="service">The service instance.</param>
      <param name="method">The service method.</param>
      <returns>A task that invokes the service method.</returns>
    </member>
    <member name="T:RestFoundation.HttpMethod">
      <summary>
            Defines HTTP methods supported by services.
            </summary>
    </member>
    <member name="F:RestFoundation.HttpMethod.Get">
      <summary>
            GET
            </summary>
    </member>
    <member name="F:RestFoundation.HttpMethod.Post">
      <summary>
            POST
            </summary>
    </member>
    <member name="F:RestFoundation.HttpMethod.Put">
      <summary>
            PUT
            </summary>
    </member>
    <member name="F:RestFoundation.HttpMethod.Patch">
      <summary>
            PATCH
            </summary>
    </member>
    <member name="F:RestFoundation.HttpMethod.Delete">
      <summary>
            DELETE
            </summary>
    </member>
    <member name="F:RestFoundation.HttpMethod.Head">
      <summary>
            HEAD
            </summary>
    </member>
    <member name="F:RestFoundation.HttpMethod.Options">
      <summary>
            OPTIONS
            </summary>
    </member>
    <member name="T:RestFoundation.Results.StatusResult">
      <summary>
            Represents an HTTP response status result.
            </summary>
    </member>
    <member name="M:RestFoundation.Results.StatusResult.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Results.StatusResult" /> class.
            </summary>
    </member>
    <member name="M:RestFoundation.Results.StatusResult.Execute(RestFoundation.IServiceContext)">
      <summary>
            Executes the result against the provided service context.
            </summary>
      <param name="context">The service context.</param>
    </member>
    <member name="M:RestFoundation.Results.StatusResult.IsSuccessStatusCode">
      <summary>
            Gets a <see cref="T:System.Boolean" /> indicating whether the status code was successful.
            </summary>
      <returns>
            true if the status code is in the 200-299 range; otherwise false.
            </returns>
    </member>
    <member name="P:RestFoundation.Results.StatusResult.ResponseHeaders">
      <summary>
            Gets a dictionary of response headers to set along with the status code.
            </summary>
    </member>
    <member name="P:RestFoundation.Results.StatusResult.StatusCode">
      <summary>
            Gets or sets an HTTP status code.
            </summary>
    </member>
    <member name="P:RestFoundation.Results.StatusResult.StatusDescription">
      <summary>
            Gets or sets an HTTP status description.
            </summary>
    </member>
    <member name="T:RestFoundation.UnitTesting.MockHandlerFactory">
      <summary>
            Represents a mock handler factory.
            </summary>
    </member>
    <member name="M:RestFoundation.UnitTesting.MockHandlerFactory.Create``1(System.String,System.Linq.Expressions.Expression{System.Action{``0}})">
      <summary>
            Creates a REST handler that executes that provided service method at the specified virtual URL.
            </summary>
      <typeparam name="T">The service contract type.</typeparam>
      <param name="virtualUrl">The virtual service URL.</param>
      <param name="serviceMethodDelegate">The service method delegate.</param>
      <returns>The REST handler./</returns>
    </member>
    <member name="M:RestFoundation.UnitTesting.MockHandlerFactory.Create``1(System.String,System.Linq.Expressions.Expression{System.Action{``0}},System.Nullable{RestFoundation.HttpMethod})">
      <summary>
            Creates a REST handler that executes that provided service method at the specified virtual URL.
            </summary>
      <typeparam name="T">The service contract type.</typeparam>
      <param name="virtualUrl">The virtual service URL.</param>
      <param name="serviceMethodDelegate">The service method delegate.</param>
      <param name="httpMethod">The HTTP method.</param>
      <returns>The REST handler./</returns>
    </member>
    <member name="M:RestFoundation.UnitTesting.MockHandlerFactory.SetResource(System.Object,RestFoundation.Client.RestResourceType)">
      <summary>
            Sets a response object of the provided type as the body of the request.
            </summary>
      <param name="resource">The resource object.</param>
      <param name="resourceType">The resource type (JSON or XML).</param>
      <exception cref="T:System.InvalidOperationException">If the HTTP method does not support resources/body content.</exception>
    </member>
    <member name="M:RestFoundation.UnitTesting.MockHandlerFactory.Dispose">
      <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:RestFoundation.UnitTesting.MockRestHandler">
      <summary>
            Represents a mock REST handler.
            </summary>
    </member>
    <member name="M:RestFoundation.UnitTesting.MockRestHandler.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.UnitTesting.MockRestHandler" /> class.
            </summary>
    </member>
    <member name="M:RestFoundation.UnitTesting.MockRestHandler.Equals(RestFoundation.UnitTesting.MockRestHandler)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:RestFoundation.UnitTesting.MockRestHandler.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:RestFoundation.UnitTesting.MockRestHandler.GetHashCode">
      <summary>
            Serves as a hash function for a particular type. 
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="T:RestFoundation.UnitTesting.HttpMethodBuilder">
      <summary>
            Represents an HTTP method builder for route asserts.
            </summary>
    </member>
    <member name="M:RestFoundation.UnitTesting.HttpMethodBuilder.WithHttpMethod(RestFoundation.HttpMethod)">
      <summary>
            Specifies an HTTP method for a route assert.
            </summary>
      <param name="httpMethod">The HTTP method.</param>
      <returns>The route validator builder.</returns>
    </member>
    <member name="T:RestFoundation.UnitTesting.MockHttpRequest">
      <summary>
            Represents a mock HTTP request.
            </summary>
    </member>
    <member name="P:RestFoundation.UnitTesting.MockHttpRequest.Context">
      <summary>
            Gets the underlying <see cref="T:System.Web.HttpContextBase" /> instance.
            </summary>
    </member>
    <member name="T:RestFoundation.UnitTesting.MockHttpResponse">
      <summary>
            Represents a mock HTTP response.
            </summary>
    </member>
    <member name="M:RestFoundation.UnitTesting.MockHttpResponse.#ctor(RestFoundation.IHttpResponseOutput)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.UnitTesting.MockHttpResponse" /> class.
            </summary>
      <param name="output">The HTTP response output.</param>
    </member>
    <member name="P:RestFoundation.UnitTesting.MockHttpResponse.Context">
      <summary>
            Gets the underlying <see cref="T:System.Web.HttpContextBase" /> instance.
            </summary>
    </member>
    <member name="T:RestFoundation.UnitTesting.MockHttpResponseOutput">
      <summary>
            Represents a mock HTTP response output.
            </summary>
    </member>
    <member name="M:RestFoundation.UnitTesting.MockHttpResponseOutput.#ctor(RestFoundation.ILogWriter)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.UnitTesting.MockHttpResponseOutput" /> class.
            </summary>
      <param name="logWriter">The log writer.</param>
    </member>
    <member name="P:RestFoundation.UnitTesting.MockHttpResponseOutput.Context">
      <summary>
            Gets the underlying <see cref="T:System.Web.HttpContextBase" /> instance.
            </summary>
    </member>
    <member name="T:RestFoundation.UnitTesting.MockServiceContext">
      <summary>
            Represents a mock service context.
            </summary>
    </member>
    <member name="M:RestFoundation.UnitTesting.MockServiceContext.#ctor(RestFoundation.IHttpRequest,RestFoundation.IHttpResponse,RestFoundation.IServiceCache)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.UnitTesting.MockServiceContext" /> class.
            </summary>
      <param name="request">The HTTP request.</param>
      <param name="response">The HTTP response.</param>
      <param name="cache">The service cache.</param>
    </member>
    <member name="P:RestFoundation.UnitTesting.MockServiceContext.Context">
      <summary>
            Gets the underlying <see cref="T:System.Web.HttpContextBase" /> instance.
            </summary>
    </member>
    <member name="T:RestFoundation.UnitTesting.RouteAssert">
      <summary>
            Represents a class to test routes.
            </summary>
    </member>
    <member name="M:RestFoundation.UnitTesting.RouteAssert.Url(System.String)">
      <summary>
            Specifies the route relative URL to test.
            </summary>
      <param name="virtualUrl">The virtual service URL.</param>
      <returns>The HTTP method builder.</returns>
    </member>
    <member name="T:RestFoundation.UnitTesting.RouteAssertException">
      <summary>
            Represents a failed route assert exception.
            </summary>
    </member>
    <member name="M:RestFoundation.UnitTesting.RouteAssertException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.UnitTesting.RouteAssertException" /> class.
            </summary>
    </member>
    <member name="M:RestFoundation.UnitTesting.RouteAssertException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.UnitTesting.RouteAssertException" /> class with the provided message.
            </summary>
      <param name="message">The exception message.</param>
    </member>
    <member name="M:RestFoundation.UnitTesting.RouteAssertException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.UnitTesting.RouteAssertException" /> class with the provided message
            and a reference to the exception that is the cause of the current exception.
            </summary>
      <param name="message">The exception message.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference.</param>
    </member>
    <member name="M:RestFoundation.UnitTesting.RouteAssertException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.UnitTesting.RouteAssertException" /> class with serialized data.
            </summary>
      <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.
            </param>
      <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.
            </param>
      <exception cref="T:System.Runtime.Serialization.SerializationException">
            The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0).
            </exception>
    </member>
    <member name="T:RestFoundation.UnitTesting.RouteValidatorBuilder">
      <summary>
            Represents a route validator builder.
            </summary>
    </member>
    <member name="M:RestFoundation.UnitTesting.RouteValidatorBuilder.FailsOnInvocation``1(System.Linq.Expressions.Expression{System.Action{``0}})">
      <summary>
            Ensures a route assert expected to fail does not invoke successfully.
            </summary>
      <typeparam name="T">The service contract type.</typeparam>
      <param name="serviceMethodDelegate">The service method delegate.</param>
      <exception cref="T:RestFoundation.UnitTesting.RouteAssertException">If the route gets invoked successfully.</exception>
    </member>
    <member name="M:RestFoundation.UnitTesting.RouteValidatorBuilder.FailsOnInvocation``1(System.Linq.Expressions.Expression{System.Action{``0}},System.String)">
      <summary>
            Ensures a route assert expected to fail does not invoke successfully. An expected exception message
            can be provided for more detailed assert statements.
            </summary>
      <typeparam name="T">The service contract type.</typeparam>
      <param name="serviceMethodDelegate">The service method delegate.</param>
      <param name="exceptionMessage">The expected <see cref="T:RestFoundation.UnitTesting.RouteAssertException" /> message.</param>
      <exception cref="T:RestFoundation.UnitTesting.RouteAssertException">
            If the route gets invoked successfully; or the expected exception message does not match the actual
            exception message.
            </exception>
    </member>
    <member name="M:RestFoundation.UnitTesting.RouteValidatorBuilder.Invokes``1(System.Linq.Expressions.Expression{System.Action{``0}})">
      <summary>
            Specifies the service method delegate that should be invoked by the asserted route.
            </summary>
      <typeparam name="T">The service contract type.</typeparam>
      <param name="serviceMethodDelegate">The service method delegate.</param>
      <exception cref="T:RestFoundation.UnitTesting.RouteAssertException">If the route does not match the invoked delegate.</exception>
    </member>
    <member name="T:RestFoundation.Url">
      <summary>
            Represents predefined strongly-typed URLs.
            </summary>
    </member>
    <member name="F:RestFoundation.Url.Root">
      <summary>
            Gets the root service URL.
            </summary>
    </member>
    <member name="T:RestFoundation.UrlAttribute">
      <summary>
            Represents URL metadata associated with the service methods.
            </summary>
    </member>
    <member name="M:RestFoundation.UrlAttribute.#ctor(System.String,RestFoundation.HttpMethod[])">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.UrlAttribute" /> class with the URL template
            and HTTP methods.
            </summary>
      <param name="urlTemplate">The URL template.</param>
      <param name="httpMethods">An array of HTTP methods.</param>
      <exception cref="T:System.InvalidOperationException">If the OPTIONS HTTP method is provided explicitly.</exception>
    </member>
    <member name="M:RestFoundation.UrlAttribute.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.UrlAttribute" /> class with the URL template
            and HTTP methods.
            </summary>
      <param name="urlTemplate">The URL template.</param>
      <param name="httpMethods">An comma separated list of HTTP methods as a <see cref="T:System.String" />.</param>
      <exception cref="T:System.InvalidOperationException">If the OPTIONS HTTP method is provided explicitly.</exception>
    </member>
    <member name="P:RestFoundation.UrlAttribute.HttpMethods">
      <summary>
            Gets a sequence of allowed HTTP methods.
            </summary>
    </member>
    <member name="P:RestFoundation.UrlAttribute.Priority">
      <summary>
            Gets or sets the URL priority. A larger priority puts the URL route higher in the route collection.
            0 is the default priority.
            </summary>
    </member>
    <member name="P:RestFoundation.UrlAttribute.UrlTemplate">
      <summary>
            Gets the URL template.
            </summary>
    </member>
    <member name="P:RestFoundation.UrlAttribute.WebPageUrl">
      <summary>
            Gets or sets the supporting web page URL. It can be a virtual path to an existing
            web forms page in the project or an external URL. This parameter is only used for
            service methods that are called through the HTTP GET or HEAD methods.
            </summary>
    </member>
    <member name="T:RestFoundation.ParameterConstraintAttribute">
      <summary>
            Represents a regular expression constraint for a service method parameter.
            </summary>
    </member>
    <member name="M:RestFoundation.ParameterConstraintAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.ParameterConstraintAttribute" /> class.
            </summary>
      <param name="pattern">The regular expression pattern to match.</param>
    </member>
    <member name="P:RestFoundation.ParameterConstraintAttribute.Pattern">
      <summary>
            Gets the regular expression pattern of the constraint.
            </summary>
    </member>
    <member name="T:System.ComponentModel.DataAnnotations.ValidateObjectAttribute">
      <summary>
            Marks an inner property of a object to be validated as a part of the object
            validation. The property type must be a class or a struct that can be validated.
            </summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.ValidateObjectAttribute.IsValid(System.Object,System.ComponentModel.DataAnnotations.ValidationContext)">
      <summary>
            Validates the specified value with respect to the current validation attribute.
            </summary>
      <returns>
            An instance of the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult" /> class. 
            </returns>
      <param name="value">The value to validate.</param>
      <param name="validationContext">The context information about the validation operation.</param>
    </member>
    <member name="T:RestFoundation.Validation.ValidationError">
      <summary>
            Represents a validation error.
            </summary>
    </member>
    <member name="M:RestFoundation.Validation.ValidationError.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Validation.ValidationError" /> struct.
            </summary>
      <param name="message">The error message.</param>
    </member>
    <member name="M:RestFoundation.Validation.ValidationError.#ctor(System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:RestFoundation.Validation.ValidationError" /> struct.
            </summary>
      <param name="propertyName">The property name.</param>
      <param name="message">The error message.</param>
    </member>
    <member name="M:RestFoundation.Validation.ValidationError.op_Equality(RestFoundation.Validation.ValidationError,RestFoundation.Validation.ValidationError)">
      <summary>
            Compares two <see cref="T:RestFoundation.Validation.ValidationError" /> objects for equality.
            </summary>
      <param name="left">The first object</param>
      <param name="right">The second object</param>
      <returns>true if both objects are equivalent; otherwise, false.</returns>
    </member>
    <member name="M:RestFoundation.Validation.ValidationError.op_Inequality(RestFoundation.Validation.ValidationError,RestFoundation.Validation.ValidationError)">
      <summary>
            Compares two <see cref="T:RestFoundation.Validation.ValidationError" /> objects for inequality.
            </summary>
      <param name="left">The first object</param>
      <param name="right">The second object</param>
      <returns>true if both objects are not equivalent; otherwise, false.</returns>
    </member>
    <member name="M:RestFoundation.Validation.ValidationError.Equals(RestFoundation.Validation.ValidationError)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:RestFoundation.Validation.ValidationError.Equals(System.Object)">
      <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
      <returns>
            true if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
      <param name="obj">Another object to compare to.</param>
      <filterpriority>2</filterpriority>
    </member>
    <member name="M:RestFoundation.Validation.ValidationError.GetHashCode">
      <summary>
            Returns the hash code for this instance.
            </summary>
      <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
      <filterpriority>2</filterpriority>
    </member>
    <member name="P:RestFoundation.Validation.ValidationError.PropertyName">
      <summary>
            Gets the property name for the error.
            </summary>
    </member>
    <member name="P:RestFoundation.Validation.ValidationError.Message">
      <summary>
            Gets the error message.
            </summary>
    </member>
    <member name="T:RestFoundation.Configuration.XmlFormatterSettings">
      <summary>
            Contains settings used by XML formatters and results.
            </summary>
    </member>
    <member name="P:RestFoundation.Configuration.XmlFormatterSettings.Namespace">
      <summary>
            Gets or sets the XML namespace
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Bson.BsonObjectId">
      <summary>
            Represents a BSON Oid (object id).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonObjectId.#ctor(System.Byte[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonObjectId" /> class.
            </summary>
      <param name="value">The Oid value.</param>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonObjectId.Value">
      <summary>
            Gets or sets the value of the Oid.
            </summary>
      <value>The value of the Oid.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonReader.State">
      <summary>
            Specifies the state of the reader.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReader" /> class with the specified <see cref="T:System.IO.TextReader" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>true if the next token was read successfully; false if there are no more tokens to read.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsString">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTime">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Skip">
      <summary>
            Skips the children of the current token.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken)">
      <summary>
            Sets the current token.
            </summary>
      <param name="newToken">The new token.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SetToken(Newtonsoft.Json.JsonToken,System.Object)">
      <summary>
            Sets the current token and value.
            </summary>
      <param name="newToken">The new token.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.SetStateBasedOnCurrent">
      <summary>
            Sets the state based on current token type.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Dispose(System.Boolean)">
      <summary>
            Releases unmanaged and - optionally - managed resources
            </summary>
      <param name="disposing">
        <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReader.Close">
      <summary>
            Changes the <see cref="T:Newtonsoft.Json.JsonReader.State" /> to Closed. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.CurrentState">
      <summary>
            Gets the current reader state.
            </summary>
      <value>The current reader state.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.CloseInput">
      <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader" /> should be closed when the reader is closed.
            </summary>
      <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader" /> when
            the reader is closed; otherwise false. The default is true.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.QuoteChar">
      <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.DateTimeZoneHandling">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> time zones are handling when reading JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.DateParseHandling">
      <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.FloatParseHandling">
      <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.MaxDepth">
      <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.TokenType">
      <summary>
            Gets the type of the current JSON token. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Value">
      <summary>
            Gets the text value of the current JSON token.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.ValueType">
      <summary>
            Gets The Common Language Runtime (CLR) type for the current JSON token.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Depth">
      <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
      <value>The depth of the current token in the JSON document.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Path">
      <summary>
            Gets the path of the current JSON token. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonReader.Culture">
      <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Bson.BsonReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="stream">The stream.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="reader">The reader.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.Stream,System.Boolean,System.DateTimeKind)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="stream">The stream.</param>
      <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
      <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.#ctor(System.IO.BinaryReader,System.Boolean,System.DateTimeKind)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonReader" /> class.
            </summary>
      <param name="reader">The reader.</param>
      <param name="readRootValueAsArray">if set to <c>true</c> the root object will be read as a JSON array.</param>
      <param name="dateTimeKindHandling">The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsString">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsDateTime">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>
            A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonReader.Close">
      <summary>
            Changes the <see cref="T:Newtonsoft.Json.JsonReader.State" /> to Closed.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonReader.JsonNet35BinaryCompatibility">
      <summary>
            Gets or sets a value indicating whether binary data reading should compatible with incorrect Json.NET 3.5 written binary.
            </summary>
      <value>
        <c>true</c> if binary data reading will be compatible with incorrect Json.NET 3.5 written binary; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonReader.ReadRootValueAsArray">
      <summary>
            Gets or sets a value indicating whether the root object will be read as a JSON array.
            </summary>
      <value>
        <c>true</c> if the root object will be read as a JSON array; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonReader.DateTimeKindHandling">
      <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.
            </summary>
      <value>The <see cref="T:System.DateTimeKind" /> used when reading <see cref="T:System.DateTime" /> values from BSON.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.#ctor">
      <summary>
            Creates an instance of the <c>JsonWriter</c> class. 
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.Close">
      <summary>
            Closes this stream and the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndObject">
      <summary>
            Writes the end of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndArray">
      <summary>
            Writes the end of an array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEndConstructor">
      <summary>
            Writes the end constructor.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WritePropertyName(System.String,System.Boolean)">
      <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd">
      <summary>
            Writes the end of the current Json object or array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader)">
      <summary>
            Writes the current <see cref="T:Newtonsoft.Json.JsonReader" /> token and its children.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read the token from.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteToken(Newtonsoft.Json.JsonReader,System.Boolean)">
      <summary>
            Writes the current <see cref="T:Newtonsoft.Json.JsonReader" /> token.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read the token from.</param>
      <param name="writeChildren">A flag indicating whether the current token's children should be written.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the specified end token.
            </summary>
      <param name="token">The end token to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteIndent">
      <summary>
            Writes indent characters.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValueDelimiter">
      <summary>
            Writes the JSON value delimiter.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteIndentSpace">
      <summary>
            Writes an indent space.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON without changing the writer's state.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteRawValue(System.String)">
      <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Guid)">
      <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.TimeSpan)">
      <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int32})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt32})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int64})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt64})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Single})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Double})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Boolean})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Int16})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.UInt16})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Char})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Byte})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.SByte})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Decimal})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTime})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.DateTimeOffset})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.Guid})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Nullable{System.TimeSpan})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Uri)">
      <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteValue(System.Object)">
      <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriter.WriteWhitespace(System.String)">
      <summary>
            Writes out the given white space.
            </summary>
      <param name="ws">The string of white space characters.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.CloseOutput">
      <summary>
            Gets or sets a value indicating whether the underlying stream or
            <see cref="T:System.IO.TextReader" /> should be closed when the writer is closed.
            </summary>
      <value>
            true to close the underlying stream or <see cref="T:System.IO.TextReader" /> when
            the writer is closed; otherwise false. The default is true.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Top">
      <summary>
            Gets the top.
            </summary>
      <value>The top.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.WriteState">
      <summary>
            Gets the state of the writer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Path">
      <summary>
            Gets the path of the writer. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Formatting">
      <summary>
            Indicates how JSON text output is formatted.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.DateFormatHandling">
      <summary>
            Get or set how dates are written to JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.DateTimeZoneHandling">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> time zones are handling when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.StringEscapeHandling">
      <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.FloatFormatHandling">
      <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" />,
            are written to JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.DateFormatString">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> and <see cref="T:System.DateTimeOffset" /> values are formatting when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriter.Culture">
      <summary>
            Gets or sets the culture used when writing JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Bson.BsonWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating JSON data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonWriter" /> class.
            </summary>
      <param name="stream">The stream.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.#ctor(System.IO.BinaryWriter)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Bson.BsonWriter" /> class.
            </summary>
      <param name="writer">The writer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the end.
            </summary>
      <param name="token">The token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRawValue(System.String)">
      <summary>
            Writes raw JSON where a value is expected and updates the writer's state.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.Close">
      <summary>
            Closes this stream and the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Object)">
      <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Guid)">
      <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.TimeSpan)">
      <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteValue(System.Uri)">
      <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteObjectId(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value that represents a BSON object id.
            </summary>
      <param name="value">The Object ID value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Bson.BsonWriter.WriteRegex(System.String,System.String)">
      <summary>
            Writes a BSON regex.
            </summary>
      <param name="pattern">The regex pattern.</param>
      <param name="options">The regex options.</param>
    </member>
    <member name="P:Newtonsoft.Json.Bson.BsonWriter.DateTimeKindHandling">
      <summary>
            Gets or sets the <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime" /> values to BSON.
            When set to <see cref="F:System.DateTimeKind.Unspecified" /> no conversion will occur.
            </summary>
      <value>The <see cref="T:System.DateTimeKind" /> used when writing <see cref="T:System.DateTime" /> values to BSON.</value>
    </member>
    <member name="T:Newtonsoft.Json.ConstructorHandling">
      <summary>
            Specifies how constructors are used when initializing objects during deserialization by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ConstructorHandling.Default">
      <summary>
            First attempt to use the public default constructor, then fall back to single paramatized constructor, then the non-public default constructor.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ConstructorHandling.AllowNonPublicDefaultConstructor">
      <summary>
            Json.NET will use a non-public default constructor before falling back to a paramatized constructor.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonConverter">
      <summary>
            Converts an object to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverter.GetSchema">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of the JSON produced by the JsonConverter.
            </summary>
      <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of the JSON produced by the JsonConverter.</returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonConverter.CanRead">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can read JSON; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonConverter.CanWrite">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.BinaryConverter">
      <summary>
            Converts a binary value to and from a base 64 string value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BinaryConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BinaryConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BinaryConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.BsonObjectIdConverter">
      <summary>
            Converts a <see cref="T:Newtonsoft.Json.Bson.BsonObjectId" /> to and from JSON and BSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.BsonObjectIdConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.CustomCreationConverter`1">
      <summary>
            Create a custom object
            </summary>
      <typeparam name="T">The object type to convert.</typeparam>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.Create(System.Type)">
      <summary>
            Creates an object which will then be populated by the serializer.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>The created object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.CustomCreationConverter`1.CanWrite">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DataSetConverter">
      <summary>
            Converts a <see cref="T:System.Data.DataSet" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataSetConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataSetConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataSetConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
      <param name="valueType">Type of the value.</param>
      <returns>
        <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DataTableConverter">
      <summary>
            Converts a <see cref="T:System.Data.DataTable" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataTableConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataTableConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DataTableConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
      <param name="valueType">Type of the value.</param>
      <returns>
        <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.DateTimeConverterBase">
      <summary>
            Provides a base class for converting a <see cref="T:System.DateTime" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.DateTimeConverterBase.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.EntityKeyMemberConverter">
      <summary>
            Converts an Entity Framework EntityKey to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.EntityKeyMemberConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.ExpandoObjectConverter">
      <summary>
            Converts an ExpandoObject to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.ExpandoObjectConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.ExpandoObjectConverter.CanWrite">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON.
            </summary>
      <value>
        <c>true</c> if this <see cref="T:Newtonsoft.Json.JsonConverter" /> can write JSON; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.IsoDateTimeConverter">
      <summary>
            Converts a <see cref="T:System.DateTime" /> to and from the ISO 8601 date format (e.g. 2008-04-12T12:53Z).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.IsoDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeStyles">
      <summary>
            Gets or sets the date time styles used when converting a date to and from JSON.
            </summary>
      <value>The date time styles used when converting a date to and from JSON.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.DateTimeFormat">
      <summary>
            Gets or sets the date time format used when converting a date to and from JSON.
            </summary>
      <value>The date time format used when converting a date to and from JSON.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.IsoDateTimeConverter.Culture">
      <summary>
            Gets or sets the culture used when converting a date to and from JSON.
            </summary>
      <value>The culture used when converting a date to and from JSON.</value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter">
      <summary>
            Converts a <see cref="T:System.DateTime" /> to and from a JavaScript date constructor (e.g. new Date(52231943)).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.JavaScriptDateTimeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing property value of the JSON that is being converted.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.KeyValuePairConverter">
      <summary>
            Converts a <see cref="T:System.Collections.Generic.KeyValuePair`2" /> to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.KeyValuePairConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.RegexConverter">
      <summary>
            Converts a <see cref="T:System.Text.RegularExpressions.Regex" /> to and from JSON and BSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.RegexConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.RegexConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.RegexConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.StringEnumConverter">
      <summary>
            Converts an <see cref="T:System.Enum" /> to and from its name string value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.StringEnumConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.StringEnumConverter.CamelCaseText">
      <summary>
            Gets or sets a value indicating whether the written enum text should be camel case.
            </summary>
      <value>
        <c>true</c> if the written enum text will be camel case; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Converters.VersionConverter">
      <summary>
            Converts a <see cref="T:System.Version" /> to and from a string (e.g. "1.2.3.4").
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.VersionConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="value">The value.</param>
      <param name="serializer">The calling serializer.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.VersionConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing property value of the JSON that is being converted.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.VersionConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified object type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>
        <c>true</c> if this instance can convert the specified object type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Converters.XmlNodeConverter">
      <summary>
            Converts XML to and from JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Writes the JSON representation of the object.
            </summary>
      <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
      <param name="serializer">The calling serializer.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Reads the JSON representation of the object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
      <param name="objectType">Type of the object.</param>
      <param name="existingValue">The existing value of object being read.</param>
      <param name="serializer">The calling serializer.</param>
      <returns>The object value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.IsNamespaceAttribute(System.String,System.String@)">
      <summary>
            Checks if the attributeName is a namespace attribute.
            </summary>
      <param name="attributeName">Attribute name to test.</param>
      <param name="prefix">The attribute name prefix if it has one, otherwise an empty string.</param>
      <returns>True if attribute name is for a namespace attribute, otherwise false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Converters.XmlNodeConverter.CanConvert(System.Type)">
      <summary>
            Determines whether this instance can convert the specified value type.
            </summary>
      <param name="valueType">Type of the value.</param>
      <returns>
        <c>true</c> if this instance can convert the specified value type; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.DeserializeRootElementName">
      <summary>
            Gets or sets the name of the root element to insert when deserializing to XML if the JSON structure has produces multiple root elements.
            </summary>
      <value>The name of the deserialize root element.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.WriteArrayAttribute">
      <summary>
            Gets or sets a flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </summary>
      <value>
        <c>true</c> if the array attibute is written to the XML; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Converters.XmlNodeConverter.OmitRootObject">
      <summary>
            Gets or sets a value indicating whether to write the root JSON object.
            </summary>
      <value>
        <c>true</c> if the JSON root object is omitted; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.FloatParseHandling">
      <summary>
            Specifies how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatParseHandling.Double">
      <summary>
            Floating point numbers are parsed to <see cref="F:Newtonsoft.Json.FloatParseHandling.Double" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatParseHandling.Decimal">
      <summary>
            Floating point numbers are parsed to <see cref="F:Newtonsoft.Json.FloatParseHandling.Decimal" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.DateFormatHandling">
      <summary>
            Specifies how dates are formatted when writing JSON text.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateFormatHandling.IsoDateFormat">
      <summary>
            Dates are written in the ISO 8601 format, e.g. "2012-03-21T05:40Z".
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateFormatHandling.MicrosoftDateFormat">
      <summary>
            Dates are written in the Microsoft JSON format, e.g. "\/Date(1198908717056)\/".
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.DateParseHandling">
      <summary>
            Specifies how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON text.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateParseHandling.None">
      <summary>
            Date formatted strings are not parsed to a date type and are read as strings.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateParseHandling.DateTime">
      <summary>
            Date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed to <see cref="F:Newtonsoft.Json.DateParseHandling.DateTime" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateParseHandling.DateTimeOffset">
      <summary>
            Date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed to <see cref="F:Newtonsoft.Json.DateParseHandling.DateTimeOffset" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.DateTimeZoneHandling">
      <summary>
            Specifies how to treat the time value when converting between string and <see cref="T:System.DateTime" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Local">
      <summary>
            Treat as local time. If the <see cref="T:System.DateTime" /> object represents a Coordinated Universal Time (UTC), it is converted to the local time.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Utc">
      <summary>
            Treat as a UTC. If the <see cref="T:System.DateTime" /> object represents a local time, it is converted to a UTC.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateTimeZoneHandling.Unspecified">
      <summary>
            Treat as a local time if a <see cref="T:System.DateTime" /> is being converted to a string.
            If a string is being converted to <see cref="T:System.DateTime" />, convert to a local time if a time zone is specified.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DateTimeZoneHandling.RoundtripKind">
      <summary>
            Time zone information should be preserved when converting.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.DefaultValueHandling">
      <summary>
            Specifies default value handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingObject" title="DefaultValueHandling Class" />
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeDefaultValueHandlingExample" title="DefaultValueHandling Ignore Example" />
      </example>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.Include">
      <summary>
            Include members where the member value is the same as the member's default value when serializing objects.
            Included members are written to JSON. Has no effect when deserializing.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.Ignore">
      <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            so that is is not written to JSON.
            This option will ignore all default values (e.g. <c>null</c> for objects and nullable typesl; <c>0</c> for integers,
            decimals and floating point numbers; and <c>false</c> for booleans). The default value ignored can be changed by
            placing the <see cref="T:System.ComponentModel.DefaultValueAttribute" /> on the property.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.Populate">
      <summary>
            Members with a default value but no JSON will be set to their default value when deserializing.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.DefaultValueHandling.IgnoreAndPopulate">
      <summary>
            Ignore members where the member value is the same as the member's default value when serializing objects
            and sets members to their default value when deserializing.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.FloatFormatHandling">
      <summary>
            Specifies float format handling options when writing special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" /> with <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatFormatHandling.String">
      <summary>
            Write special floating point values as strings in JSON, e.g. "NaN", "Infinity", "-Infinity".
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatFormatHandling.Symbol">
      <summary>
            Write special floating point values as symbols in JSON, e.g. NaN, Infinity, -Infinity.
            Note that this will produce non-valid JSON.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.FloatFormatHandling.DefaultValue">
      <summary>
            Write special floating point values as the property's default value in JSON, e.g. 0.0 for a <see cref="T:System.Double" /> property, null for a <see cref="T:System.Nullable`1" /> property.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Formatting">
      <summary>
            Specifies formatting options for the <see cref="T:Newtonsoft.Json.JsonTextWriter" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Formatting.None">
      <summary>
            No special formatting is applied. This is the default.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Formatting.Indented">
      <summary>
            Causes child objects to be indented according to the <see cref="P:Newtonsoft.Json.JsonTextWriter.Indentation" /> and <see cref="P:Newtonsoft.Json.JsonTextWriter.IndentChar" /> settings.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.IJsonLineInfo">
      <summary>
            Provides an interface to enable a class to return line and position information.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.IJsonLineInfo.HasLineInfo">
      <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
      <returns>
        <c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.IJsonLineInfo.LineNumber">
      <summary>
            Gets the current line number.
            </summary>
      <value>The current line number or 0 if no line information is available (for example, HasLineInfo returns false).</value>
    </member>
    <member name="P:Newtonsoft.Json.IJsonLineInfo.LinePosition">
      <summary>
            Gets the current line position.
            </summary>
      <value>The current line position or 0 if no line information is available (for example, HasLineInfo returns false).</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonContainerAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonContainerAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonContainerAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonContainerAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.Id">
      <summary>
            Gets or sets the id.
            </summary>
      <value>The id.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.Title">
      <summary>
            Gets or sets the title.
            </summary>
      <value>The title.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.Description">
      <summary>
            Gets or sets the description.
            </summary>
      <value>The description.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemConverterType">
      <summary>
            Gets the collection's items converter.
            </summary>
      <value>The collection's items converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.IsReference">
      <summary>
            Gets or sets a value that indicates whether to preserve object references.
            </summary>
      <value>
        <c>true</c> to keep object reference; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemIsReference">
      <summary>
            Gets or sets a value that indicates whether to preserve collection's items references.
            </summary>
      <value>
        <c>true</c> to keep collection's items object references; otherwise, <c>false</c>. The default is <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemReferenceLoopHandling">
      <summary>
            Gets or sets the reference loop handling used when serializing the collection's items.
            </summary>
      <value>The reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonContainerAttribute.ItemTypeNameHandling">
      <summary>
            Gets or sets the type name handling used when serializing the collection's items.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonArrayAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the collection.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonArrayAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with a flag indicating whether the array can contain null items
            </summary>
      <param name="allowNullItems">A flag indicating whether the array can contain null items.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonArrayAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonArrayAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonArrayAttribute.AllowNullItems">
      <summary>
            Gets or sets a value indicating whether null items are allowed in the collection.
            </summary>
      <value>
        <c>true</c> if null items are allowed in the collection; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonConstructorAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to use the specified constructor when deserializing that object.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonConvert">
      <summary>
            Provides methods for converting between common language runtime types and JSON types.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="SerializeObject" title="Serializing and Deserializing JSON with JsonConvert" />
      </example>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.True">
      <summary>
            Represents JavaScript's boolean value true as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.False">
      <summary>
            Represents JavaScript's boolean value false as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.Null">
      <summary>
            Represents JavaScript's null as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.Undefined">
      <summary>
            Represents JavaScript's undefined as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.PositiveInfinity">
      <summary>
            Represents JavaScript's positive infinity as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.NegativeInfinity">
      <summary>
            Represents JavaScript's negative infinity as a string. This field is read-only.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonConvert.NaN">
      <summary>
            Represents JavaScript's NaN as a string. This field is read-only.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTime)">
      <summary>
            Converts the <see cref="T:System.DateTime" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTime,Newtonsoft.Json.DateFormatHandling,Newtonsoft.Json.DateTimeZoneHandling)">
      <summary>
            Converts the <see cref="T:System.DateTime" /> to its JSON string representation using the <see cref="T:Newtonsoft.Json.DateFormatHandling" /> specified.
            </summary>
      <param name="value">The value to convert.</param>
      <param name="format">The format the date will be converted to.</param>
      <param name="timeZoneHandling">The time zone handling when the date is converted to a string.</param>
      <returns>A JSON string representation of the <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset)">
      <summary>
            Converts the <see cref="T:System.DateTimeOffset" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.DateTimeOffset,Newtonsoft.Json.DateFormatHandling)">
      <summary>
            Converts the <see cref="T:System.DateTimeOffset" /> to its JSON string representation using the <see cref="T:Newtonsoft.Json.DateFormatHandling" /> specified.
            </summary>
      <param name="value">The value to convert.</param>
      <param name="format">The format the date will be converted to.</param>
      <returns>A JSON string representation of the <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Boolean)">
      <summary>
            Converts the <see cref="T:System.Boolean" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Char)">
      <summary>
            Converts the <see cref="T:System.Char" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Char" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Enum)">
      <summary>
            Converts the <see cref="T:System.Enum" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Enum" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int32)">
      <summary>
            Converts the <see cref="T:System.Int32" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int16)">
      <summary>
            Converts the <see cref="T:System.Int16" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt16)">
      <summary>
            Converts the <see cref="T:System.UInt16" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt32)">
      <summary>
            Converts the <see cref="T:System.UInt32" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Int64)">
      <summary>
            Converts the <see cref="T:System.Int64" />  to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.UInt64)">
      <summary>
            Converts the <see cref="T:System.UInt64" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Single)">
      <summary>
            Converts the <see cref="T:System.Single" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Double)">
      <summary>
            Converts the <see cref="T:System.Double" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Byte)">
      <summary>
            Converts the <see cref="T:System.Byte" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.SByte)">
      <summary>
            Converts the <see cref="T:System.SByte" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Decimal)">
      <summary>
            Converts the <see cref="T:System.Decimal" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Guid)">
      <summary>
            Converts the <see cref="T:System.Guid" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Guid" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.TimeSpan)">
      <summary>
            Converts the <see cref="T:System.TimeSpan" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.TimeSpan" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Uri)">
      <summary>
            Converts the <see cref="T:System.Uri" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Uri" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String)">
      <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.String,System.Char)">
      <summary>
            Converts the <see cref="T:System.String" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <param name="delimiter">The string delimiter character.</param>
      <returns>A JSON string representation of the <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.ToString(System.Object)">
      <summary>
            Converts the <see cref="T:System.Object" /> to its JSON string representation.
            </summary>
      <param name="value">The value to convert.</param>
      <returns>A JSON string representation of the <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object)">
      <summary>
            Serializes the specified object to a JSON string.
            </summary>
      <param name="value">The object to serialize.</param>
      <returns>A JSON string representation of the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting)">
      <summary>
            Serializes the specified object to a JSON string.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="converters">A collection converters used while serializing.</param>
      <returns>A JSON string representation of the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="converters">A collection converters used while serializing.</param>
      <returns>A JSON string representation of the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObject(System.Object,System.Type,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
      <param name="type">
            The type of the value being serialized.
            This parameter is used when <see cref="T:Newtonsoft.Json.TypeNameHandling" /> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
      <returns>
            A JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object)">
      <summary>
            Asynchronously serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <returns>
            A task that represents the asynchronous serialize operation. The value of the <c>TResult</c> parameter contains a JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object,Newtonsoft.Json.Formatting)">
      <summary>
            Asynchronously serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <returns>
            A task that represents the asynchronous serialize operation. The value of the <c>TResult</c> parameter contains a JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeObjectAsync(System.Object,Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Asynchronously serializes the specified object to a JSON string using a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <param name="value">The object to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="settings">The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to serialize the object.
            If this is null, default serialization settings will be is used.</param>
      <returns>
            A task that represents the asynchronous serialize operation. The value of the <c>TResult</c> parameter contains a JSON string representation of the object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String)">
      <summary>
            Deserializes the JSON to a .NET object.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <returns>The deserialized object from the Json string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON to a .NET object.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type)">
      <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="type">The <see cref="T:System.Type" /> of object being deserialized.</param>
      <returns>The deserialized object from the Json string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String)">
      <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The JSON to deserialize.</param>
      <returns>The deserialized object from the Json string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0)">
      <summary>
            Deserializes the JSON to the given anonymous type.
            </summary>
      <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be infered from the anonymous type passed
            as a parameter.
            </typeparam>
      <param name="value">The JSON to deserialize.</param>
      <param name="anonymousTypeObject">The anonymous type object.</param>
      <returns>The deserialized anonymous type from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeAnonymousType``1(System.String,``0,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON to the given anonymous type.
            </summary>
      <typeparam name="T">
            The anonymous type to deserialize to. This can't be specified
            traditionally and must be infered from the anonymous type passed
            as a parameter.
            </typeparam>
      <param name="value">The JSON to deserialize.</param>
      <param name="anonymousTypeObject">The anonymous type object.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>The deserialized anonymous type from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The JSON to deserialize.</param>
      <param name="converters">Converters to use while deserializing.</param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The object to deserialize.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="type">The type of the object to deserialize.</param>
      <param name="converters">Converters to use while deserializing.</param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObject(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Deserializes the JSON to the specified .NET type.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="type">The type of the object to deserialize to.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>The deserialized object from the JSON string.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync``1(System.String)">
      <summary>
            Asynchronously deserializes the JSON to the specified .NET type.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The JSON to deserialize.</param>
      <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync``1(System.String,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Asynchronously deserializes the JSON to the specified .NET type.
            </summary>
      <typeparam name="T">The type of the object to deserialize to.</typeparam>
      <param name="value">The JSON to deserialize.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync(System.String)">
      <summary>
            Asynchronously deserializes the JSON to the specified .NET type.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeObjectAsync(System.String,System.Type,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Asynchronously deserializes the JSON to the specified .NET type.
            </summary>
      <param name="value">The JSON to deserialize.</param>
      <param name="type">The type of the object to deserialize to.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>
            A task that represents the asynchronous deserialize operation. The value of the <c>TResult</c> parameter contains the deserialized object from the JSON string.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object)">
      <summary>
            Populates the object with values from the JSON string.
            </summary>
      <param name="value">The JSON to populate values from.</param>
      <param name="target">The target object to populate values onto.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.PopulateObject(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Populates the object with values from the JSON string.
            </summary>
      <param name="value">The JSON to populate values from.</param>
      <param name="target">The target object to populate values onto.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.PopulateObjectAsync(System.String,System.Object,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Asynchronously populates the object with values from the JSON string.
            </summary>
      <param name="value">The JSON to populate values from.</param>
      <param name="target">The target object to populate values onto.</param>
      <param name="settings">
            The <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> used to deserialize the object.
            If this is null, default serialization settings will be is used.
            </param>
      <returns>
            A task that represents the asynchronous populate operation.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode)">
      <summary>
            Serializes the XML node to a JSON string.
            </summary>
      <param name="node">The node to serialize.</param>
      <returns>A JSON string of the XmlNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting)">
      <summary>
            Serializes the XML node to a JSON string.
            </summary>
      <param name="node">The node to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <returns>A JSON string of the XmlNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXmlNode(System.Xml.XmlNode,Newtonsoft.Json.Formatting,System.Boolean)">
      <summary>
            Serializes the XML node to a JSON string.
            </summary>
      <param name="node">The node to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="omitRootObject">Omits writing the root object.</param>
      <returns>A JSON string of the XmlNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String)">
      <summary>
            Deserializes the XmlNode from a JSON string.
            </summary>
      <param name="value">The JSON string.</param>
      <returns>The deserialized XmlNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String)">
      <summary>
            Deserializes the XmlNode from a JSON string nested in a root elment.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <returns>The deserialized XmlNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXmlNode(System.String,System.String,System.Boolean)">
      <summary>
            Deserializes the XmlNode from a JSON string nested in a root elment.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <param name="writeArrayAttribute">
            A flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
      <returns>The deserialized XmlNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject)">
      <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string.
            </summary>
      <param name="node">The node to convert to JSON.</param>
      <returns>A JSON string of the XNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting)">
      <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string.
            </summary>
      <param name="node">The node to convert to JSON.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <returns>A JSON string of the XNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.SerializeXNode(System.Xml.Linq.XObject,Newtonsoft.Json.Formatting,System.Boolean)">
      <summary>
            Serializes the <see cref="T:System.Xml.Linq.XNode" /> to a JSON string.
            </summary>
      <param name="node">The node to serialize.</param>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="omitRootObject">Omits writing the root object.</param>
      <returns>A JSON string of the XNode.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String)">
      <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string.
            </summary>
      <param name="value">The JSON string.</param>
      <returns>The deserialized XNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String)">
      <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string nested in a root elment.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <returns>The deserialized XNode</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonConvert.DeserializeXNode(System.String,System.String,System.Boolean)">
      <summary>
            Deserializes the <see cref="T:System.Xml.Linq.XNode" /> from a JSON string nested in a root elment.
            </summary>
      <param name="value">The JSON string.</param>
      <param name="deserializeRootElementName">The name of the root element to append when deserializing.</param>
      <param name="writeArrayAttribute">
            A flag to indicate whether to write the Json.NET array attribute.
            This attribute helps preserve arrays when converting the written XML back to JSON.
            </param>
      <returns>The deserialized XNode</returns>
    </member>
    <member name="T:Newtonsoft.Json.JsonConverterAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to use the specified <see cref="T:Newtonsoft.Json.JsonConverter" /> when serializing the member or class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonConverterAttribute.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonConverterAttribute" /> class.
            </summary>
      <param name="converterType">Type of the converter.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonConverterAttribute.ConverterType">
      <summary>
            Gets the type of the converter.
            </summary>
      <value>The type of the converter.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonConverterCollection">
      <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonDictionaryAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the collection.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonDictionaryAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonDictionaryAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonDictionaryAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonDictionaryAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="T:Newtonsoft.Json.JsonException">
      <summary>
            The exception thrown when an error occurs during Json serialization or deserialization.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="T:Newtonsoft.Json.JsonIgnoreAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> not to serialize the public field or public read/write property value.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonObjectAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> how to serialize the object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(Newtonsoft.Json.MemberSerialization)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with the specified member serialization.
            </summary>
      <param name="memberSerialization">The member serialization.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonObjectAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonObjectAttribute" /> class with the specified container Id.
            </summary>
      <param name="id">The container Id.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonObjectAttribute.MemberSerialization">
      <summary>
            Gets or sets the member serialization.
            </summary>
      <value>The member serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonObjectAttribute.ItemRequired">
      <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
      <value>
            	A value indicating whether the object's properties are required.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.JsonPropertyAttribute">
      <summary>
            Instructs the <see cref="T:Newtonsoft.Json.JsonSerializer" /> to always serialize the member with the specified name.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonPropertyAttribute.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> class with the specified name.
            </summary>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemConverterType">
      <summary>
            Gets or sets the converter used when serializing the property's collection items.
            </summary>
      <value>The collection's items converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.NullValueHandling">
      <summary>
            Gets or sets the null value handling used when serializing this property.
            </summary>
      <value>The null value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.DefaultValueHandling">
      <summary>
            Gets or sets the default value handling used when serializing this property.
            </summary>
      <value>The default value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ReferenceLoopHandling">
      <summary>
            Gets or sets the reference loop handling used when serializing this property.
            </summary>
      <value>The reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ObjectCreationHandling">
      <summary>
            Gets or sets the object creation handling used when deserializing this property.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.TypeNameHandling">
      <summary>
            Gets or sets the type name handling used when serializing this property.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.IsReference">
      <summary>
            Gets or sets whether this property's value is serialized as a reference.
            </summary>
      <value>Whether this property's value is serialized as a reference.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Order">
      <summary>
            Gets or sets the order of serialization and deserialization of a member.
            </summary>
      <value>The numeric order of serialization or deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.Required">
      <summary>
            Gets or sets a value indicating whether this property is required.
            </summary>
      <value>
            	A value indicating whether this property is required.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.PropertyName">
      <summary>
            Gets or sets the name of the property.
            </summary>
      <value>The name of the property.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemReferenceLoopHandling">
      <summary>
            Gets or sets the the reference loop handling used when serializing the property's collection items.
            </summary>
      <value>The collection's items reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemTypeNameHandling">
      <summary>
            Gets or sets the the type name handling used when serializing the property's collection items.
            </summary>
      <value>The collection's items type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonPropertyAttribute.ItemIsReference">
      <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
      <value>Whether this property's collection items are serialized as a reference.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonReaderException">
      <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonReaderException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReaderException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="P:Newtonsoft.Json.JsonReaderException.LineNumber">
      <summary>
            Gets the line number indicating where the error occurred.
            </summary>
      <value>The line number indicating where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReaderException.LinePosition">
      <summary>
            Gets the line position indicating where the error occurred.
            </summary>
      <value>The line position indicating where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonReaderException.Path">
      <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
      <value>The path to the JSON where the error occurred.</value>
    </member>
    <member name="T:Newtonsoft.Json.JsonSerializationException">
      <summary>
            The exception thrown when an error occurs during Json serialization or deserialization.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializationException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="T:Newtonsoft.Json.JsonSerializer">
      <summary>
            Serializes and deserializes objects into and from the JSON format.
            The <see cref="T:Newtonsoft.Json.JsonSerializer" /> enables you to control how objects are encoded into JSON.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializer" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Create(Newtonsoft.Json.JsonSerializerSettings)">
      <summary>
            Creates a new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.
            </summary>
      <param name="settings">The settings to be applied to the <see cref="T:Newtonsoft.Json.JsonSerializer" />.</param>
      <returns>A new <see cref="T:Newtonsoft.Json.JsonSerializer" /> instance using the specified <see cref="T:Newtonsoft.Json.JsonSerializerSettings" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Populate(System.IO.TextReader,System.Object)">
      <summary>
            Populates the JSON values onto the target object.
            </summary>
      <param name="reader">The <see cref="T:System.IO.TextReader" /> that contains the JSON structure to reader values from.</param>
      <param name="target">The target object to populate values onto.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Populate(Newtonsoft.Json.JsonReader,System.Object)">
      <summary>
            Populates the JSON values onto the target object.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> that contains the JSON structure to reader values from.</param>
      <param name="target">The target object to populate values onto.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> that contains the JSON structure to deserialize.</param>
      <returns>The <see cref="T:System.Object" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(System.IO.TextReader,System.Type)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:System.IO.StringReader" />
            into an instance of the specified type.
            </summary>
      <param name="reader">The <see cref="T:System.IO.TextReader" /> containing the object.</param>
      <param name="objectType">The <see cref="T:System.Type" /> of object being deserialized.</param>
      <returns>The instance of <paramref name="objectType" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize``1(Newtonsoft.Json.JsonReader)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />
            into an instance of the specified type.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the object.</param>
      <typeparam name="T">The type of the object to deserialize.</typeparam>
      <returns>The instance of <typeparamref name="T" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Deserialize(Newtonsoft.Json.JsonReader,System.Type)">
      <summary>
            Deserializes the Json structure contained by the specified <see cref="T:Newtonsoft.Json.JsonReader" />
            into an instance of the specified type.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the object.</param>
      <param name="objectType">The <see cref="T:System.Type" /> of object being deserialized.</param>
      <returns>The instance of <paramref name="objectType" /> being deserialized.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object)">
      <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter" />. 
            </summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write the Json structure.</param>
      <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object,System.Type)">
      <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter" />. 
            </summary>
      <param name="jsonWriter">The <see cref="T:Newtonsoft.Json.JsonWriter" /> used to write the Json structure.</param>
      <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
      <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(System.IO.TextWriter,System.Object,System.Type)">
      <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:System.IO.TextWriter" />. 
            </summary>
      <param name="textWriter">The <see cref="T:System.IO.TextWriter" /> used to write the Json structure.</param>
      <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
      <param name="objectType">
            The type of the value being serialized.
            This parameter is used when <see cref="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling" /> is Auto to write out the type name if the type of the value does not match.
            Specifing the type is optional.
            </param>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializer.Serialize(Newtonsoft.Json.JsonWriter,System.Object)">
      <summary>
            Serializes the specified <see cref="T:System.Object" /> and writes the Json structure
            to a <c>Stream</c> using the specified <see cref="T:Newtonsoft.Json.JsonWriter" />. 
            </summary>
      <param name="jsonWriter">The <see cref="T:Newtonsoft.Json.JsonWriter" /> used to write the Json structure.</param>
      <param name="value">The <see cref="T:System.Object" /> to serialize.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceResolver">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Binder">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder" /> used by the serializer when resolving type names.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.TraceWriter">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.ITraceWriter" /> used by the serializer when writing trace messages.
            </summary>
      <value>The trace writer.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameHandling">
      <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.TypeNameAssemblyFormat">
      <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
      <value>The type name assembly format.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.PreserveReferencesHandling">
      <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ReferenceLoopHandling">
      <summary>
            Get or set how reference loops (e.g. a class referencing itself) is handled.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.MissingMemberHandling">
      <summary>
            Get or set how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.NullValueHandling">
      <summary>
            Get or set how null values are handled during serialization and deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DefaultValueHandling">
      <summary>
            Get or set how null default are handled during serialization and deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ObjectCreationHandling">
      <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ConstructorHandling">
      <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
      <value>The constructor handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Converters">
      <summary>
            Gets a collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.
            </summary>
      <value>Collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.ContractResolver">
      <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Context">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used by the serializer when invoking serialization callback methods.
            </summary>
      <value>The context.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Formatting">
      <summary>
            Indicates how JSON text output is formatted.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DateFormatHandling">
      <summary>
            Get or set how dates are written to JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DateTimeZoneHandling">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> time zones are handling during serialization and deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DateParseHandling">
      <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.FloatParseHandling">
      <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.FloatFormatHandling">
      <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" />,
            are written as JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.StringEscapeHandling">
      <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.DateFormatString">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> and <see cref="T:System.DateTimeOffset" /> values are formatting when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.Culture">
      <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.MaxDepth">
      <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializer.CheckAdditionalContent">
      <summary>
            Gets a value indicating whether there will be a check for additional JSON content after deserializing an object.
            </summary>
      <value>
        <c>true</c> if there will be a check for additional JSON content after deserializing an object; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="E:Newtonsoft.Json.JsonSerializer.Error">
      <summary>
            Occurs when the <see cref="T:Newtonsoft.Json.JsonSerializer" /> errors during serialization and deserialization.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonSerializerSettings">
      <summary>
            Specifies the settings on a <see cref="T:Newtonsoft.Json.JsonSerializer" /> object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonSerializerSettings.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonSerializerSettings" /> class.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceLoopHandling">
      <summary>
            Gets or sets how reference loops (e.g. a class referencing itself) is handled.
            </summary>
      <value>Reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.MissingMemberHandling">
      <summary>
            Gets or sets how missing members (e.g. JSON contains a property that isn't a member on the object) are handled during deserialization.
            </summary>
      <value>Missing member handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ObjectCreationHandling">
      <summary>
            Gets or sets how objects are created during deserialization.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.NullValueHandling">
      <summary>
            Gets or sets how null values are handled during serialization and deserialization.
            </summary>
      <value>Null value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DefaultValueHandling">
      <summary>
            Gets or sets how null default are handled during serialization and deserialization.
            </summary>
      <value>The default value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Converters">
      <summary>
            Gets or sets a collection <see cref="T:Newtonsoft.Json.JsonConverter" /> that will be used during serialization.
            </summary>
      <value>The converters.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.PreserveReferencesHandling">
      <summary>
            Gets or sets how object references are preserved by the serializer.
            </summary>
      <value>The preserve references handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameHandling">
      <summary>
            Gets or sets how type name writing and reading is handled by the serializer.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.TypeNameAssemblyFormat">
      <summary>
            Gets or sets how a type name assembly is written and resolved by the serializer.
            </summary>
      <value>The type name assembly format.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ConstructorHandling">
      <summary>
            Gets or sets how constructors are used during deserialization.
            </summary>
      <value>The constructor handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ContractResolver">
      <summary>
            Gets or sets the contract resolver used by the serializer when
            serializing .NET objects to JSON and vice versa.
            </summary>
      <value>The contract resolver.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.ReferenceResolver">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.IReferenceResolver" /> used by the serializer when resolving references.
            </summary>
      <value>The reference resolver.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.TraceWriter">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Serialization.ITraceWriter" /> used by the serializer when writing trace messages.
            </summary>
      <value>The trace writer.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Binder">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.SerializationBinder" /> used by the serializer when resolving type names.
            </summary>
      <value>The binder.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Error">
      <summary>
            Gets or sets the error handler called during serialization and deserialization.
            </summary>
      <value>The error handler called during serialization and deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Context">
      <summary>
            Gets or sets the <see cref="T:System.Runtime.Serialization.StreamingContext" /> used by the serializer when invoking serialization callback methods.
            </summary>
      <value>The context.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateFormatString">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> and <see cref="T:System.DateTimeOffset" /> values are formatting when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.MaxDepth">
      <summary>
            Gets or sets the maximum depth allowed when reading JSON. Reading past this depth will throw a <see cref="T:Newtonsoft.Json.JsonReaderException" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Formatting">
      <summary>
            Indicates how JSON text output is formatted.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateFormatHandling">
      <summary>
            Get or set how dates are written to JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateTimeZoneHandling">
      <summary>
            Get or set how <see cref="T:System.DateTime" /> time zones are handling during serialization and deserialization.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.DateParseHandling">
      <summary>
            Get or set how date formatted strings, e.g. "\/Date(1198908717056)\/" and "2012-03-21T05:40Z", are parsed when reading JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.FloatFormatHandling">
      <summary>
            Get or set how special floating point numbers, e.g. <see cref="F:System.Double.NaN" />,
            <see cref="F:System.Double.PositiveInfinity" /> and <see cref="F:System.Double.NegativeInfinity" />,
            are written as JSON.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.FloatParseHandling">
      <summary>
            Get or set how floating point numbers, e.g. 1.0 and 9.9, are parsed when reading JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.StringEscapeHandling">
      <summary>
            Get or set how strings are escaped when writing JSON text.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.Culture">
      <summary>
            Gets or sets the culture used when reading JSON. Defaults to <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonSerializerSettings.CheckAdditionalContent">
      <summary>
            Gets a value indicating whether there will be a check for additional content after deserializing an object.
            </summary>
      <value>
        <c>true</c> if there will be a check for additional content after deserializing an object; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.JsonTextReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to JSON text data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.#ctor(System.IO.TextReader)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonReader" /> class with the specified <see cref="T:System.IO.TextReader" />.
            </summary>
      <param name="reader">The <c>TextReader</c> containing the XML data to read.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsString">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTime">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.DateTimeOffset" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.Close">
      <summary>
            Changes the state to closed. 
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextReader.HasLineInfo">
      <summary>
            Gets a value indicating whether the class can return line information.
            </summary>
      <returns>
        <c>true</c> if LineNumber and LinePosition can be provided; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextReader.LineNumber">
      <summary>
            Gets the current line number.
            </summary>
      <value>
            The current line number or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextReader.LinePosition">
      <summary>
            Gets the current line position.
            </summary>
      <value>
            The current line position or 0 if no line information is available (for example, HasLineInfo returns false).
            </value>
    </member>
    <member name="T:Newtonsoft.Json.JsonTextWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.#ctor(System.IO.TextWriter)">
      <summary>
            Creates an instance of the <c>JsonWriter</c> class using the specified <see cref="T:System.IO.TextWriter" />. 
            </summary>
      <param name="textWriter">The <c>TextWriter</c> to write to.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.Close">
      <summary>
            Closes this stream and the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the specified end token.
            </summary>
      <param name="token">The end token to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WritePropertyName(System.String,System.Boolean)">
      <summary>
            Writes the property name of a name/value pair on a JSON object.
            </summary>
      <param name="name">The name of the property.</param>
      <param name="escape">A flag to indicate whether the text should be escaped when it is written as a JSON property name.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndent">
      <summary>
            Writes indent characters.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValueDelimiter">
      <summary>
            Writes the JSON value delimiter.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteIndentSpace">
      <summary>
            Writes an indent space.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Object)">
      <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Single})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Nullable{System.Double})">
      <summary>
            Writes a <see cref="T:System.Nullable`1" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Nullable`1" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Guid)">
      <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.TimeSpan)">
      <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteValue(System.Uri)">
      <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text. 
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonTextWriter.WriteWhitespace(System.String)">
      <summary>
            Writes out the given white space.
            </summary>
      <param name="ws">The string of white space characters.</param>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.Indentation">
      <summary>
            Gets or sets how many IndentChars to write for each level in the hierarchy when <see cref="T:Newtonsoft.Json.Formatting" /> is set to <c>Formatting.Indented</c>.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteChar">
      <summary>
            Gets or sets which character to use to quote attribute values.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.IndentChar">
      <summary>
            Gets or sets which character to use for indenting when <see cref="T:Newtonsoft.Json.Formatting" /> is set to <c>Formatting.Indented</c>.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonTextWriter.QuoteName">
      <summary>
            Gets or sets a value indicating whether object names will be surrounded with quotes.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonToken">
      <summary>
            Specifies the type of Json token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.None">
      <summary>
            This is returned by the <see cref="T:Newtonsoft.Json.JsonReader" /> if a <see cref="M:Newtonsoft.Json.JsonReader.Read" /> method has not been called. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.StartObject">
      <summary>
            An object start token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.StartArray">
      <summary>
            An array start token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.StartConstructor">
      <summary>
            A constructor start token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.PropertyName">
      <summary>
            An object property name.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Comment">
      <summary>
            A comment.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Raw">
      <summary>
            Raw JSON.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Integer">
      <summary>
            An integer.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Float">
      <summary>
            A float.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.String">
      <summary>
            A string.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Boolean">
      <summary>
            A boolean.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Null">
      <summary>
            A null token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Undefined">
      <summary>
            An undefined token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.EndObject">
      <summary>
            An object end token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.EndArray">
      <summary>
            An array end token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.EndConstructor">
      <summary>
            A constructor end token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Date">
      <summary>
            A Date.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.JsonToken.Bytes">
      <summary>
            Byte data.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonValidatingReader">
      <summary>
            Represents a reader that provides <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> validation.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.#ctor(Newtonsoft.Json.JsonReader)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonValidatingReader" /> class that
            validates the content returned from the given <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from while validating.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsString">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDateTime">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.JsonValidatingReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Value">
      <summary>
            Gets the text value of the current JSON token.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Depth">
      <summary>
            Gets the depth of the current token in the JSON document.
            </summary>
      <value>The depth of the current token in the JSON document.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Path">
      <summary>
            Gets the path of the current JSON token. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.QuoteChar">
      <summary>
            Gets the quotation mark character used to enclose the value of a string.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.TokenType">
      <summary>
            Gets the type of the current JSON token.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.ValueType">
      <summary>
            Gets the Common Language Runtime (CLR) type for the current JSON token.
            </summary>
      <value>
      </value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Schema">
      <summary>
            Gets or sets the schema.
            </summary>
      <value>The schema.</value>
    </member>
    <member name="P:Newtonsoft.Json.JsonValidatingReader.Reader">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.JsonReader" /> used to construct this <see cref="T:Newtonsoft.Json.JsonValidatingReader" />.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.JsonReader" /> specified in the constructor.</value>
    </member>
    <member name="E:Newtonsoft.Json.JsonValidatingReader.ValidationEventHandler">
      <summary>
            Sets an event handler for receiving schema validation errors.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.JsonWriterException">
      <summary>
            The exception thrown when an error occurs while reading Json text.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.JsonWriterException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.JsonWriterException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="P:Newtonsoft.Json.JsonWriterException.Path">
      <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
      <value>The path to the JSON where the error occurred.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.Extensions">
      <summary>
            Contains the LINQ to JSON extension methods.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Ancestors``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of tokens that contains the ancestors of every token in the source collection.
            </summary>
      <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JToken" />.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the ancestors of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Descendants``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of tokens that contains the descendants of every token in the source collection.
            </summary>
      <typeparam name="T">The type of the objects in source, constrained to <see cref="T:Newtonsoft.Json.Linq.JContainer" />.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the descendants of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Properties(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JObject})">
      <summary>
            Returns a collection of child properties of every object in the source collection.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the properties of every object in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
      <summary>
            Returns a collection of child values of every object in the source collection with the given key.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <param name="key">The token key.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every node in the source collection with the given key.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Returns a collection of child values of every object in the source collection.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken},System.Object)">
      <summary>
            Returns a collection of converted child values of every object in the source collection with the given key.
            </summary>
      <typeparam name="U">The type to convert the values to.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <param name="key">The token key.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every node in the source collection with the given key.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Values``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Returns a collection of converted child values of every object in the source collection.
            </summary>
      <typeparam name="U">The type to convert the values to.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Value``1(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Converts the value.
            </summary>
      <typeparam name="U">The type to convert the value to.</typeparam>
      <param name="value">A <see cref="T:Newtonsoft.Json.Linq.JToken" /> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Value``2(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Converts the value.
            </summary>
      <typeparam name="T">The source collection type.</typeparam>
      <typeparam name="U">The type to convert the value to.</typeparam>
      <param name="value">A <see cref="T:Newtonsoft.Json.Linq.JToken" /> cast as a <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>A converted value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Children``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of child tokens of every array in the source collection.
            </summary>
      <typeparam name="T">The source collection type.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.Children``2(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns a collection of converted child tokens of every array in the source collection.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <typeparam name="U">The type to convert the values to.</typeparam>
      <typeparam name="T">The source collection type.</typeparam>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the converted values of every node in the source collection.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable(System.Collections.Generic.IEnumerable{Newtonsoft.Json.Linq.JToken})">
      <summary>
            Returns the input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.
            </summary>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>The input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.Extensions.AsJEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Returns the input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.
            </summary>
      <typeparam name="T">The source collection type.</typeparam>
      <param name="source">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the source collection.</param>
      <returns>The input typed as <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" />.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Linq.IJEnumerable`1">
      <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
      <typeparam name="T">The type of token</typeparam>
    </member>
    <member name="P:Newtonsoft.Json.Linq.IJEnumerable`1.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" /> with the specified key.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JToken">
      <summary>
            Represents an abstract JSON token.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.DeepEquals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Compares the values of two tokens, including the values of all descendant tokens.
            </summary>
      <param name="t1">The first <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <param name="t2">The second <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <returns>true if the tokens are equal; otherwise false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AddAfterSelf(System.Object)">
      <summary>
            Adds the specified content immediately after this token.
            </summary>
      <param name="content">A content object that contains simple content or a collection of content objects to be added after this token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AddBeforeSelf(System.Object)">
      <summary>
            Adds the specified content immediately before this token.
            </summary>
      <param name="content">A content object that contains simple content or a collection of content objects to be added before this token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Ancestors">
      <summary>
            Returns a collection of the ancestor tokens of this token.
            </summary>
      <returns>A collection of the ancestor tokens of this token.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.AfterSelf">
      <summary>
            Returns a collection of the sibling tokens after this token, in document order.
            </summary>
      <returns>A collection of the sibling tokens after this tokens, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.BeforeSelf">
      <summary>
            Returns a collection of the sibling tokens before this token, in document order.
            </summary>
      <returns>A collection of the sibling tokens before this token, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Value``1(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key converted to the specified type.
            </summary>
      <typeparam name="T">The type to convert the token to.</typeparam>
      <param name="key">The token key.</param>
      <returns>The converted token value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Children">
      <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Children``1">
      <summary>
            Returns a collection of the child tokens of this token, in document order, filtered by the specified type.
            </summary>
      <typeparam name="T">The type to filter the child tokens on.</typeparam>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Values``1">
      <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
      <typeparam name="T">The type to convert the values to.</typeparam>
      <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the child values of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Remove">
      <summary>
            Removes this token from its parent.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Replace(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Replaces this token with the specified token.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToString">
      <summary>
            Returns the indented JSON for this token.
            </summary>
      <returns>
            The indented JSON for this token.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToString(Newtonsoft.Json.Formatting,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Returns the JSON for this token using the given formatting and converters.
            </summary>
      <param name="formatting">Indicates how the output is formatted.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
      <returns>The JSON for this token using the given formatting and converters.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Boolean">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Boolean" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTimeOffset">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.DateTimeOffset" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Boolean}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int64">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int64" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTime}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.DateTimeOffset}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Decimal}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Double}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Char}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int32">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int32" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Int16">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Int16" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt16">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt16" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Char">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Char" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Byte" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int32}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int16}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt16}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Byte}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.DateTime">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.DateTime" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Int64}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Single}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Decimal">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Decimal" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt32}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.UInt64}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Nullable`1" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Double">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Double" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Single">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Single" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.String">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.String" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt32">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt32" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.UInt64">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.UInt64" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Byte[]">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Byte[]" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Guid">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Guid" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.Guid}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Guid" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.TimeSpan">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.TimeSpan" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Nullable{System.TimeSpan}">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.TimeSpan" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Explicit(Newtonsoft.Json.Linq.JToken)~System.Uri">
      <summary>
            Performs an explicit conversion from <see cref="T:Newtonsoft.Json.Linq.JToken" /> to <see cref="T:System.Uri" />.
            </summary>
      <param name="value">The value.</param>
      <returns>The result of the conversion.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Boolean)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Boolean" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTimeOffset)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.DateTimeOffset" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Boolean})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int64)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTime})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.DateTimeOffset})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Decimal})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Double})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int16)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Int16" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt16)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Int32)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Int32" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int32})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.DateTime)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.DateTime" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int64})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Single})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Decimal)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Decimal" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Int16})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt16})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt32})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.UInt64})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Double)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Double" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Single)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Single" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.String)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.String" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt32)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.UInt32" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.UInt64)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Byte[])~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Byte[]" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Uri)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Uri" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.TimeSpan)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.TimeSpan" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.TimeSpan})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Guid)~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Guid" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.op_Implicit(System.Nullable{System.Guid})~Newtonsoft.Json.Linq.JToken">
      <summary>
            Performs an implicit conversion from <see cref="T:System.Nullable`1" /> to <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="value">The value to create a <see cref="T:Newtonsoft.Json.Linq.JValue" /> from.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JValue" /> initialized with the specified value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.CreateReader">
      <summary>
            Creates an <see cref="T:Newtonsoft.Json.JsonReader" /> for this token.
            </summary>
      <returns>An <see cref="T:Newtonsoft.Json.JsonReader" /> that can be used to read this token and its descendants.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the value of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from an object using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when reading the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the value of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToObject``1">
      <summary>
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
      <returns>The new object created from the JSON value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToObject(System.Type)">
      <summary>
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="objectType">The object type that the token will be deserialized to.</param>
      <returns>The new object created from the JSON value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToObject``1(Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" /> using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <typeparam name="T">The object type that the token will be deserialized to.</typeparam>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when creating the object.</param>
      <returns>The new object created from the JSON value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ToObject(System.Type,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates the specified .NET type from the <see cref="T:Newtonsoft.Json.Linq.JToken" /> using the specified <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <param name="objectType">The object type that the token will be deserialized to.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used when creating the object.</param>
      <returns>The new object created from the JSON value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.ReadFrom(Newtonsoft.Json.JsonReader)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>
            An <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a string that contains JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JToken" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">An <see cref="T:Newtonsoft.Json.JsonReader" /> positioned at the token to read into this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</param>
      <returns>
            An <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the token and its descendant tokens
            that were read from the reader. The runtime type of the token is determined
            by the token type of the first token encountered in the reader.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String)">
      <summary>
            Selects the token that matches the object path.
            </summary>
      <param name="path">
            The object path from the current <see cref="T:Newtonsoft.Json.Linq.JToken" /> to the <see cref="T:Newtonsoft.Json.Linq.JToken" />
            to be returned. This must be a string of property names or array indexes separated
            by periods, such as <code>Tables[0].DefaultView[0].Price</code> in C# or
            <code>Tables(0).DefaultView(0).Price</code> in Visual Basic.
            </param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that matches the object path or a null reference if no matching token is found.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.SelectToken(System.String,System.Boolean)">
      <summary>
            Selects the token that matches the object path.
            </summary>
      <param name="path">
            The object path from the current <see cref="T:Newtonsoft.Json.Linq.JToken" /> to the <see cref="T:Newtonsoft.Json.Linq.JToken" />
            to be returned. This must be a string of property names or array indexes separated
            by periods, such as <code>Tables[0].DefaultView[0].Price</code> in C# or
            <code>Tables(0).DefaultView(0).Price</code> in Visual Basic.
            </param>
      <param name="errorWhenNoMatch">A flag to indicate whether an error should be thrown if no token is found.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that matches the object path.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
      <param name="parameter">The expression tree representation of the runtime value.</param>
      <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JToken.DeepClone">
      <summary>
            Creates a new instance of the <see cref="T:Newtonsoft.Json.Linq.JToken" />. All child tokens are recursively cloned.
            </summary>
      <returns>A new instance of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.EqualityComparer">
      <summary>
            Gets a comparer that can compare two tokens for value equality.
            </summary>
      <value>A <see cref="T:Newtonsoft.Json.Linq.JTokenEqualityComparer" /> that can compare two nodes for value equality.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Parent">
      <summary>
            Gets or sets the parent.
            </summary>
      <value>The parent.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Root">
      <summary>
            Gets the root <see cref="T:Newtonsoft.Json.Linq.JToken" /> of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The root <see cref="T:Newtonsoft.Json.Linq.JToken" /> of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.HasValues">
      <summary>
            Gets a value indicating whether this token has childen tokens.
            </summary>
      <value>
        <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Next">
      <summary>
            Gets the next sibling token of this node.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the next sibling token.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Previous">
      <summary>
            Gets the previous sibling token of this node.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> that contains the previous sibling token.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Path">
      <summary>
            Gets the path of the JSON token. 
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.First">
      <summary>
            Get the first child token of this token.
            </summary>
      <value>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the first child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JToken.Last">
      <summary>
            Get the last child token of this token.
            </summary>
      <value>A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the last child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JContainer">
      <summary>
            Represents a token that can contain other tokens.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.AddingNew" /> event.
            </summary>
      <param name="e">The <see cref="T:System.ComponentModel.AddingNewEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.ListChanged" /> event.
            </summary>
      <param name="e">The <see cref="T:System.ComponentModel.ListChangedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged" /> event.
            </summary>
      <param name="e">The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> instance containing the event data.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Children">
      <summary>
            Returns a collection of the child tokens of this token, in document order.
            </summary>
      <returns>
            An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the child tokens of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Values``1">
      <summary>
            Returns a collection of the child values of this token, in document order.
            </summary>
      <typeparam name="T">The type to convert the values to.</typeparam>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the child values of this <see cref="T:Newtonsoft.Json.Linq.JToken" />, in document order.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Descendants">
      <summary>
            Returns a collection of the descendant tokens for this token in document order.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing the descendant tokens of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.Add(System.Object)">
      <summary>
            Adds the specified content as children of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="content">The content to be added.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.AddFirst(System.Object)">
      <summary>
            Adds the specified content as the first children of this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="content">The content to be added.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.CreateWriter">
      <summary>
            Creates an <see cref="T:Newtonsoft.Json.JsonWriter" /> that can be used to add tokens to the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <returns>An <see cref="T:Newtonsoft.Json.JsonWriter" /> that is ready to have content written to it.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.ReplaceAll(System.Object)">
      <summary>
            Replaces the children nodes of this token with the specified content.
            </summary>
      <param name="content">The content.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JContainer.RemoveAll">
      <summary>
            Removes the child nodes from this token.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.HasValues">
      <summary>
            Gets a value indicating whether this token has childen tokens.
            </summary>
      <value>
        <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.First">
      <summary>
            Get the first child token of this token.
            </summary>
      <value>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the first child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.Last">
      <summary>
            Get the last child token of this token.
            </summary>
      <value>
            A <see cref="T:Newtonsoft.Json.Linq.JToken" /> containing the last child token of the <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JContainer.Count">
      <summary>
            Gets the count of child JSON tokens.
            </summary>
      <value>The count of child JSON tokens</value>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JContainer.ListChanged">
      <summary>
            Occurs when the list changes or an item in the list changes.
            </summary>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JContainer.AddingNew">
      <summary>
            Occurs before an item is added to the collection.
            </summary>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JContainer.CollectionChanged">
      <summary>
            Occurs when the items list of the collection has changed, or the collection is reset.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JArray">
      <summary>
            Represents a JSON array.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(Newtonsoft.Json.Linq.JArray)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class from another <see cref="T:Newtonsoft.Json.Linq.JArray" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JArray" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class with the specified content.
            </summary>
      <param name="content">The contents of the array.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JArray" /> class with the specified content.
            </summary>
      <param name="content">The contents of the array.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from a string that contains JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> populated from the string that contains JSON.</returns>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParseArray" title="Parsing a JSON Array from Text" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used to read the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.IndexOf(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <returns>
            The index of <paramref name="item" /> if found in the list; otherwise, -1.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Insert(System.Int32,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
      <param name="index">The zero-based index at which <paramref name="item" /> should be inserted.</param>
      <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.RemoveAt(System.Int32)">
      <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1" /> item at the specified index.
            </summary>
      <param name="index">The zero-based index of the item to remove.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> is not a valid index in the <see cref="T:System.Collections.Generic.IList`1" />.</exception>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Add(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Clear">
      <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only. </exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Contains(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1" /> contains a specific value.
            </summary>
      <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> is found in the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JArray.Remove(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns>
            true if <paramref name="item" /> was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1" />; otherwise, false. This method also returns false if <paramref name="item" /> is not found in the original <see cref="T:System.Collections.Generic.ICollection`1" />.
            </returns>
      <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1" /> is read-only.</exception>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JArray.Item(System.Int32)">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> at the specified index.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JConstructor">
      <summary>
            Represents a JSON constructor.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(Newtonsoft.Json.Linq.JConstructor)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class from another <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name and content.
            </summary>
      <param name="name">The constructor name.</param>
      <param name="content">The contents of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name and content.
            </summary>
      <param name="name">The constructor name.</param>
      <param name="content">The contents of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> class with the specified name.
            </summary>
      <param name="name">The constructor name.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JConstructor.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JConstructor" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JConstructor" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.Name">
      <summary>
            Gets or sets the name of this constructor.
            </summary>
      <value>The constructor name.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JConstructor.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JEnumerable`1">
      <summary>
            Represents a collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
      <typeparam name="T">The type of token</typeparam>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JEnumerable`1.Empty">
      <summary>
            An empty collection of <see cref="T:Newtonsoft.Json.Linq.JToken" /> objects.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> struct.
            </summary>
      <param name="enumerable">The enumerable.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JEnumerable`1.GetHashCode">
      <summary>
            Returns a hash code for this instance.
            </summary>
      <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JEnumerable`1.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.IJEnumerable`1" /> with the specified key.
            </summary>
      <value>
      </value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JObject">
      <summary>
            Represents a JSON object.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(Newtonsoft.Json.Linq.JObject)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class from another <see cref="T:Newtonsoft.Json.Linq.JObject" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JObject" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class with the specified content.
            </summary>
      <param name="content">The contents of the object.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JObject" /> class with the specified content.
            </summary>
      <param name="content">The contents of the object.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Properties">
      <summary>
            Gets an <see cref="T:System.Collections.Generic.IEnumerable`1" /> of this object's properties.
            </summary>
      <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of this object's properties.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Property(System.String)">
      <summary>
            Gets a <see cref="T:Newtonsoft.Json.Linq.JProperty" /> the specified name.
            </summary>
      <param name="name">The property name.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> with the specified name or null.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.PropertyValues">
      <summary>
            Gets an <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> of this object's property values.
            </summary>
      <returns>An <see cref="T:Newtonsoft.Json.Linq.JEnumerable`1" /> of this object's property values.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from a string that contains JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> populated from the string that contains JSON.</returns>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\LinqToJsonTests.cs" region="LinqToJsonCreateParse" title="Parsing a JSON Object from Text" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JObject" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JObject" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JObject" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.FromObject(System.Object,Newtonsoft.Json.JsonSerializer)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JArray" /> from an object.
            </summary>
      <param name="o">The object that will be used to create <see cref="T:Newtonsoft.Json.Linq.JArray" />.</param>
      <param name="jsonSerializer">The <see cref="T:Newtonsoft.Json.JsonSerializer" /> that will be used to read the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JArray" /> with the values of the specified object</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetValue(System.String)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetValue(System.String,System.StringComparison)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison" /> will be used to match a property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,System.StringComparison,Newtonsoft.Json.Linq.JToken@)">
      <summary>
            Tries to get the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            The exact property name will be searched for first and if no matching property is found then
            the <see cref="T:System.StringComparison" /> will be used to match a property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="value">The value.</param>
      <param name="comparison">One of the enumeration values that specifies how the strings will be compared.</param>
      <returns>true if a value was successfully retrieved; otherwise, false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Add(System.String,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Adds the specified property name.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.Remove(System.String)">
      <summary>
            Removes the property with the specified name.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>true if item was successfully removed; otherwise, false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.TryGetValue(System.String,Newtonsoft.Json.Linq.JToken@)">
      <summary>
            Tries the get value.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <param name="value">The value.</param>
      <returns>true if a value was successfully retrieved; otherwise, false.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetEnumerator">
      <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
      <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanged(System.String)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanged" /> event with the provided arguments.
            </summary>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.OnPropertyChanging(System.String)">
      <summary>
            Raises the <see cref="E:Newtonsoft.Json.Linq.JObject.PropertyChanging" /> event with the provided arguments.
            </summary>
      <param name="propertyName">Name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JObject.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
      <param name="parameter">The expression tree representation of the runtime value.</param>
      <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.Object)">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified key.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JObject.Item(System.String)">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Linq.JToken" /> with the specified property name.
            </summary>
      <value>
      </value>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanged">
      <summary>
            Occurs when a property value changes.
            </summary>
    </member>
    <member name="E:Newtonsoft.Json.Linq.JObject.PropertyChanging">
      <summary>
            Occurs when a property value is changing.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JProperty">
      <summary>
            Represents a JSON property.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(Newtonsoft.Json.Linq.JProperty)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class from another <see cref="T:Newtonsoft.Json.Linq.JProperty" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object[])">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class.
            </summary>
      <param name="name">The property name.</param>
      <param name="content">The property content.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.#ctor(System.String,System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JProperty" /> class.
            </summary>
      <param name="name">The property name.</param>
      <param name="content">The property content.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JProperty.Load(Newtonsoft.Json.JsonReader)">
      <summary>
            Loads an <see cref="T:Newtonsoft.Json.Linq.JProperty" /> from a <see cref="T:Newtonsoft.Json.JsonReader" />. 
            </summary>
      <param name="reader">A <see cref="T:Newtonsoft.Json.JsonReader" /> that will be read for the content of the <see cref="T:Newtonsoft.Json.Linq.JProperty" />.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JProperty" /> that contains the JSON that was read from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.ChildrenTokens">
      <summary>
            Gets the container's children tokens.
            </summary>
      <value>The container's children tokens.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.Name">
      <summary>
            Gets the property name.
            </summary>
      <value>The property name.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.Value">
      <summary>
            Gets or sets the property value.
            </summary>
      <value>The property value.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JProperty.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JPropertyDescriptor">
      <summary>
            Represents a view of a <see cref="T:Newtonsoft.Json.Linq.JProperty" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.#ctor(System.String,System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JPropertyDescriptor" /> class.
            </summary>
      <param name="name">The name.</param>
      <param name="propertyType">Type of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.CanResetValue(System.Object)">
      <summary>
            When overridden in a derived class, returns whether resetting an object changes its value.
            </summary>
      <returns>
            true if resetting the component changes its value; otherwise, false.
            </returns>
      <param name="component">The component to test for reset capability. 
                            </param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.GetValue(System.Object)">
      <summary>
            When overridden in a derived class, gets the current value of the property on a component.
            </summary>
      <returns>
            The value of a property for a given component.
            </returns>
      <param name="component">The component with the property for which to retrieve the value. 
                            </param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.ResetValue(System.Object)">
      <summary>
            When overridden in a derived class, resets the value for this property of the component to the default value.
            </summary>
      <param name="component">The component with the property value that is to be reset to the default value. 
                            </param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>
            When overridden in a derived class, sets the value of the component to a different value.
            </summary>
      <param name="component">The component with the property value that is to be set. 
                            </param>
      <param name="value">The new value. 
                            </param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JPropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>
            When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.
            </summary>
      <returns>
            true if the property should be persisted; otherwise, false.
            </returns>
      <param name="component">The component with the property to be examined for persistence. 
                            </param>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.ComponentType">
      <summary>
            When overridden in a derived class, gets the type of the component this property is bound to.
            </summary>
      <returns>
            A <see cref="T:System.Type" /> that represents the type of component this property is bound to. When the <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> or <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /> methods are invoked, the object specified might be an instance of this type.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.IsReadOnly">
      <summary>
            When overridden in a derived class, gets a value indicating whether this property is read-only.
            </summary>
      <returns>
            true if the property is read-only; otherwise, false.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.PropertyType">
      <summary>
            When overridden in a derived class, gets the type of the property.
            </summary>
      <returns>
            A <see cref="T:System.Type" /> that represents the type of the property.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JPropertyDescriptor.NameHashCode">
      <summary>
            Gets the hash code for the name of the member.
            </summary>
      <value>
      </value>
      <returns>
            The hash code for the name of the member.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JValue">
      <summary>
            Represents a value in JSON (string, integer, date, etc).
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(Newtonsoft.Json.Linq.JValue)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class from another <see cref="T:Newtonsoft.Json.Linq.JValue" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JValue" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Int64)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Char)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.UInt64)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Double)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Single)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.DateTime)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Guid)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Uri)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.TimeSpan)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JValue" /> class with the given value.
            </summary>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CreateComment(System.String)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> comment with the given value.
            </summary>
      <param name="value">The value.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> comment with the given value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CreateString(System.String)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Linq.JValue" /> string with the given value.
            </summary>
      <param name="value">The value.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Linq.JValue" /> string with the given value.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.JsonConverter[])">
      <summary>
            Writes this token to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="converters">A collection of <see cref="T:Newtonsoft.Json.JsonConverter" /> which will be used when writing the token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.Equals(Newtonsoft.Json.Linq.JValue)">
      <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
      <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
      <param name="other">An object to compare with this object.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.Equals(System.Object)">
      <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> to compare with the current <see cref="T:System.Object" />.</param>
      <returns>
            true if the specified <see cref="T:System.Object" /> is equal to the current <see cref="T:System.Object" />; otherwise, false.
            </returns>
      <exception cref="T:System.NullReferenceException">
            The <paramref name="obj" /> parameter is null.
            </exception>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.GetHashCode">
      <summary>
            Serves as a hash function for a particular type.
            </summary>
      <returns>
            A hash code for the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.String)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="format">The format.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.IFormatProvider)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="formatProvider">The format provider.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.ToString(System.String,System.IFormatProvider)">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <param name="format">The format.</param>
      <param name="formatProvider">The format provider.</param>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.GetMetaObject(System.Linq.Expressions.Expression)">
      <summary>
            Returns the <see cref="T:System.Dynamic.DynamicMetaObject" /> responsible for binding operations performed on this object.
            </summary>
      <param name="parameter">The expression tree representation of the runtime value.</param>
      <returns>
            The <see cref="T:System.Dynamic.DynamicMetaObject" /> to bind this object.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JValue.CompareTo(Newtonsoft.Json.Linq.JValue)">
      <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
      <param name="obj">An object to compare with this instance.</param>
      <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            Value
            Meaning
            Less than zero
            This instance is less than <paramref name="obj" />.
            Zero
            This instance is equal to <paramref name="obj" />.
            Greater than zero
            This instance is greater than <paramref name="obj" />.
            </returns>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> is not the same type as this instance.
            </exception>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JValue.HasValues">
      <summary>
            Gets a value indicating whether this token has childen tokens.
            </summary>
      <value>
        <c>true</c> if this token has child values; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JValue.Type">
      <summary>
            Gets the node type for this <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JValue.Value">
      <summary>
            Gets or sets the underlying token value.
            </summary>
      <value>The underlying token value.</value>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JRaw">
      <summary>
            Represents a raw JSON string.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(Newtonsoft.Json.Linq.JRaw)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JRaw" /> class from another <see cref="T:Newtonsoft.Json.Linq.JRaw" /> object.
            </summary>
      <param name="other">A <see cref="T:Newtonsoft.Json.Linq.JRaw" /> object to copy from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JRaw.#ctor(System.Object)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JRaw" /> class.
            </summary>
      <param name="rawJson">The raw json.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JRaw.Create(Newtonsoft.Json.JsonReader)">
      <summary>
            Creates an instance of <see cref="T:Newtonsoft.Json.Linq.JRaw" /> with the content of the reader's current token.
            </summary>
      <param name="reader">The reader.</param>
      <returns>An instance of <see cref="T:Newtonsoft.Json.Linq.JRaw" /> with the content of the reader's current token.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenEqualityComparer">
      <summary>
            Compares tokens to determine whether they are equal.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.Equals(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Linq.JToken)">
      <summary>
            Determines whether the specified objects are equal.
            </summary>
      <param name="x">The first object of type <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <param name="y">The second object of type <see cref="T:Newtonsoft.Json.Linq.JToken" /> to compare.</param>
      <returns>
            true if the specified objects are equal; otherwise, false.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenEqualityComparer.GetHashCode(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Returns a hash code for the specified object.
            </summary>
      <param name="obj">The <see cref="T:System.Object" /> for which a hash code is to be returned.</param>
      <returns>A hash code for the specified object.</returns>
      <exception cref="T:System.ArgumentNullException">The type of <paramref name="obj" /> is a reference type and <paramref name="obj" /> is null.</exception>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenReader">
      <summary>
            Represents a reader that provides fast, non-cached, forward-only access to serialized Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.#ctor(Newtonsoft.Json.Linq.JToken)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenReader" /> class.
            </summary>
      <param name="token">The token to read from.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsBytes">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:Byte[]" />.
            </summary>
      <returns>
            A <see cref="T:Byte[]" /> or a null reference if the next JSON token is null. This method will return <c>null</c> at the end of an array.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsDecimal">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsInt32">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsString">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.String" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsDateTime">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.String" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.ReadAsDateTimeOffset">
      <summary>
            Reads the next JSON token from the stream as a <see cref="T:System.Nullable`1" />.
            </summary>
      <returns>A <see cref="T:System.Nullable`1" />. This method will return <c>null</c> at the end of an array.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenReader.Read">
      <summary>
            Reads the next JSON token from the stream.
            </summary>
      <returns>
            true if the next token was read successfully; false if there are no more tokens to read.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenType">
      <summary>
            Specifies the type of token.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.None">
      <summary>
            No token type has been set.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Object">
      <summary>
            A JSON object.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Array">
      <summary>
            A JSON array.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Constructor">
      <summary>
            A JSON constructor.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Property">
      <summary>
            A JSON object property.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Comment">
      <summary>
            A comment.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Integer">
      <summary>
            An integer value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Float">
      <summary>
            A float value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.String">
      <summary>
            A string value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Boolean">
      <summary>
            A boolean value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Null">
      <summary>
            A null value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Undefined">
      <summary>
            An undefined value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Date">
      <summary>
            A date value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Raw">
      <summary>
            A raw JSON value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Bytes">
      <summary>
            A collection of bytes value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Guid">
      <summary>
            A Guid value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.Uri">
      <summary>
            A Uri value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Linq.JTokenType.TimeSpan">
      <summary>
            A TimeSpan value.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Linq.JTokenWriter">
      <summary>
            Represents a writer that provides a fast, non-cached, forward-only way of generating Json data.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor(Newtonsoft.Json.Linq.JContainer)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenWriter" /> class writing to the given <see cref="T:Newtonsoft.Json.Linq.JContainer" />.
            </summary>
      <param name="container">The container being written to.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Linq.JTokenWriter" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Flush">
      <summary>
            Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.Close">
      <summary>
            Closes this stream and the underlying stream.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartObject">
      <summary>
            Writes the beginning of a Json object.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartArray">
      <summary>
            Writes the beginning of a Json array.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteStartConstructor(System.String)">
      <summary>
            Writes the start of a constructor with the given name.
            </summary>
      <param name="name">The name of the constructor.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteEnd(Newtonsoft.Json.JsonToken)">
      <summary>
            Writes the end.
            </summary>
      <param name="token">The token.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WritePropertyName(System.String)">
      <summary>
            Writes the property name of a name/value pair on a Json object.
            </summary>
      <param name="name">The name of the property.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Object)">
      <summary>
            Writes a <see cref="T:System.Object" /> value.
            An error will raised if the value cannot be written as a single JSON token.
            </summary>
      <param name="value">The <see cref="T:System.Object" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteNull">
      <summary>
            Writes a null value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteUndefined">
      <summary>
            Writes an undefined value.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteRaw(System.String)">
      <summary>
            Writes raw JSON.
            </summary>
      <param name="json">The raw JSON to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteComment(System.String)">
      <summary>
            Writes out a comment <code>/*...*/</code> containing the specified text.
            </summary>
      <param name="text">Text to place inside the comment.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.String)">
      <summary>
            Writes a <see cref="T:System.String" /> value.
            </summary>
      <param name="value">The <see cref="T:System.String" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int32)">
      <summary>
            Writes a <see cref="T:System.Int32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt32)">
      <summary>
            Writes a <see cref="T:System.UInt32" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt32" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int64)">
      <summary>
            Writes a <see cref="T:System.Int64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt64)">
      <summary>
            Writes a <see cref="T:System.UInt64" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt64" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Single)">
      <summary>
            Writes a <see cref="T:System.Single" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Single" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Double)">
      <summary>
            Writes a <see cref="T:System.Double" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Double" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Boolean)">
      <summary>
            Writes a <see cref="T:System.Boolean" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Boolean" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Int16)">
      <summary>
            Writes a <see cref="T:System.Int16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Int16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.UInt16)">
      <summary>
            Writes a <see cref="T:System.UInt16" /> value.
            </summary>
      <param name="value">The <see cref="T:System.UInt16" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Char)">
      <summary>
            Writes a <see cref="T:System.Char" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Char" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte)">
      <summary>
            Writes a <see cref="T:System.Byte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Byte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.SByte)">
      <summary>
            Writes a <see cref="T:System.SByte" /> value.
            </summary>
      <param name="value">The <see cref="T:System.SByte" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Decimal)">
      <summary>
            Writes a <see cref="T:System.Decimal" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Decimal" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTime)">
      <summary>
            Writes a <see cref="T:System.DateTime" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTime" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.DateTimeOffset)">
      <summary>
            Writes a <see cref="T:System.DateTimeOffset" /> value.
            </summary>
      <param name="value">The <see cref="T:System.DateTimeOffset" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Byte[])">
      <summary>
            Writes a <see cref="T:Byte[]" /> value.
            </summary>
      <param name="value">The <see cref="T:Byte[]" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.TimeSpan)">
      <summary>
            Writes a <see cref="T:System.TimeSpan" /> value.
            </summary>
      <param name="value">The <see cref="T:System.TimeSpan" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Guid)">
      <summary>
            Writes a <see cref="T:System.Guid" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Guid" /> value to write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Linq.JTokenWriter.WriteValue(System.Uri)">
      <summary>
            Writes a <see cref="T:System.Uri" /> value.
            </summary>
      <param name="value">The <see cref="T:System.Uri" /> value to write.</param>
    </member>
    <member name="P:Newtonsoft.Json.Linq.JTokenWriter.Token">
      <summary>
            Gets the token being writen.
            </summary>
      <value>The token being writen.</value>
    </member>
    <member name="T:Newtonsoft.Json.MemberSerialization">
      <summary>
            Specifies the member serialization options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MemberSerialization.OptOut">
      <summary>
            All public members are serialized by default. Members can be excluded using <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute" /> or <see cref="T:System.NonSerializedAttribute" />.
            This is the default member serialization mode.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MemberSerialization.OptIn">
      <summary>
            Only members must be marked with <see cref="T:Newtonsoft.Json.JsonPropertyAttribute" /> or <see cref="T:System.Runtime.Serialization.DataMemberAttribute" /> are serialized.
            This member serialization mode can also be set by marking the class with <see cref="T:System.Runtime.Serialization.DataContractAttribute" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MemberSerialization.Fields">
      <summary>
            All public and private fields are serialized. Members can be excluded using <see cref="T:Newtonsoft.Json.JsonIgnoreAttribute" /> or <see cref="T:System.NonSerializedAttribute" />.
            This member serialization mode can also be set by marking the class with <see cref="T:System.SerializableAttribute" />
            and setting IgnoreSerializableAttribute on <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> to false.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.MissingMemberHandling">
      <summary>
            Specifies missing member handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MissingMemberHandling.Ignore">
      <summary>
            Ignore a missing member and do not attempt to deserialize it.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.MissingMemberHandling.Error">
      <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException" /> when a missing member is encountered during deserialization.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.NullValueHandling">
      <summary>
            Specifies null value handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingObject" title="NullValueHandling Class" />
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeNullValueHandlingExample" title="NullValueHandling Ignore Example" />
      </example>
    </member>
    <member name="F:Newtonsoft.Json.NullValueHandling.Include">
      <summary>
            Include null values when serializing and deserializing objects.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.NullValueHandling.Ignore">
      <summary>
            Ignore null values when serializing and deserializing objects.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.ObjectCreationHandling">
      <summary>
            Specifies how object creation is handled by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ObjectCreationHandling.Auto">
      <summary>
            Reuse existing objects, create new objects when needed.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ObjectCreationHandling.Reuse">
      <summary>
            Only reuse existing objects.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ObjectCreationHandling.Replace">
      <summary>
            Always create new objects.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.PreserveReferencesHandling">
      <summary>
            Specifies reference handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            Note that references cannot be preserved when a value is set via a non-default constructor such as types that implement ISerializable.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="PreservingObjectReferencesOn" title="Preserve Object References" />
      </example>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.None">
      <summary>
            Do not preserve references when serializing types.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Objects">
      <summary>
            Preserve references when serializing into a JSON object structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.Arrays">
      <summary>
            Preserve references when serializing into a JSON array structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.PreserveReferencesHandling.All">
      <summary>
            Preserve references when serializing.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.ReferenceLoopHandling">
      <summary>
            Specifies reference loop handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Error">
      <summary>
            Throw a <see cref="T:Newtonsoft.Json.JsonSerializationException" /> when a loop is encountered.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Ignore">
      <summary>
            Ignore loop references and do not serialize.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.ReferenceLoopHandling.Serialize">
      <summary>
            Serialize loop references.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Required">
      <summary>
            Indicating whether a property is required.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Required.Default">
      <summary>
            The property is not required. The default state.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Required.AllowNull">
      <summary>
            The property must be defined in JSON but can be a null value.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Required.Always">
      <summary>
            The property must be defined in JSON and cannot be a null value.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Schema.Extensions">
      <summary>
            Contains the JSON schema extension methods.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
      <summary>
            Determines whether the <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid.
            </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
      <returns>
        <c>true</c> if the specified <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.IsValid(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,System.Collections.Generic.IList{System.String}@)">
      <summary>
            Determines whether the <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid.
            </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
      <param name="errorMessages">When this method returns, contains any error messages generated while validating. </param>
      <returns>
        <c>true</c> if the specified <see cref="T:Newtonsoft.Json.Linq.JToken" /> is valid; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema)">
      <summary>
            Validates the specified <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.Extensions.Validate(Newtonsoft.Json.Linq.JToken,Newtonsoft.Json.Schema.JsonSchema,Newtonsoft.Json.Schema.ValidationEventHandler)">
      <summary>
            Validates the specified <see cref="T:Newtonsoft.Json.Linq.JToken" />.
            </summary>
      <param name="source">The source <see cref="T:Newtonsoft.Json.Linq.JToken" /> to test.</param>
      <param name="schema">The schema to test with.</param>
      <param name="validationEventHandler">The validation event handler.</param>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchema">
      <summary>
            An in-memory representation of a JSON Schema.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader)">
      <summary>
            Reads a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the JSON Schema to read.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> object representing the JSON Schema.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Read(Newtonsoft.Json.JsonReader,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Reads a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified <see cref="T:Newtonsoft.Json.JsonReader" />.
            </summary>
      <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> containing the JSON Schema to read.</param>
      <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> to use when resolving schema references.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> object representing the JSON Schema.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String)">
      <summary>
            Load a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from a string that contains schema JSON.
            </summary>
      <param name="json">A <see cref="T:System.String" /> that contains JSON.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.Parse(System.String,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Parses the specified json.
            </summary>
      <param name="json">The json.</param>
      <param name="resolver">The resolver.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> populated from the string that contains JSON.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter)">
      <summary>
            Writes this schema to a <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.WriteTo(Newtonsoft.Json.JsonWriter,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Writes this schema to a <see cref="T:Newtonsoft.Json.JsonWriter" /> using the specified <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" />.
            </summary>
      <param name="writer">A <see cref="T:Newtonsoft.Json.JsonWriter" /> into which this method will write.</param>
      <param name="resolver">The resolver used.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchema.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents the current <see cref="T:System.Object" />.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Id">
      <summary>
            Gets or sets the id.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Title">
      <summary>
            Gets or sets the title.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Required">
      <summary>
            Gets or sets whether the object is required.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.ReadOnly">
      <summary>
            Gets or sets whether the object is read only.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Hidden">
      <summary>
            Gets or sets whether the object is visible to users.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Transient">
      <summary>
            Gets or sets whether the object is transient.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Description">
      <summary>
            Gets or sets the description of the object.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Type">
      <summary>
            Gets or sets the types of values allowed by the object.
            </summary>
      <value>The type.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Pattern">
      <summary>
            Gets or sets the pattern.
            </summary>
      <value>The pattern.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumLength">
      <summary>
            Gets or sets the minimum length.
            </summary>
      <value>The minimum length.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumLength">
      <summary>
            Gets or sets the maximum length.
            </summary>
      <value>The maximum length.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.DivisibleBy">
      <summary>
            Gets or sets a number that the value should be divisble by.
            </summary>
      <value>A number that the value should be divisble by.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Minimum">
      <summary>
            Gets or sets the minimum.
            </summary>
      <value>The minimum.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Maximum">
      <summary>
            Gets or sets the maximum.
            </summary>
      <value>The maximum.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMinimum">
      <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the "minimum" attribute.
            </summary>
      <value>A flag indicating whether the value can not equal the number defined by the "minimum" attribute.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.ExclusiveMaximum">
      <summary>
            Gets or sets a flag indicating whether the value can not equal the number defined by the "maximum" attribute.
            </summary>
      <value>A flag indicating whether the value can not equal the number defined by the "maximum" attribute.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MinimumItems">
      <summary>
            Gets or sets the minimum number of items.
            </summary>
      <value>The minimum number of items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.MaximumItems">
      <summary>
            Gets or sets the maximum number of items.
            </summary>
      <value>The maximum number of items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Items">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of items.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.PositionalItemsValidation">
      <summary>
            Gets or sets a value indicating whether items in an array are validated using the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> instance at their array position from <see cref="P:Newtonsoft.Json.Schema.JsonSchema.Items" />.
            </summary>
      <value>
        <c>true</c> if items are validated using their array position; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AdditionalItems">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional items.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalItems">
      <summary>
            Gets or sets a value indicating whether additional items are allowed.
            </summary>
      <value>
        <c>true</c> if additional items are allowed; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.UniqueItems">
      <summary>
            Gets or sets whether the array items must be unique.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Properties">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of properties.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AdditionalProperties">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional properties.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> of additional properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.PatternProperties">
      <summary>
            Gets or sets the pattern properties.
            </summary>
      <value>The pattern properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.AllowAdditionalProperties">
      <summary>
            Gets or sets a value indicating whether additional properties are allowed.
            </summary>
      <value>
        <c>true</c> if additional properties are allowed; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Requires">
      <summary>
            Gets or sets the required property if this property is present.
            </summary>
      <value>The required property if this property is present.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Enum">
      <summary>
            Gets or sets the a collection of valid enum values allowed.
            </summary>
      <value>A collection of valid enum values allowed.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Disallow">
      <summary>
            Gets or sets disallowed types.
            </summary>
      <value>The disallow types.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Default">
      <summary>
            Gets or sets the default value.
            </summary>
      <value>The default value.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Extends">
      <summary>
            Gets or sets the collection of <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> that this schema extends.
            </summary>
      <value>The collection of <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> that this schema extends.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchema.Format">
      <summary>
            Gets or sets the format.
            </summary>
      <value>The format.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaException">
      <summary>
            Returns detailed information about the schema exception.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class
            with a specified error message.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class
            with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="message">The error message that explains the reason for the exception.</param>
      <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> class.
            </summary>
      <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo" /> that holds the serialized object data about the exception being thrown.</param>
      <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext" /> that contains contextual information about the source or destination.</param>
      <exception cref="T:System.ArgumentNullException">The <paramref name="info" /> parameter is null. </exception>
      <exception cref="T:System.Runtime.Serialization.SerializationException">The class name is null or <see cref="P:System.Exception.HResult" /> is zero (0). </exception>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LineNumber">
      <summary>
            Gets the line number indicating where the error occurred.
            </summary>
      <value>The line number indicating where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.LinePosition">
      <summary>
            Gets the line position indicating where the error occurred.
            </summary>
      <value>The line position indicating where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaException.Path">
      <summary>
            Gets the path to the JSON where the error occurred.
            </summary>
      <value>The path to the JSON where the error occurred.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaGenerator">
      <summary>
            Generates a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from a specified <see cref="T:System.Type" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> used to resolve schema references.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,System.Boolean)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> will be nullable.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaGenerator.Generate(System.Type,Newtonsoft.Json.Schema.JsonSchemaResolver,System.Boolean)">
      <summary>
            Generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from the specified type.
            </summary>
      <param name="type">The type to generate a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from.</param>
      <param name="resolver">The <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> used to resolve schema references.</param>
      <param name="rootSchemaNullable">Specify whether the generated root <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> will be nullable.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> generated from the specified type.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.UndefinedSchemaIdHandling">
      <summary>
            Gets or sets how undefined schemas are handled by the serializer.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaGenerator.ContractResolver">
      <summary>
            Gets or sets the contract resolver.
            </summary>
      <value>The contract resolver.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaResolver">
      <summary>
            Resolves <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> from an id.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaResolver" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Schema.JsonSchemaResolver.GetSchema(System.String)">
      <summary>
            Gets a <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> for the specified reference.
            </summary>
      <param name="reference">The id.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Schema.JsonSchema" /> for the specified reference.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Schema.JsonSchemaResolver.LoadedSchemas">
      <summary>
            Gets or sets the loaded schemas.
            </summary>
      <value>The loaded schemas.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.JsonSchemaType">
      <summary>
            The value types allowed by the <see cref="T:Newtonsoft.Json.Schema.JsonSchema" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.None">
      <summary>
            No type specified.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.String">
      <summary>
            String type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Float">
      <summary>
            Float type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Integer">
      <summary>
            Integer type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Boolean">
      <summary>
            Boolean type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Object">
      <summary>
            Object type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Array">
      <summary>
            Array type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Null">
      <summary>
            Null type.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.JsonSchemaType.Any">
      <summary>
            Any type.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling">
      <summary>
            Specifies undefined schema Id handling options for the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaGenerator" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.None">
      <summary>
            Do not infer a schema Id.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseTypeName">
      <summary>
            Use the .NET type name as the schema Id.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.Schema.UndefinedSchemaIdHandling.UseAssemblyQualifiedName">
      <summary>
            Use the assembly qualified .NET type name as the schema Id.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Schema.ValidationEventArgs">
      <summary>
            Returns detailed information related to the <see cref="T:Newtonsoft.Json.Schema.ValidationEventHandler" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Exception">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Schema.JsonSchemaException" /> associated with the validation error.
            </summary>
      <value>The JsonSchemaException associated with the validation error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Path">
      <summary>
            Gets the path of the JSON location where the validation error occurred.
            </summary>
      <value>The path of the JSON location where the validation error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.Schema.ValidationEventArgs.Message">
      <summary>
            Gets the text description corresponding to the validation error.
            </summary>
      <value>The text description.</value>
    </member>
    <member name="T:Newtonsoft.Json.Schema.ValidationEventHandler">
      <summary>
            Represents the callback method that will handle JSON schema validation events and the <see cref="T:Newtonsoft.Json.Schema.ValidationEventArgs" />.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.IContractResolver">
      <summary>
            Used by <see cref="T:Newtonsoft.Json.JsonSerializer" /> to resolves a <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for a given <see cref="T:System.Type" />.
            </summary>
      <example>
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverObject" title="IContractResolver Class" />
        <code lang="cs" source="..\Src\Newtonsoft.Json.Tests\Documentation\SerializationTests.cs" region="ReducingSerializedJsonSizeContractResolverExample" title="IContractResolver Example" />
      </example>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IContractResolver.ResolveContract(System.Type)">
      <summary>
            Resolves the contract for a given type.
            </summary>
      <param name="type">The type to resolve a contract for.</param>
      <returns>The contract for a given type.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DefaultContractResolver">
      <summary>
            Used by <see cref="T:Newtonsoft.Json.JsonSerializer" /> to resolves a <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for a given <see cref="T:System.Type" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.#ctor(System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> class.
            </summary>
      <param name="shareCache">
            If set to <c>true</c> the <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> will use a cached shared with other resolvers of the same type.
            Sharing the cache will significantly performance because expensive reflection will only happen once but could cause unexpected
            behavior if different instances of the resolver are suppose to produce different results. When set to false it is highly
            recommended to reuse <see cref="T:Newtonsoft.Json.Serialization.DefaultContractResolver" /> instances with the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(System.Type)">
      <summary>
            Resolves the contract for a given type.
            </summary>
      <param name="type">The type to resolve a contract for.</param>
      <returns>The contract for a given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetSerializableMembers(System.Type)">
      <summary>
            Gets the serializable members for the type.
            </summary>
      <param name="objectType">The type to get serializable members for.</param>
      <returns>The serializable members for the type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateObjectContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateConstructorParameters(System.Reflection.ConstructorInfo,Newtonsoft.Json.Serialization.JsonPropertyCollection)">
      <summary>
            Creates the constructor parameters.
            </summary>
      <param name="constructor">The constructor to create properties for.</param>
      <param name="memberProperties">The type's member properties.</param>
      <returns>Properties for the given <see cref="T:System.Reflection.ConstructorInfo" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePropertyFromConstructorParameter(Newtonsoft.Json.Serialization.JsonProperty,System.Reflection.ParameterInfo)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.ParameterInfo" />.
            </summary>
      <param name="matchingMemberProperty">The matching member property.</param>
      <param name="parameterInfo">The constructor parameter.</param>
      <returns>A created <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.ParameterInfo" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContractConverter(System.Type)">
      <summary>
            Resolves the default <see cref="T:Newtonsoft.Json.JsonConverter" /> for the contract.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>The contract's default <see cref="T:Newtonsoft.Json.JsonConverter" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDictionaryContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateArrayContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreatePrimitiveContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateLinqContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateISerializableContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateDynamicContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateStringContract(System.Type)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(System.Type)">
      <summary>
            Determines which contract type is created for the given type.
            </summary>
      <param name="objectType">Type of the object.</param>
      <returns>A <see cref="T:Newtonsoft.Json.Serialization.JsonContract" /> for the given type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperties(System.Type,Newtonsoft.Json.MemberSerialization)">
      <summary>
            Creates properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract" />.
            </summary>
      <param name="type">The type to create properties for.</param>
            /// <param name="memberSerialization">The member serialization mode for the type.</param><returns>Properties for the given <see cref="T:Newtonsoft.Json.Serialization.JsonContract" />.</returns></member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateMemberValueProvider(System.Reflection.MemberInfo)">
      <summary>
            Creates the <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> used by the serializer to get and set values from a member.
            </summary>
      <param name="member">The member.</param>
      <returns>The <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> used by the serializer to get and set values from a member.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
      <summary>
            Creates a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.MemberInfo" />.
            </summary>
      <param name="memberSerialization">The member's parent <see cref="T:Newtonsoft.Json.MemberSerialization" />.</param>
      <param name="member">The member to create a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for.</param>
      <returns>A created <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> for the given <see cref="T:System.Reflection.MemberInfo" />.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.ResolvePropertyName(System.String)">
      <summary>
            Resolves the name of the property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>Name of the property.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultContractResolver.GetResolvedPropertyName(System.String)">
      <summary>
            Gets the resolved name of the property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>Name of the property.</returns>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DynamicCodeGeneration">
      <summary>
            Gets a value indicating whether members are being get and set using dynamic code generation.
            This value is determined by the runtime permissions available.
            </summary>
      <value>
        <c>true</c> if using dynamic code generation; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.DefaultMembersSearchFlags">
      <summary>
            Gets or sets the default members search flags.
            </summary>
      <value>The default members search flags.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.SerializeCompilerGeneratedMembers">
      <summary>
            Gets or sets a value indicating whether compiler generated members should be serialized.
            </summary>
      <value>
        <c>true</c> if serialized compiler generated members; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableInterface">
      <summary>
            Gets or sets a value indicating whether to ignore the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface when serializing and deserializing types.
            </summary>
      <value>
        <c>true</c> if the <see cref="T:System.Runtime.Serialization.ISerializable" /> interface will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DefaultContractResolver.IgnoreSerializableAttribute">
      <summary>
            Gets or sets a value indicating whether to ignore the <see cref="T:System.SerializableAttribute" /> attribute when serializing and deserializing types.
            </summary>
      <value>
        <c>true</c> if the <see cref="T:System.SerializableAttribute" /> attribute will be ignored when serializing and deserializing types; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver">
      <summary>
            Resolves member mappings for a type, camel casing property names.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.CamelCasePropertyNamesContractResolver.ResolvePropertyName(System.String)">
      <summary>
            Resolves the name of the property.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>The property name camel cased.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.IReferenceResolver">
      <summary>
            Used to resolve references when serializing and deserializing JSON by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.ResolveReference(System.Object,System.String)">
      <summary>
            Resolves a reference to its object.
            </summary>
      <param name="context">The serialization context.</param>
      <param name="reference">The reference to resolve.</param>
      <returns>The object that</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.GetReference(System.Object,System.Object)">
      <summary>
            Gets the reference for the sepecified object.
            </summary>
      <param name="context">The serialization context.</param>
      <param name="value">The object to get a reference for.</param>
      <returns>The reference to the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.IsReferenced(System.Object,System.Object)">
      <summary>
            Determines whether the specified object is referenced.
            </summary>
      <param name="context">The serialization context.</param>
      <param name="value">The object to test for a reference.</param>
      <returns>
        <c>true</c> if the specified object is referenced; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IReferenceResolver.AddReference(System.Object,System.String,System.Object)">
      <summary>
            Adds a reference to the specified object.
            </summary>
      <param name="context">The serialization context.</param>
      <param name="reference">The reference.</param>
      <param name="value">The object to reference.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DefaultSerializationBinder">
      <summary>
            The default serialization binder used when resolving and loading classes from type names.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToType(System.String,System.String)">
      <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
      <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object.</param>
      <param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object.</param>
      <returns>
            The type of the object the formatter creates a new instance of.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DefaultSerializationBinder.BindToName(System.Type,System.String@,System.String@)">
      <summary>
            When overridden in a derived class, controls the binding of a serialized object to a type.
            </summary>
      <param name="serializedType">The type of the object the formatter creates a new instance of.</param>
      <param name="assemblyName">Specifies the <see cref="T:System.Reflection.Assembly" /> name of the serialized object. </param>
      <param name="typeName">Specifies the <see cref="T:System.Type" /> name of the serialized object. </param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ITraceWriter">
      <summary>
            Represents a trace writer.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ITraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
      <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
      <param name="level">The <see cref="T:System.Diagnostics.TraceLevel" /> at which to write this trace.</param>
      <param name="message">The trace message.</param>
      <param name="ex">The trace exception. This parameter is optional.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ITraceWriter.LevelFilter">
      <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
      <value>The <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter">
      <summary>
            Represents a trace writer that writes to the application's <see cref="T:System.Diagnostics.TraceListener" /> instances.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
      <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
      <param name="level">The <see cref="T:System.Diagnostics.TraceLevel" /> at which to write this trace.</param>
      <param name="message">The trace message.</param>
      <param name="ex">The trace exception. This parameter is optional.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.DiagnosticsTraceWriter.LevelFilter">
      <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
      <value>
            The <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.IValueProvider">
      <summary>
            Provides methods to get and set values.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IValueProvider.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="target">The target to set the value on.</param>
      <param name="value">The value to set on the target.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.IValueProvider.GetValue(System.Object)">
      <summary>
            Gets the value.
            </summary>
      <param name="target">The target to get the value from.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.DynamicValueProvider">
      <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo" /> using dynamic methods.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.#ctor(System.Reflection.MemberInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.DynamicValueProvider" /> class.
            </summary>
      <param name="memberInfo">The member info.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="target">The target to set the value on.</param>
      <param name="value">The value to set on the target.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.DynamicValueProvider.GetValue(System.Object)">
      <summary>
            Gets the value.
            </summary>
      <param name="target">The target to get the value from.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ErrorContext">
      <summary>
            Provides information surrounding an error.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Error">
      <summary>
            Gets or sets the error.
            </summary>
      <value>The error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.OriginalObject">
      <summary>
            Gets the original object that caused the error.
            </summary>
      <value>The original object that caused the error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Member">
      <summary>
            Gets the member that caused the error.
            </summary>
      <value>The member that caused the error.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Path">
      <summary>
            Gets the path of the JSON location where the error occurred.
            </summary>
      <value>The path of the JSON location where the error occurred.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorContext.Handled">
      <summary>
            Gets or sets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.ErrorContext" /> is handled.
            </summary>
      <value>
        <c>true</c> if handled; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ErrorEventArgs">
      <summary>
            Provides data for the Error event.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ErrorEventArgs.#ctor(System.Object,Newtonsoft.Json.Serialization.ErrorContext)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ErrorEventArgs" /> class.
            </summary>
      <param name="currentObject">The current object.</param>
      <param name="errorContext">The error context.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.CurrentObject">
      <summary>
            Gets the current object the error event is being raised against.
            </summary>
      <value>The current object the error event is being raised against.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.ErrorEventArgs.ErrorContext">
      <summary>
            Gets the error context.
            </summary>
      <value>The error context.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.UnderlyingType">
      <summary>
            Gets the underlying type for the contract.
            </summary>
      <value>The underlying type for the contract.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.CreatedType">
      <summary>
            Gets or sets the type created during deserialization.
            </summary>
      <value>The type created during deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.IsReference">
      <summary>
            Gets or sets whether this type contract is serialized as a reference.
            </summary>
      <value>Whether this type contract is serialized as a reference.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.Converter">
      <summary>
            Gets or sets the default <see cref="T:Newtonsoft.Json.JsonConverter" /> for this contract.
            </summary>
      <value>The converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializedCallbacks">
      <summary>
            Gets or sets all methods called immediately after deserialization of the object.
            </summary>
      <value>The methods called immediately after deserialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializingCallbacks">
      <summary>
            Gets or sets all methods called during deserialization of the object.
            </summary>
      <value>The methods called during deserialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializedCallbacks">
      <summary>
            Gets or sets all methods called after serialization of the object graph.
            </summary>
      <value>The methods called after serialization of the object graph.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializingCallbacks">
      <summary>
            Gets or sets all methods called before serialization of the object.
            </summary>
      <value>The methods called before serialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnErrorCallbacks">
      <summary>
            Gets or sets all method called when an error is thrown during the serialization of the object.
            </summary>
      <value>The methods called when an error is thrown during the serialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserialized">
      <summary>
            Gets or sets the method called immediately after deserialization of the object.
            </summary>
      <value>The method called immediately after deserialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnDeserializing">
      <summary>
            Gets or sets the method called during deserialization of the object.
            </summary>
      <value>The method called during deserialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerialized">
      <summary>
            Gets or sets the method called after serialization of the object graph.
            </summary>
      <value>The method called after serialization of the object graph.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnSerializing">
      <summary>
            Gets or sets the method called before serialization of the object.
            </summary>
      <value>The method called before serialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.OnError">
      <summary>
            Gets or sets the method called when an error is thrown during the serialization of the object.
            </summary>
      <value>The method called when an error is thrown during the serialization of the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreator">
      <summary>
            Gets or sets the default creator method used to create the object.
            </summary>
      <value>The default creator method used to create the object.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContract.DefaultCreatorNonPublic">
      <summary>
            Gets or sets a value indicating whether the default creator is non public.
            </summary>
      <value>
        <c>true</c> if the default object creator is non-public; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonContainerContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonContainerContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonContainerContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemConverter">
      <summary>
            Gets or sets the default collection items <see cref="T:Newtonsoft.Json.JsonConverter" />.
            </summary>
      <value>The converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemIsReference">
      <summary>
            Gets or sets a value indicating whether the collection items preserve object references.
            </summary>
      <value>
        <c>true</c> if collection items preserve object references; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemReferenceLoopHandling">
      <summary>
            Gets or sets the collection item reference loop handling.
            </summary>
      <value>The reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonContainerContract.ItemTypeNameHandling">
      <summary>
            Gets or sets the collection item type name handling.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonArrayContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonArrayContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonArrayContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.CollectionItemType">
      <summary>
            Gets the <see cref="T:System.Type" /> of the collection items.
            </summary>
      <value>The <see cref="T:System.Type" /> of the collection items.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonArrayContract.IsMultidimensionalArray">
      <summary>
            Gets a value indicating whether the collection type is a multidimensional array.
            </summary>
      <value>
        <c>true</c> if the collection type is a multidimensional array; otherwise, <c>false</c>.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.SerializationCallback">
      <summary>
            Handles <see cref="T:Newtonsoft.Json.JsonSerializer" /> serialization callback events.
            </summary>
      <param name="o">The object that raised the callback event.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.SerializationErrorCallback">
      <summary>
            Handles <see cref="T:Newtonsoft.Json.JsonSerializer" /> serialization error callback events.
            </summary>
      <param name="o">The object that raised the callback event.</param>
      <param name="context">The streaming context.</param>
      <param name="errorContext">The error context.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonDictionaryContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonDictionaryContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonDictionaryContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.PropertyNameResolver">
      <summary>
            Gets or sets the property name resolver.
            </summary>
      <value>The property name resolver.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryKeyType">
      <summary>
            Gets the <see cref="T:System.Type" /> of the dictionary keys.
            </summary>
      <value>The <see cref="T:System.Type" /> of the dictionary keys.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDictionaryContract.DictionaryValueType">
      <summary>
            Gets the <see cref="T:System.Type" /> of the dictionary values.
            </summary>
      <value>The <see cref="T:System.Type" /> of the dictionary values.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonDynamicContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonDynamicContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonDynamicContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDynamicContract.Properties">
      <summary>
            Gets the object's properties.
            </summary>
      <value>The object's properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonDynamicContract.PropertyNameResolver">
      <summary>
            Gets or sets the property name resolver.
            </summary>
      <value>The property name resolver.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonISerializableContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonISerializableContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonISerializableContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonISerializableContract.ISerializableCreator">
      <summary>
            Gets or sets the ISerializable object constructor.
            </summary>
      <value>The ISerializable object constructor.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonLinqContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonLinqContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonLinqContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonObjectContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonObjectContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonObjectContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.MemberSerialization">
      <summary>
            Gets or sets the object member serialization.
            </summary>
      <value>The member object serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ItemRequired">
      <summary>
            Gets or sets a value that indicates whether the object's properties are required.
            </summary>
      <value>
            	A value indicating whether the object's properties are required.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.Properties">
      <summary>
            Gets the object's properties.
            </summary>
      <value>The object's properties.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ConstructorParameters">
      <summary>
            Gets the constructor parameters required for any non-default constructor
            </summary>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.OverrideConstructor">
      <summary>
            Gets or sets the override constructor used to create the object.
            This is set when a constructor is marked up using the
            JsonConstructor attribute.
            </summary>
      <value>The override constructor.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonObjectContract.ParametrizedConstructor">
      <summary>
            Gets or sets the parametrized constructor used to create the object.
            </summary>
      <value>The parametrized constructor.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPrimitiveContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonPrimitiveContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonProperty">
      <summary>
            Maps a JSON property to a .NET member or constructor parameter.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonProperty.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
      <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyName">
      <summary>
            Gets or sets the name of the property.
            </summary>
      <value>The name of the property.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DeclaringType">
      <summary>
            Gets or sets the type that declared this property.
            </summary>
      <value>The type that declared this property.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Order">
      <summary>
            Gets or sets the order of serialization and deserialization of a member.
            </summary>
      <value>The numeric order of serialization or deserialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.UnderlyingName">
      <summary>
            Gets or sets the name of the underlying member or parameter.
            </summary>
      <value>The name of the underlying member or parameter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ValueProvider">
      <summary>
            Gets the <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> that will get and set the <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> during serialization.
            </summary>
      <value>The <see cref="T:Newtonsoft.Json.Serialization.IValueProvider" /> that will get and set the <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> during serialization.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.PropertyType">
      <summary>
            Gets or sets the type of the property.
            </summary>
      <value>The type of the property.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Converter">
      <summary>
            Gets or sets the <see cref="T:Newtonsoft.Json.JsonConverter" /> for the property.
            If set this converter takes presidence over the contract converter for the property type.
            </summary>
      <value>The converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.MemberConverter">
      <summary>
            Gets the member converter.
            </summary>
      <value>The member converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Ignored">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is ignored.
            </summary>
      <value>
        <c>true</c> if ignored; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Readable">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is readable.
            </summary>
      <value>
        <c>true</c> if readable; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Writable">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is writable.
            </summary>
      <value>
        <c>true</c> if writable; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.HasMemberAttribute">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> has a member attribute.
            </summary>
      <value>
        <c>true</c> if has a member attribute; otherwise, <c>false</c>.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValue">
      <summary>
            Gets the default value.
            </summary>
      <value>The default value.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.Required">
      <summary>
            Gets a value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is required.
            </summary>
      <value>A value indicating whether this <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> is required.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.IsReference">
      <summary>
            Gets a value indicating whether this property preserves object references.
            </summary>
      <value>
        <c>true</c> if this instance is reference; otherwise, <c>false</c>.
            </value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.NullValueHandling">
      <summary>
            Gets the property null value handling.
            </summary>
      <value>The null value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.DefaultValueHandling">
      <summary>
            Gets the property default value handling.
            </summary>
      <value>The default value handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ReferenceLoopHandling">
      <summary>
            Gets the property reference loop handling.
            </summary>
      <value>The reference loop handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ObjectCreationHandling">
      <summary>
            Gets the property object creation handling.
            </summary>
      <value>The object creation handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.TypeNameHandling">
      <summary>
            Gets or sets the type name handling.
            </summary>
      <value>The type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ShouldSerialize">
      <summary>
            Gets or sets a predicate used to determine whether the property should be serialize.
            </summary>
      <value>A predicate used to determine whether the property should be serialize.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.GetIsSpecified">
      <summary>
            Gets or sets a predicate used to determine whether the property should be serialized.
            </summary>
      <value>A predicate used to determine whether the property should be serialized.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.SetIsSpecified">
      <summary>
            Gets or sets an action used to set whether the property has been deserialized.
            </summary>
      <value>An action used to set whether the property has been deserialized.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemConverter">
      <summary>
            Gets or sets the converter used when serializing the property's collection items.
            </summary>
      <value>The collection's items converter.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemIsReference">
      <summary>
            Gets or sets whether this property's collection items are serialized as a reference.
            </summary>
      <value>Whether this property's collection items are serialized as a reference.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemTypeNameHandling">
      <summary>
            Gets or sets the the type name handling used when serializing the property's collection items.
            </summary>
      <value>The collection's items type name handling.</value>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.JsonProperty.ItemReferenceLoopHandling">
      <summary>
            Gets or sets the the reference loop handling used when serializing the property's collection items.
            </summary>
      <value>The collection's items reference loop handling.</value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonPropertyCollection">
      <summary>
            A collection of <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> objects.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonPropertyCollection" /> class.
            </summary>
      <param name="type">The type.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetKeyForItem(Newtonsoft.Json.Serialization.JsonProperty)">
      <summary>
            When implemented in a derived class, extracts the key from the specified element.
            </summary>
      <param name="item">The element from which to extract the key.</param>
      <returns>The key for the specified element.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.AddProperty(Newtonsoft.Json.Serialization.JsonProperty)">
      <summary>
            Adds a <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> object.
            </summary>
      <param name="property">The property to add to the collection.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetClosestMatchProperty(System.String)">
      <summary>
            Gets the closest matching <see cref="T:Newtonsoft.Json.Serialization.JsonProperty" /> object.
            First attempts to get an exact case match of propertyName and then
            a case insensitive match.
            </summary>
      <param name="propertyName">Name of the property.</param>
      <returns>A matching property if found.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonPropertyCollection.GetProperty(System.String,System.StringComparison)">
      <summary>
            Gets a property by property name.
            </summary>
      <param name="propertyName">The name of the property to get.</param>
      <param name="comparisonType">Type property name string comparison.</param>
      <returns>A matching property if found.</returns>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.JsonStringContract">
      <summary>
            Contract details for a <see cref="T:System.Type" /> used by the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.JsonStringContract.#ctor(System.Type)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.JsonStringContract" /> class.
            </summary>
      <param name="underlyingType">The underlying type for the contract.</param>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.MemoryTraceWriter">
      <summary>
            Represents a trace writer that writes to memory. When the trace message limit is
            reached then old trace messages will be removed as new messages are added.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.MemoryTraceWriter" /> class.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.Trace(System.Diagnostics.TraceLevel,System.String,System.Exception)">
      <summary>
            Writes the specified trace level, message and optional exception.
            </summary>
      <param name="level">The <see cref="T:System.Diagnostics.TraceLevel" /> at which to write this trace.</param>
      <param name="message">The trace message.</param>
      <param name="ex">The trace exception. This parameter is optional.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.GetTraceMessages">
      <summary>
            Returns an enumeration of the most recent trace messages.
            </summary>
      <returns>An enumeration of the most recent trace messages.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.MemoryTraceWriter.ToString">
      <summary>
            Returns a <see cref="T:System.String" /> of the most recent trace messages.
            </summary>
      <returns>
            A <see cref="T:System.String" /> of the most recent trace messages.
            </returns>
    </member>
    <member name="P:Newtonsoft.Json.Serialization.MemoryTraceWriter.LevelFilter">
      <summary>
            Gets the <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            For example a filter level of <code>Info</code> will exclude <code>Verbose</code> messages and include <code>Info</code>,
            <code>Warning</code> and <code>Error</code> messages.
            </summary>
      <value>
            The <see cref="T:System.Diagnostics.TraceLevel" /> that will be used to filter the trace messages passed to the writer.
            </value>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ObjectConstructor`1">
      <summary>
            Represents a method that constructs an object.
            </summary>
      <typeparam name="T">The object type to create.</typeparam>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.OnErrorAttribute">
      <summary>
            When applied to a method, specifies that the method is called when an error occurs serializing an object.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.Serialization.ReflectionValueProvider">
      <summary>
            Get and set values for a <see cref="T:System.Reflection.MemberInfo" /> using reflection.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.#ctor(System.Reflection.MemberInfo)">
      <summary>
            Initializes a new instance of the <see cref="T:Newtonsoft.Json.Serialization.ReflectionValueProvider" /> class.
            </summary>
      <param name="memberInfo">The member info.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.SetValue(System.Object,System.Object)">
      <summary>
            Sets the value.
            </summary>
      <param name="target">The target to set the value on.</param>
      <param name="value">The value to set on the target.</param>
    </member>
    <member name="M:Newtonsoft.Json.Serialization.ReflectionValueProvider.GetValue(System.Object)">
      <summary>
            Gets the value.
            </summary>
      <param name="target">The target to get the value from.</param>
      <returns>The value.</returns>
    </member>
    <member name="T:Newtonsoft.Json.StringEscapeHandling">
      <summary>
            Specifies how strings are escaped when writing JSON text.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.StringEscapeHandling.Default">
      <summary>
            Only control characters (e.g. newline) are escaped.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.StringEscapeHandling.EscapeNonAscii">
      <summary>
            All non-ASCII and control characters (e.g. newline) are escaped.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.StringEscapeHandling.EscapeHtml">
      <summary>
            HTML (&lt;, &gt;, &amp;, ', ") and control characters (e.g. newline) are escaped.
            </summary>
    </member>
    <member name="T:Newtonsoft.Json.TypeNameHandling">
      <summary>
            Specifies type name handling options for the <see cref="T:Newtonsoft.Json.JsonSerializer" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.None">
      <summary>
            Do not include the .NET type name when serializing types.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.Objects">
      <summary>
            Include the .NET type name when serializing into a JSON object structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.Arrays">
      <summary>
            Include the .NET type name when serializing into a JSON array structure.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.All">
      <summary>
            Always include the .NET type name when serializing.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.TypeNameHandling.Auto">
      <summary>
            Include the .NET type name when the type of the object being serialized is not the same as its declared type.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IsNullOrEmpty``1(System.Collections.Generic.ICollection{``0})">
      <summary>
            Determines whether the collection is null or empty.
            </summary>
      <param name="collection">The collection.</param>
      <returns>
        <c>true</c> if the collection is null or empty; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.AddRange``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Adds the elements of the specified collection to the specified generic IList.
            </summary>
      <param name="initial">The list to add to.</param>
      <param name="collection">The collection of elements to add.</param>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.CollectionUtils.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Returns the index of the first occurrence in a sequence by using a specified IEqualityComparer.
            </summary>
      <typeparam name="TSource">The type of the elements of source.</typeparam>
      <param name="list">A sequence in which to locate a value.</param>
      <param name="value">The object to locate in the sequence</param>
      <param name="comparer">An equality comparer to compare values.</param>
      <returns>The zero-based index of the first occurrence of value within the entire sequence, if found; otherwise, –1.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.Convert(System.Object,System.Globalization.CultureInfo,System.Type)">
      <summary>
            Converts the value to the specified type.
            </summary>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <param name="targetType">The type to convert the value to.</param>
      <returns>The converted type.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.TryConvert(System.Object,System.Globalization.CultureInfo,System.Type,System.Object@)">
      <summary>
            Converts the value to the specified type.
            </summary>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <param name="targetType">The type to convert the value to.</param>
      <param name="convertedValue">The converted value if the conversion was successful or the default value of <c>T</c> if it failed.</param>
      <returns>
        <c>true</c> if <c>initialValue</c> was converted successfully; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ConvertUtils.ConvertOrCast(System.Object,System.Globalization.CultureInfo,System.Type)">
      <summary>
            Converts the value to the specified type. If the value is unable to be converted, the
            value is checked whether it assignable to the specified type.
            </summary>
      <param name="initialValue">The value to convert.</param>
      <param name="culture">The culture to use when converting.</param>
      <param name="targetType">The type to convert or cast the value to.</param>
      <returns>
            The converted type. If conversion was unsuccessful, the initial value
            is returned if assignable to the target type.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodWithResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback,Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
      <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic that returns a result
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodReturnLast(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
      <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.CallMethodNoResult(System.String,System.Dynamic.DynamicMetaObjectBinder,System.Linq.Expressions.Expression[],Newtonsoft.Json.Utilities.DynamicProxyMetaObject{`0}.Fallback)">
      <summary>
            Helper method for generating a MetaObject which calls a
            specific method on Dynamic, but uses one of the arguments for
            the result.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.DynamicProxyMetaObject`1.GetRestrictions">
      <summary>
            Returns a Restrictions object which includes our current restrictions merged
            with a restriction limiting our type
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1">
      <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.EnumUtils.GetNamesAndValues``1(System.Type)">
      <summary>
            Gets a dictionary of the names and values of an Enum type.
            </summary>
      <param name="enumType">The enum type to get names and values for.</param>
      <returns>
      </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetCollectionItemType(System.Type)">
      <summary>
            Gets the type of the typed collection's items.
            </summary>
      <param name="type">The type.</param>
      <returns>The type of the typed collection's items.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberUnderlyingType(System.Reflection.MemberInfo)">
      <summary>
            Gets the member's underlying type.
            </summary>
      <param name="member">The member.</param>
      <returns>The underlying type of the member.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.MemberInfo)">
      <summary>
            Determines whether the member is an indexed property.
            </summary>
      <param name="member">The member.</param>
      <returns>
        <c>true</c> if the member is an indexed property; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.IsIndexedProperty(System.Reflection.PropertyInfo)">
      <summary>
            Determines whether the property is an indexed property.
            </summary>
      <param name="property">The property.</param>
      <returns>
        <c>true</c> if the property is an indexed property; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.GetMemberValue(System.Reflection.MemberInfo,System.Object)">
      <summary>
            Gets the member's value on the object.
            </summary>
      <param name="member">The member.</param>
      <param name="target">The target object.</param>
      <returns>The member's value on the object.</returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.SetMemberValue(System.Reflection.MemberInfo,System.Object,System.Object)">
      <summary>
            Sets the member's value on the target object.
            </summary>
      <param name="member">The member.</param>
      <param name="target">The target.</param>
      <param name="value">The value.</param>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanReadMemberValue(System.Reflection.MemberInfo,System.Boolean)">
      <summary>
            Determines whether the specified MemberInfo can be read.
            </summary>
      <param name="member">The MemberInfo to determine whether can be read.</param>
            /// <param name="nonPublic">if set to <c>true</c> then allow the member to be gotten non-publicly.</param><returns><c>true</c> if the specified MemberInfo can be read; otherwise, <c>false</c>.
            </returns></member>
    <member name="M:Newtonsoft.Json.Utilities.ReflectionUtils.CanSetMemberValue(System.Reflection.MemberInfo,System.Boolean,System.Boolean)">
      <summary>
            Determines whether the specified MemberInfo can be set.
            </summary>
      <param name="member">The MemberInfo to determine whether can be set.</param>
      <param name="nonPublic">if set to <c>true</c> then allow the member to be set non-publicly.</param>
      <param name="canSetReadOnly">if set to <c>true</c> then allow the member to be set if read-only.</param>
      <returns>
        <c>true</c> if the specified MemberInfo can be set; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="T:Newtonsoft.Json.Utilities.StringBuffer">
      <summary>
            Builds a string. Unlike StringBuilder this class lets you reuse it's internal buffer.
            </summary>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.StringUtils.IsWhiteSpace(System.String)">
      <summary>
            Determines whether the string is all white space. Empty string will return false.
            </summary>
      <param name="s">The string to test whether it is all white space.</param>
      <returns>
        <c>true</c> if the string is all white space; otherwise, <c>false</c>.
            </returns>
    </member>
    <member name="M:Newtonsoft.Json.Utilities.StringUtils.NullEmptyString(System.String)">
      <summary>
            Nulls an empty string.
            </summary>
      <param name="s">The string.</param>
      <returns>Null if the string was null, otherwise the string unchanged.</returns>
    </member>
    <member name="T:Newtonsoft.Json.WriteState">
      <summary>
            Specifies the state of the <see cref="T:Newtonsoft.Json.JsonWriter" />.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Error">
      <summary>
            An exception has been thrown, which has left the <see cref="T:Newtonsoft.Json.JsonWriter" /> in an invalid state.
            You may call the <see cref="M:Newtonsoft.Json.JsonWriter.Close" /> method to put the <see cref="T:Newtonsoft.Json.JsonWriter" /> in the <c>Closed</c> state.
            Any other <see cref="T:Newtonsoft.Json.JsonWriter" /> method calls results in an <see cref="T:System.InvalidOperationException" /> being thrown. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Closed">
      <summary>
            The <see cref="M:Newtonsoft.Json.JsonWriter.Close" /> method has been called. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Object">
      <summary>
            An object is being written. 
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Array">
      <summary>
            A array is being written.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Constructor">
      <summary>
            A constructor is being written.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Property">
      <summary>
            A property is being written.
            </summary>
    </member>
    <member name="F:Newtonsoft.Json.WriteState.Start">
      <summary>
            A write method has not been called.
            </summary>
    </member>
  </members>
</doc>