<%@ Master Language="C#" %>
<%@ Import Namespace="System.Globalization" %>
<%@ Import Namespace="RestFoundation" %>
<%@ Import Namespace="RestFoundation.Security" %>

<script runat="server" language="C#">
    private readonly RestOptions configurationOptions = Rest.Configuration.Options;    

    protected void Page_Init(object sender, EventArgs e)
    {
        ValidateHttpSecurity();
        ValidateIPRange();
        AuthorizeUserIfNecessary();
    }

    private void ValidateHttpSecurity()
    {
        if (!configurationOptions.ServiceProxyHttpsOnly || Request.IsSecureConnection)
        {
            return;
        }

        Response.Clear();
        Response.StatusCode = 403;
        Response.StatusDescription = "HTTPS required";
        Response.End();
    }

    private void ValidateIPRange()
    {
        List<IPAddressRange> ranges = IPAddressRange.GetConfiguredRanges("serviceProxyAcl").ToList();

        if (ranges.Count == 0)
        {
            return;
        }

        bool isAllowed = false;

        foreach (var range in ranges)
        {
            if (range.IsInRange(Request.UserHostAddress))
            {
                isAllowed = true;
                break;
            }
        }

        if (!isAllowed)
        {
            Response.Clear();
            Response.StatusCode = 403;
            Response.StatusDescription = "Access denied due to ACL restrictions";
            Response.End();
        }
    }
    
    private void AuthorizeUserIfNecessary()
    {
        if (Rest.Configuration.Options.ServiceProxyAuthorizationManager == null)
        {
            return;
        }

        AuthorizationHeader header;

        if (!AuthorizationHeaderParser.TryParse(Request.Headers["Authorization"], Encoding.Default, out header) ||
            !String.Equals("Basic", header.AuthenticationType, StringComparison.OrdinalIgnoreCase))
        {
            GenerateAuthenticationHeader();
            return;
        }

        Credentials credentials = configurationOptions.ServiceProxyAuthorizationManager.GetCredentials(header.UserName);

        if (credentials == null || !String.Equals(header.Password, credentials.Password, StringComparison.Ordinal))
        {
            GenerateAuthenticationHeader();
        }
    }

    private void GenerateAuthenticationHeader()
    {
        Response.Clear();
        Response.AppendHeader("WWW-Authenticate", String.Format(CultureInfo.InvariantCulture, "Basic realm=\"{0}\"", Request.ApplicationPath));
        Response.StatusCode = 401;
        Response.StatusDescription = "Unauthorized";
        Response.End();
    }
</script>

<!DOCTYPE html>
<html>
<head>
    <title>Service Proxy</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <style type="text/css">
        body{color:#000;background-color:#fff;font-family:Verdana;margin-left:0;margin-top:0}
        a:link,a:visited,a:active{color:#369;font-weight:700;text-decoration:none}
        a:hover{color:#369;font-weight:700;text-decoration:underline}
        table{border-collapse:collapse;border-spacing:0;font-family:Verdana}
        table th{border-right:2px #fff solid;border-bottom:2px #fff solid;font-weight:700;background-color:#cecf9c;padding:5px}
        table td{border-right:2px #fff solid;border-bottom:2px #fff solid;background-color:#e5e5cc;padding:3px 5px}
        table td.centered{text-align:center}
        tfoot td{background-color:#cecf9c;font-style:italic;padding:5px}
        pre{font-size:small;background-color:#e5e5cc;font-family:Courier New;margin-top:5px;margin-bottom:5px;border:1px #f0f0e0 solid;white-space:pre-wrap;word-wrap:break-word;padding:5px}
        .heading1{background-color:#036;border-bottom:#369 6px solid;color:#fff;font-family:Tahoma;font-size:26px;font-weight:400;padding-bottom:8px;padding-left:30px;padding-top:16px;margin:0 0 10px -20px}
        .heading1 a:link,.heading1 a:visited,.heading1 a:active{color:#fff;font-family:Tahoma;font-size:26px;font-weight:400;text-decoration:none}
        .heading1 a:hover{color:#fff;font-family:Tahoma;font-size:26px;font-weight:400;text-decoration:underline}
        .heading2{display:block;font-family:Verdana;font-size:12px;padding-top:5px}
        #content{margin-left:30px;font-size:.70em}
        #main{border:#bbb 1px solid;margin-left:-10px;background-color:#e5e5cc;padding:15px}
        #main h1{font-size:1.2em;font-weight:700;margin:15px 0 5px;padding:0}
        .clear{clear:both}
        select{font-family:Tahoma;font-size:13px}
        input[type=text]{font-family:Tahoma;font-size:1.2em;width:650px;border:1px solid #999}
        input[type=text].empty{font-family:Tahoma;font-size:1.2em;width:650px;border:1px solid #f00}
        input[type=text]#ProxyPort{width:50px}
        input[type=password]{font-family:Tahoma;font-size:1.2em;width:650px;border:1px solid #999}
        input[type=password].empty{font-family:Tahoma;font-size:1.2em;width:650px;border:1px solid #f00}
        textarea{font-family:Tahoma;font-size:1.2em;width:100%;height:200px;border:1px solid #999;padding:2px}
        .schemaSection{padding-top:20px}
        .operation_uri,.operation_uri-custom{white-space:nowrap;vertical-align:middle}
        .operation_uri-custom a:link,.operation_uri-custom a:visited,.operation_uri-custom a:active{color:#036}
        .additionalSchemaSection{padding-top:10px}
        .ip-filtered,.error-response-code{color:maroon}
        .field-validation-error{color:red}
        .input-validation-error{border:1px solid red!important;background-color:#fee}
        .validation-summary-errors{font-weight:700;color:red}
        .toggleOption{float:left;margin:13px 0 0 30px}
        .parameters{margin-bottom:15px}
        .spacer{padding-left:30px}
        #AllServices{float:right;font-size:15px;padding-right:10px;padding-top:10px}
        #Execute{font-weight:700}
        #HeaderText{height:120px}
        #ResponseHeightControls{float:right;text-align:right;vertical-align:bottom;margin:19px 0 0 auto}
        #HotKeys{padding-top:10px;color:#444}
        #responseCodes{margin-top:15px}
        #footer{font-family:Verdana;font-size:11px;color:#666;padding:25px 0 10px 30px}
        #footer a:link,#footer a:visited,#footer a:active{color:#666;text-decoration:none}
        #footer a:hover{color:#666;text-decoration:underline}
        ul.auto-list{font-size:10pt;display:none;position:absolute;top:0;left:0;border:1px solid #666;background-color:#e5e5cc;list-style:none;margin:0;padding:0}
        ul.auto-list > li:hover,ul.auto-list > li[data-selected=true]{color:#fff;background-color:#39f}
        ul.auto-list > li{border:1px solid #666;cursor:pointer;padding:2px}
        .hidden{width:0;height:0;font-size:0;color:transparent;background-color:transparent;border:none;margin:0;padding:0}
        .field-validation-valid,.validation-summary-valid{display:none}
        #HeaderTitle,#ResponseHeader{float:left}
        #ResponseHeightControls a,#SessionPersistence{margin-left:10px}
        #UserName{width:150px}
        #Password{width:100px}
    </style>
    <% if (!String.IsNullOrEmpty(configurationOptions.JQueryUrl)) { %>
    <script type="text/javascript" src="<%: configurationOptions.JQueryUrl.Trim() %>"></script>
    <% } else { %>
    <script type="text/javascript" src="http://code.jquery.com/jquery-1.7.2.min.js"></script>
    <% } %>
</head>
<body>
<p class="heading1">
    <a href="index" title="Service proxy home page">Index Service</a>
    <% if (!String.IsNullOrEmpty(Rest.Configuration.Options.ServiceDescription)) { %>
    <span class="heading2"><%: Rest.Configuration.Options.ServiceDescription %></span>
    <% } %>
</p>
<div id="content">
    <asp:ContentPlaceHolder runat="server" ID="bodyPlaceholder"></asp:ContentPlaceHolder>
</div>
<div id="footer">
    This web service was built with the <strong>REST Foundation</strong> framework (c) 2012-<%= DateTime.Now.Year %> by Dmitry Starosta
</div>
</body>
</html>
