<%@ Master Language="C#" %>
<%@ Import Namespace="System.Globalization" %>
<%@ Import Namespace="RestFoundation" %>
<%@ Import Namespace="RestFoundation.Configuration" %>
<%@ Import Namespace="RestFoundation.Security" %>
<%@ Import Namespace="RestFoundation.ServiceProxy" %>

<script runat="server" language="C#">
    private readonly RestOptions configurationOptions = Rest.Configuration.Options;    

    protected void Page_Init(object sender, EventArgs e)
    {
        ValidateHttpSecurity();
        ValidateIPRange();
        AuthorizeUserIfNecessary();
    }

    private void ValidateHttpSecurity()
    {
        if (!configurationOptions.ServiceProxyHttpsOnly || Request.IsSecureConnection)
        {
            return;
        }

        Response.Clear();
        Response.StatusCode = 403;
        Response.StatusDescription = "HTTPS required";
        Response.End();
    }

    private void ValidateIPRange()
    {
        List<IPAddressRange> ranges = IPAddressRange.GetConfiguredRanges("serviceProxyAcl").ToList();

        if (ranges.Count == 0)
        {
            return;
        }

        bool isAllowed = false;

        foreach (var range in ranges)
        {
            if (range.IsInRange(Request.UserHostAddress))
            {
                isAllowed = true;
                break;
            }
        }

        if (isAllowed)
        {
            return;
        }

        Response.Clear();
        Response.StatusCode = 403;
        Response.StatusDescription = "Access denied due to ACL restrictions";
        Response.End();
    }
    
    private void AuthorizeUserIfNecessary()
    {
        if (Rest.Configuration.Options.ServiceProxyAuthorizationManager == null)
        {
            return;
        }

        AuthorizationHeader header;

        if (!AuthorizationHeaderParser.TryParse(Request.Headers["Authorization"], Encoding.Default, out header) ||
            !String.Equals("Basic", header.AuthenticationType, StringComparison.OrdinalIgnoreCase))
        {
            GenerateAuthenticationHeader();
            return;
        }

        Credentials credentials = configurationOptions.ServiceProxyAuthorizationManager.GetCredentials(header.UserName);

        if (credentials == null || !String.Equals(header.Password, credentials.Password, StringComparison.Ordinal))
        {
            GenerateAuthenticationHeader();
        }
    }

    private void GenerateAuthenticationHeader()
    {
        Response.Clear();
        Response.AppendHeader("WWW-Authenticate", String.Format(CultureInfo.InvariantCulture, "Basic realm=\"{0}\"", Request.ApplicationPath));
        Response.StatusCode = 401;
        Response.StatusDescription = "Unauthorized";
        Response.End();
    }
</script>

<!DOCTYPE html>
<html>
<head>
    <title>Service Proxy</title>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <link type="text/css" rel="stylesheet" href="<%= ProxyUrlHelper.GetByRouteName(Response, "ProxyCss") %>" />
    <script type="text/javascript" src="<%= ProxyUrlHelper.GetByRouteName(Response, "ProxyJQuery") %>"></script>
</head>
<body>
<p class="heading1">
    <a href="index" title="Service proxy home page">Service Proxy</a>
    <% if (!String.IsNullOrEmpty(Rest.Configuration.Options.ServiceDescription)) { %>
    <span class="heading2"><%: Rest.Configuration.Options.ServiceDescription %></span>
    <% } %>
</p>
<div id="Content">
    <asp:ContentPlaceHolder runat="server" ID="bodyPlaceholder"></asp:ContentPlaceHolder>
</div>
<div id="Footer">
    This web service was built with the <span class="strong">REST Foundation v<%= Rest.FoundationAssembly.GetName().Version %></span> framework (c) 2012-<%= DateTime.Now.Year %> by Dmitry Starosta
</div>
</body>
</html>
